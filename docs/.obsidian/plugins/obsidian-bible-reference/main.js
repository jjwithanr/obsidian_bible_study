/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/.pnpm/crypt@0.0.2/node_modules/crypt/crypt.js
var require_crypt = __commonJS({
  "node_modules/.pnpm/crypt@0.0.2/node_modules/crypt/crypt.js"(exports, module2) {
    (function() {
      var base64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", crypt = {
        // Bit-wise rotation left
        rotl: function(n, b) {
          return n << b | n >>> 32 - b;
        },
        // Bit-wise rotation right
        rotr: function(n, b) {
          return n << 32 - b | n >>> b;
        },
        // Swap big-endian to little-endian and vice versa
        endian: function(n) {
          if (n.constructor == Number) {
            return crypt.rotl(n, 8) & 16711935 | crypt.rotl(n, 24) & 4278255360;
          }
          for (var i = 0; i < n.length; i++)
            n[i] = crypt.endian(n[i]);
          return n;
        },
        // Generate an array of any length of random bytes
        randomBytes: function(n) {
          for (var bytes = []; n > 0; n--)
            bytes.push(Math.floor(Math.random() * 256));
          return bytes;
        },
        // Convert a byte array to big-endian 32-bit words
        bytesToWords: function(bytes) {
          for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
            words[b >>> 5] |= bytes[i] << 24 - b % 32;
          return words;
        },
        // Convert big-endian 32-bit words to a byte array
        wordsToBytes: function(words) {
          for (var bytes = [], b = 0; b < words.length * 32; b += 8)
            bytes.push(words[b >>> 5] >>> 24 - b % 32 & 255);
          return bytes;
        },
        // Convert a byte array to a hex string
        bytesToHex: function(bytes) {
          for (var hex = [], i = 0; i < bytes.length; i++) {
            hex.push((bytes[i] >>> 4).toString(16));
            hex.push((bytes[i] & 15).toString(16));
          }
          return hex.join("");
        },
        // Convert a hex string to a byte array
        hexToBytes: function(hex) {
          for (var bytes = [], c = 0; c < hex.length; c += 2)
            bytes.push(parseInt(hex.substr(c, 2), 16));
          return bytes;
        },
        // Convert a byte array to a base-64 string
        bytesToBase64: function(bytes) {
          for (var base64 = [], i = 0; i < bytes.length; i += 3) {
            var triplet = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2];
            for (var j = 0; j < 4; j++)
              if (i * 8 + j * 6 <= bytes.length * 8)
                base64.push(base64map.charAt(triplet >>> 6 * (3 - j) & 63));
              else
                base64.push("=");
          }
          return base64.join("");
        },
        // Convert a base-64 string to a byte array
        base64ToBytes: function(base64) {
          base64 = base64.replace(/[^A-Z0-9+\/]/ig, "");
          for (var bytes = [], i = 0, imod4 = 0; i < base64.length; imod4 = ++i % 4) {
            if (imod4 == 0)
              continue;
            bytes.push((base64map.indexOf(base64.charAt(i - 1)) & Math.pow(2, -2 * imod4 + 8) - 1) << imod4 * 2 | base64map.indexOf(base64.charAt(i)) >>> 6 - imod4 * 2);
          }
          return bytes;
        }
      };
      module2.exports = crypt;
    })();
  }
});

// node_modules/.pnpm/charenc@0.0.2/node_modules/charenc/charenc.js
var require_charenc = __commonJS({
  "node_modules/.pnpm/charenc@0.0.2/node_modules/charenc/charenc.js"(exports, module2) {
    var charenc = {
      // UTF-8 encoding
      utf8: {
        // Convert a string to a byte array
        stringToBytes: function(str) {
          return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
        },
        // Convert a byte array to a string
        bytesToString: function(bytes) {
          return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
        }
      },
      // Binary encoding
      bin: {
        // Convert a string to a byte array
        stringToBytes: function(str) {
          for (var bytes = [], i = 0; i < str.length; i++)
            bytes.push(str.charCodeAt(i) & 255);
          return bytes;
        },
        // Convert a byte array to a string
        bytesToString: function(bytes) {
          for (var str = [], i = 0; i < bytes.length; i++)
            str.push(String.fromCharCode(bytes[i]));
          return str.join("");
        }
      }
    };
    module2.exports = charenc;
  }
});

// node_modules/.pnpm/is-buffer@1.1.6/node_modules/is-buffer/index.js
var require_is_buffer = __commonJS({
  "node_modules/.pnpm/is-buffer@1.1.6/node_modules/is-buffer/index.js"(exports, module2) {
    module2.exports = function(obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
    };
    function isBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
    }
    function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isBuffer(obj.slice(0, 0));
    }
  }
});

// node_modules/.pnpm/md5@2.3.0/node_modules/md5/md5.js
var require_md5 = __commonJS({
  "node_modules/.pnpm/md5@2.3.0/node_modules/md5/md5.js"(exports, module2) {
    (function() {
      var crypt = require_crypt(), utf8 = require_charenc().utf8, isBuffer = require_is_buffer(), bin = require_charenc().bin, md52 = function(message, options) {
        if (message.constructor == String)
          if (options && options.encoding === "binary")
            message = bin.stringToBytes(message);
          else
            message = utf8.stringToBytes(message);
        else if (isBuffer(message))
          message = Array.prototype.slice.call(message, 0);
        else if (!Array.isArray(message) && message.constructor !== Uint8Array)
          message = message.toString();
        var m = crypt.bytesToWords(message), l = message.length * 8, a = 1732584193, b = -271733879, c = -1732584194, d = 271733878;
        for (var i = 0; i < m.length; i++) {
          m[i] = (m[i] << 8 | m[i] >>> 24) & 16711935 | (m[i] << 24 | m[i] >>> 8) & 4278255360;
        }
        m[l >>> 5] |= 128 << l % 32;
        m[(l + 64 >>> 9 << 4) + 14] = l;
        var FF = md52._ff, GG = md52._gg, HH = md52._hh, II = md52._ii;
        for (var i = 0; i < m.length; i += 16) {
          var aa = a, bb = b, cc = c, dd = d;
          a = FF(a, b, c, d, m[i + 0], 7, -680876936);
          d = FF(d, a, b, c, m[i + 1], 12, -389564586);
          c = FF(c, d, a, b, m[i + 2], 17, 606105819);
          b = FF(b, c, d, a, m[i + 3], 22, -1044525330);
          a = FF(a, b, c, d, m[i + 4], 7, -176418897);
          d = FF(d, a, b, c, m[i + 5], 12, 1200080426);
          c = FF(c, d, a, b, m[i + 6], 17, -1473231341);
          b = FF(b, c, d, a, m[i + 7], 22, -45705983);
          a = FF(a, b, c, d, m[i + 8], 7, 1770035416);
          d = FF(d, a, b, c, m[i + 9], 12, -1958414417);
          c = FF(c, d, a, b, m[i + 10], 17, -42063);
          b = FF(b, c, d, a, m[i + 11], 22, -1990404162);
          a = FF(a, b, c, d, m[i + 12], 7, 1804603682);
          d = FF(d, a, b, c, m[i + 13], 12, -40341101);
          c = FF(c, d, a, b, m[i + 14], 17, -1502002290);
          b = FF(b, c, d, a, m[i + 15], 22, 1236535329);
          a = GG(a, b, c, d, m[i + 1], 5, -165796510);
          d = GG(d, a, b, c, m[i + 6], 9, -1069501632);
          c = GG(c, d, a, b, m[i + 11], 14, 643717713);
          b = GG(b, c, d, a, m[i + 0], 20, -373897302);
          a = GG(a, b, c, d, m[i + 5], 5, -701558691);
          d = GG(d, a, b, c, m[i + 10], 9, 38016083);
          c = GG(c, d, a, b, m[i + 15], 14, -660478335);
          b = GG(b, c, d, a, m[i + 4], 20, -405537848);
          a = GG(a, b, c, d, m[i + 9], 5, 568446438);
          d = GG(d, a, b, c, m[i + 14], 9, -1019803690);
          c = GG(c, d, a, b, m[i + 3], 14, -187363961);
          b = GG(b, c, d, a, m[i + 8], 20, 1163531501);
          a = GG(a, b, c, d, m[i + 13], 5, -1444681467);
          d = GG(d, a, b, c, m[i + 2], 9, -51403784);
          c = GG(c, d, a, b, m[i + 7], 14, 1735328473);
          b = GG(b, c, d, a, m[i + 12], 20, -1926607734);
          a = HH(a, b, c, d, m[i + 5], 4, -378558);
          d = HH(d, a, b, c, m[i + 8], 11, -2022574463);
          c = HH(c, d, a, b, m[i + 11], 16, 1839030562);
          b = HH(b, c, d, a, m[i + 14], 23, -35309556);
          a = HH(a, b, c, d, m[i + 1], 4, -1530992060);
          d = HH(d, a, b, c, m[i + 4], 11, 1272893353);
          c = HH(c, d, a, b, m[i + 7], 16, -155497632);
          b = HH(b, c, d, a, m[i + 10], 23, -1094730640);
          a = HH(a, b, c, d, m[i + 13], 4, 681279174);
          d = HH(d, a, b, c, m[i + 0], 11, -358537222);
          c = HH(c, d, a, b, m[i + 3], 16, -722521979);
          b = HH(b, c, d, a, m[i + 6], 23, 76029189);
          a = HH(a, b, c, d, m[i + 9], 4, -640364487);
          d = HH(d, a, b, c, m[i + 12], 11, -421815835);
          c = HH(c, d, a, b, m[i + 15], 16, 530742520);
          b = HH(b, c, d, a, m[i + 2], 23, -995338651);
          a = II(a, b, c, d, m[i + 0], 6, -198630844);
          d = II(d, a, b, c, m[i + 7], 10, 1126891415);
          c = II(c, d, a, b, m[i + 14], 15, -1416354905);
          b = II(b, c, d, a, m[i + 5], 21, -57434055);
          a = II(a, b, c, d, m[i + 12], 6, 1700485571);
          d = II(d, a, b, c, m[i + 3], 10, -1894986606);
          c = II(c, d, a, b, m[i + 10], 15, -1051523);
          b = II(b, c, d, a, m[i + 1], 21, -2054922799);
          a = II(a, b, c, d, m[i + 8], 6, 1873313359);
          d = II(d, a, b, c, m[i + 15], 10, -30611744);
          c = II(c, d, a, b, m[i + 6], 15, -1560198380);
          b = II(b, c, d, a, m[i + 13], 21, 1309151649);
          a = II(a, b, c, d, m[i + 4], 6, -145523070);
          d = II(d, a, b, c, m[i + 11], 10, -1120210379);
          c = II(c, d, a, b, m[i + 2], 15, 718787259);
          b = II(b, c, d, a, m[i + 9], 21, -343485551);
          a = a + aa >>> 0;
          b = b + bb >>> 0;
          c = c + cc >>> 0;
          d = d + dd >>> 0;
        }
        return crypt.endian([a, b, c, d]);
      };
      md52._ff = function(a, b, c, d, x, s, t) {
        var n = a + (b & c | ~b & d) + (x >>> 0) + t;
        return (n << s | n >>> 32 - s) + b;
      };
      md52._gg = function(a, b, c, d, x, s, t) {
        var n = a + (b & d | c & ~d) + (x >>> 0) + t;
        return (n << s | n >>> 32 - s) + b;
      };
      md52._hh = function(a, b, c, d, x, s, t) {
        var n = a + (b ^ c ^ d) + (x >>> 0) + t;
        return (n << s | n >>> 32 - s) + b;
      };
      md52._ii = function(a, b, c, d, x, s, t) {
        var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
        return (n << s | n >>> 32 - s) + b;
      };
      md52._blocksize = 16;
      md52._digestsize = 16;
      module2.exports = function(message, options) {
        if (message === void 0 || message === null)
          throw new Error("Illegal argument " + message);
        var digestbytes = crypt.wordsToBytes(md52(message, options));
        return options && options.asBytes ? digestbytes : options && options.asString ? bin.bytesToString(digestbytes) : crypt.bytesToHex(digestbytes);
      };
    })();
  }
});

// node_modules/.pnpm/big-integer@1.6.52/node_modules/big-integer/BigInteger.js
var require_BigInteger = __commonJS({
  "node_modules/.pnpm/big-integer@1.6.52/node_modules/big-integer/BigInteger.js"(exports, module2) {
    var bigInt = function(undefined2) {
      "use strict";
      var BASE = 1e7, LOG_BASE = 7, MAX_INT = 9007199254740992, MAX_INT_ARR = smallToArray(MAX_INT), DEFAULT_ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz";
      var supportsNativeBigInt = typeof BigInt === "function";
      function Integer(v, radix, alphabet, caseSensitive) {
        if (typeof v === "undefined")
          return Integer[0];
        if (typeof radix !== "undefined")
          return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);
        return parseValue(v);
      }
      function BigInteger(value, sign) {
        this.value = value;
        this.sign = sign;
        this.isSmall = false;
      }
      BigInteger.prototype = Object.create(Integer.prototype);
      function SmallInteger(value) {
        this.value = value;
        this.sign = value < 0;
        this.isSmall = true;
      }
      SmallInteger.prototype = Object.create(Integer.prototype);
      function NativeBigInt(value) {
        this.value = value;
      }
      NativeBigInt.prototype = Object.create(Integer.prototype);
      function isPrecise(n) {
        return -MAX_INT < n && n < MAX_INT;
      }
      function smallToArray(n) {
        if (n < 1e7)
          return [n];
        if (n < 1e14)
          return [n % 1e7, Math.floor(n / 1e7)];
        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];
      }
      function arrayToSmall(arr) {
        trim(arr);
        var length = arr.length;
        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {
          switch (length) {
            case 0:
              return 0;
            case 1:
              return arr[0];
            case 2:
              return arr[0] + arr[1] * BASE;
            default:
              return arr[0] + (arr[1] + arr[2] * BASE) * BASE;
          }
        }
        return arr;
      }
      function trim(v) {
        var i2 = v.length;
        while (v[--i2] === 0)
          ;
        v.length = i2 + 1;
      }
      function createArray(length) {
        var x = new Array(length);
        var i2 = -1;
        while (++i2 < length) {
          x[i2] = 0;
        }
        return x;
      }
      function truncate(n) {
        if (n > 0)
          return Math.floor(n);
        return Math.ceil(n);
      }
      function add(a, b) {
        var l_a = a.length, l_b = b.length, r = new Array(l_a), carry = 0, base = BASE, sum, i2;
        for (i2 = 0; i2 < l_b; i2++) {
          sum = a[i2] + b[i2] + carry;
          carry = sum >= base ? 1 : 0;
          r[i2] = sum - carry * base;
        }
        while (i2 < l_a) {
          sum = a[i2] + carry;
          carry = sum === base ? 1 : 0;
          r[i2++] = sum - carry * base;
        }
        if (carry > 0)
          r.push(carry);
        return r;
      }
      function addAny(a, b) {
        if (a.length >= b.length)
          return add(a, b);
        return add(b, a);
      }
      function addSmall(a, carry) {
        var l = a.length, r = new Array(l), base = BASE, sum, i2;
        for (i2 = 0; i2 < l; i2++) {
          sum = a[i2] - base + carry;
          carry = Math.floor(sum / base);
          r[i2] = sum - carry * base;
          carry += 1;
        }
        while (carry > 0) {
          r[i2++] = carry % base;
          carry = Math.floor(carry / base);
        }
        return r;
      }
      BigInteger.prototype.add = function(v) {
        var n = parseValue(v);
        if (this.sign !== n.sign) {
          return this.subtract(n.negate());
        }
        var a = this.value, b = n.value;
        if (n.isSmall) {
          return new BigInteger(addSmall(a, Math.abs(b)), this.sign);
        }
        return new BigInteger(addAny(a, b), this.sign);
      };
      BigInteger.prototype.plus = BigInteger.prototype.add;
      SmallInteger.prototype.add = function(v) {
        var n = parseValue(v);
        var a = this.value;
        if (a < 0 !== n.sign) {
          return this.subtract(n.negate());
        }
        var b = n.value;
        if (n.isSmall) {
          if (isPrecise(a + b))
            return new SmallInteger(a + b);
          b = smallToArray(Math.abs(b));
        }
        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);
      };
      SmallInteger.prototype.plus = SmallInteger.prototype.add;
      NativeBigInt.prototype.add = function(v) {
        return new NativeBigInt(this.value + parseValue(v).value);
      };
      NativeBigInt.prototype.plus = NativeBigInt.prototype.add;
      function subtract(a, b) {
        var a_l = a.length, b_l = b.length, r = new Array(a_l), borrow = 0, base = BASE, i2, difference;
        for (i2 = 0; i2 < b_l; i2++) {
          difference = a[i2] - borrow - b[i2];
          if (difference < 0) {
            difference += base;
            borrow = 1;
          } else
            borrow = 0;
          r[i2] = difference;
        }
        for (i2 = b_l; i2 < a_l; i2++) {
          difference = a[i2] - borrow;
          if (difference < 0)
            difference += base;
          else {
            r[i2++] = difference;
            break;
          }
          r[i2] = difference;
        }
        for (; i2 < a_l; i2++) {
          r[i2] = a[i2];
        }
        trim(r);
        return r;
      }
      function subtractAny(a, b, sign) {
        var value;
        if (compareAbs(a, b) >= 0) {
          value = subtract(a, b);
        } else {
          value = subtract(b, a);
          sign = !sign;
        }
        value = arrayToSmall(value);
        if (typeof value === "number") {
          if (sign)
            value = -value;
          return new SmallInteger(value);
        }
        return new BigInteger(value, sign);
      }
      function subtractSmall(a, b, sign) {
        var l = a.length, r = new Array(l), carry = -b, base = BASE, i2, difference;
        for (i2 = 0; i2 < l; i2++) {
          difference = a[i2] + carry;
          carry = Math.floor(difference / base);
          difference %= base;
          r[i2] = difference < 0 ? difference + base : difference;
        }
        r = arrayToSmall(r);
        if (typeof r === "number") {
          if (sign)
            r = -r;
          return new SmallInteger(r);
        }
        return new BigInteger(r, sign);
      }
      BigInteger.prototype.subtract = function(v) {
        var n = parseValue(v);
        if (this.sign !== n.sign) {
          return this.add(n.negate());
        }
        var a = this.value, b = n.value;
        if (n.isSmall)
          return subtractSmall(a, Math.abs(b), this.sign);
        return subtractAny(a, b, this.sign);
      };
      BigInteger.prototype.minus = BigInteger.prototype.subtract;
      SmallInteger.prototype.subtract = function(v) {
        var n = parseValue(v);
        var a = this.value;
        if (a < 0 !== n.sign) {
          return this.add(n.negate());
        }
        var b = n.value;
        if (n.isSmall) {
          return new SmallInteger(a - b);
        }
        return subtractSmall(b, Math.abs(a), a >= 0);
      };
      SmallInteger.prototype.minus = SmallInteger.prototype.subtract;
      NativeBigInt.prototype.subtract = function(v) {
        return new NativeBigInt(this.value - parseValue(v).value);
      };
      NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;
      BigInteger.prototype.negate = function() {
        return new BigInteger(this.value, !this.sign);
      };
      SmallInteger.prototype.negate = function() {
        var sign = this.sign;
        var small = new SmallInteger(-this.value);
        small.sign = !sign;
        return small;
      };
      NativeBigInt.prototype.negate = function() {
        return new NativeBigInt(-this.value);
      };
      BigInteger.prototype.abs = function() {
        return new BigInteger(this.value, false);
      };
      SmallInteger.prototype.abs = function() {
        return new SmallInteger(Math.abs(this.value));
      };
      NativeBigInt.prototype.abs = function() {
        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);
      };
      function multiplyLong(a, b) {
        var a_l = a.length, b_l = b.length, l = a_l + b_l, r = createArray(l), base = BASE, product, carry, i2, a_i, b_j;
        for (i2 = 0; i2 < a_l; ++i2) {
          a_i = a[i2];
          for (var j = 0; j < b_l; ++j) {
            b_j = b[j];
            product = a_i * b_j + r[i2 + j];
            carry = Math.floor(product / base);
            r[i2 + j] = product - carry * base;
            r[i2 + j + 1] += carry;
          }
        }
        trim(r);
        return r;
      }
      function multiplySmall(a, b) {
        var l = a.length, r = new Array(l), base = BASE, carry = 0, product, i2;
        for (i2 = 0; i2 < l; i2++) {
          product = a[i2] * b + carry;
          carry = Math.floor(product / base);
          r[i2] = product - carry * base;
        }
        while (carry > 0) {
          r[i2++] = carry % base;
          carry = Math.floor(carry / base);
        }
        return r;
      }
      function shiftLeft(x, n) {
        var r = [];
        while (n-- > 0)
          r.push(0);
        return r.concat(x);
      }
      function multiplyKaratsuba(x, y) {
        var n = Math.max(x.length, y.length);
        if (n <= 30)
          return multiplyLong(x, y);
        n = Math.ceil(n / 2);
        var b = x.slice(n), a = x.slice(0, n), d = y.slice(n), c = y.slice(0, n);
        var ac = multiplyKaratsuba(a, c), bd = multiplyKaratsuba(b, d), abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));
        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));
        trim(product);
        return product;
      }
      function useKaratsuba(l1, l2) {
        return -0.012 * l1 - 0.012 * l2 + 15e-6 * l1 * l2 > 0;
      }
      BigInteger.prototype.multiply = function(v) {
        var n = parseValue(v), a = this.value, b = n.value, sign = this.sign !== n.sign, abs;
        if (n.isSmall) {
          if (b === 0)
            return Integer[0];
          if (b === 1)
            return this;
          if (b === -1)
            return this.negate();
          abs = Math.abs(b);
          if (abs < BASE) {
            return new BigInteger(multiplySmall(a, abs), sign);
          }
          b = smallToArray(abs);
        }
        if (useKaratsuba(a.length, b.length))
          return new BigInteger(multiplyKaratsuba(a, b), sign);
        return new BigInteger(multiplyLong(a, b), sign);
      };
      BigInteger.prototype.times = BigInteger.prototype.multiply;
      function multiplySmallAndArray(a, b, sign) {
        if (a < BASE) {
          return new BigInteger(multiplySmall(b, a), sign);
        }
        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);
      }
      SmallInteger.prototype._multiplyBySmall = function(a) {
        if (isPrecise(a.value * this.value)) {
          return new SmallInteger(a.value * this.value);
        }
        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);
      };
      BigInteger.prototype._multiplyBySmall = function(a) {
        if (a.value === 0)
          return Integer[0];
        if (a.value === 1)
          return this;
        if (a.value === -1)
          return this.negate();
        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);
      };
      SmallInteger.prototype.multiply = function(v) {
        return parseValue(v)._multiplyBySmall(this);
      };
      SmallInteger.prototype.times = SmallInteger.prototype.multiply;
      NativeBigInt.prototype.multiply = function(v) {
        return new NativeBigInt(this.value * parseValue(v).value);
      };
      NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;
      function square(a) {
        var l = a.length, r = createArray(l + l), base = BASE, product, carry, i2, a_i, a_j;
        for (i2 = 0; i2 < l; i2++) {
          a_i = a[i2];
          carry = 0 - a_i * a_i;
          for (var j = i2; j < l; j++) {
            a_j = a[j];
            product = 2 * (a_i * a_j) + r[i2 + j] + carry;
            carry = Math.floor(product / base);
            r[i2 + j] = product - carry * base;
          }
          r[i2 + l] = carry;
        }
        trim(r);
        return r;
      }
      BigInteger.prototype.square = function() {
        return new BigInteger(square(this.value), false);
      };
      SmallInteger.prototype.square = function() {
        var value = this.value * this.value;
        if (isPrecise(value))
          return new SmallInteger(value);
        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);
      };
      NativeBigInt.prototype.square = function(v) {
        return new NativeBigInt(this.value * this.value);
      };
      function divMod1(a, b) {
        var a_l = a.length, b_l = b.length, base = BASE, result = createArray(b.length), divisorMostSignificantDigit = b[b_l - 1], lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)), remainder = multiplySmall(a, lambda), divisor = multiplySmall(b, lambda), quotientDigit, shift, carry, borrow, i2, l, q;
        if (remainder.length <= a_l)
          remainder.push(0);
        divisor.push(0);
        divisorMostSignificantDigit = divisor[b_l - 1];
        for (shift = a_l - b_l; shift >= 0; shift--) {
          quotientDigit = base - 1;
          if (remainder[shift + b_l] !== divisorMostSignificantDigit) {
            quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);
          }
          carry = 0;
          borrow = 0;
          l = divisor.length;
          for (i2 = 0; i2 < l; i2++) {
            carry += quotientDigit * divisor[i2];
            q = Math.floor(carry / base);
            borrow += remainder[shift + i2] - (carry - q * base);
            carry = q;
            if (borrow < 0) {
              remainder[shift + i2] = borrow + base;
              borrow = -1;
            } else {
              remainder[shift + i2] = borrow;
              borrow = 0;
            }
          }
          while (borrow !== 0) {
            quotientDigit -= 1;
            carry = 0;
            for (i2 = 0; i2 < l; i2++) {
              carry += remainder[shift + i2] - base + divisor[i2];
              if (carry < 0) {
                remainder[shift + i2] = carry + base;
                carry = 0;
              } else {
                remainder[shift + i2] = carry;
                carry = 1;
              }
            }
            borrow += carry;
          }
          result[shift] = quotientDigit;
        }
        remainder = divModSmall(remainder, lambda)[0];
        return [arrayToSmall(result), arrayToSmall(remainder)];
      }
      function divMod2(a, b) {
        var a_l = a.length, b_l = b.length, result = [], part = [], base = BASE, guess, xlen, highx, highy, check;
        while (a_l) {
          part.unshift(a[--a_l]);
          trim(part);
          if (compareAbs(part, b) < 0) {
            result.push(0);
            continue;
          }
          xlen = part.length;
          highx = part[xlen - 1] * base + part[xlen - 2];
          highy = b[b_l - 1] * base + b[b_l - 2];
          if (xlen > b_l) {
            highx = (highx + 1) * base;
          }
          guess = Math.ceil(highx / highy);
          do {
            check = multiplySmall(b, guess);
            if (compareAbs(check, part) <= 0)
              break;
            guess--;
          } while (guess);
          result.push(guess);
          part = subtract(part, check);
        }
        result.reverse();
        return [arrayToSmall(result), arrayToSmall(part)];
      }
      function divModSmall(value, lambda) {
        var length = value.length, quotient = createArray(length), base = BASE, i2, q, remainder, divisor;
        remainder = 0;
        for (i2 = length - 1; i2 >= 0; --i2) {
          divisor = remainder * base + value[i2];
          q = truncate(divisor / lambda);
          remainder = divisor - q * lambda;
          quotient[i2] = q | 0;
        }
        return [quotient, remainder | 0];
      }
      function divModAny(self2, v) {
        var value, n = parseValue(v);
        if (supportsNativeBigInt) {
          return [new NativeBigInt(self2.value / n.value), new NativeBigInt(self2.value % n.value)];
        }
        var a = self2.value, b = n.value;
        var quotient;
        if (b === 0)
          throw new Error("Cannot divide by zero");
        if (self2.isSmall) {
          if (n.isSmall) {
            return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];
          }
          return [Integer[0], self2];
        }
        if (n.isSmall) {
          if (b === 1)
            return [self2, Integer[0]];
          if (b == -1)
            return [self2.negate(), Integer[0]];
          var abs = Math.abs(b);
          if (abs < BASE) {
            value = divModSmall(a, abs);
            quotient = arrayToSmall(value[0]);
            var remainder = value[1];
            if (self2.sign)
              remainder = -remainder;
            if (typeof quotient === "number") {
              if (self2.sign !== n.sign)
                quotient = -quotient;
              return [new SmallInteger(quotient), new SmallInteger(remainder)];
            }
            return [new BigInteger(quotient, self2.sign !== n.sign), new SmallInteger(remainder)];
          }
          b = smallToArray(abs);
        }
        var comparison = compareAbs(a, b);
        if (comparison === -1)
          return [Integer[0], self2];
        if (comparison === 0)
          return [Integer[self2.sign === n.sign ? 1 : -1], Integer[0]];
        if (a.length + b.length <= 200)
          value = divMod1(a, b);
        else
          value = divMod2(a, b);
        quotient = value[0];
        var qSign = self2.sign !== n.sign, mod = value[1], mSign = self2.sign;
        if (typeof quotient === "number") {
          if (qSign)
            quotient = -quotient;
          quotient = new SmallInteger(quotient);
        } else
          quotient = new BigInteger(quotient, qSign);
        if (typeof mod === "number") {
          if (mSign)
            mod = -mod;
          mod = new SmallInteger(mod);
        } else
          mod = new BigInteger(mod, mSign);
        return [quotient, mod];
      }
      BigInteger.prototype.divmod = function(v) {
        var result = divModAny(this, v);
        return {
          quotient: result[0],
          remainder: result[1]
        };
      };
      NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;
      BigInteger.prototype.divide = function(v) {
        return divModAny(this, v)[0];
      };
      NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function(v) {
        return new NativeBigInt(this.value / parseValue(v).value);
      };
      SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;
      BigInteger.prototype.mod = function(v) {
        return divModAny(this, v)[1];
      };
      NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function(v) {
        return new NativeBigInt(this.value % parseValue(v).value);
      };
      SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;
      BigInteger.prototype.pow = function(v) {
        var n = parseValue(v), a = this.value, b = n.value, value, x, y;
        if (b === 0)
          return Integer[1];
        if (a === 0)
          return Integer[0];
        if (a === 1)
          return Integer[1];
        if (a === -1)
          return n.isEven() ? Integer[1] : Integer[-1];
        if (n.sign) {
          return Integer[0];
        }
        if (!n.isSmall)
          throw new Error("The exponent " + n.toString() + " is too large.");
        if (this.isSmall) {
          if (isPrecise(value = Math.pow(a, b)))
            return new SmallInteger(truncate(value));
        }
        x = this;
        y = Integer[1];
        while (true) {
          if (b & true) {
            y = y.times(x);
            --b;
          }
          if (b === 0)
            break;
          b /= 2;
          x = x.square();
        }
        return y;
      };
      SmallInteger.prototype.pow = BigInteger.prototype.pow;
      NativeBigInt.prototype.pow = function(v) {
        var n = parseValue(v);
        var a = this.value, b = n.value;
        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);
        if (b === _0)
          return Integer[1];
        if (a === _0)
          return Integer[0];
        if (a === _1)
          return Integer[1];
        if (a === BigInt(-1))
          return n.isEven() ? Integer[1] : Integer[-1];
        if (n.isNegative())
          return new NativeBigInt(_0);
        var x = this;
        var y = Integer[1];
        while (true) {
          if ((b & _1) === _1) {
            y = y.times(x);
            --b;
          }
          if (b === _0)
            break;
          b /= _2;
          x = x.square();
        }
        return y;
      };
      BigInteger.prototype.modPow = function(exp, mod) {
        exp = parseValue(exp);
        mod = parseValue(mod);
        if (mod.isZero())
          throw new Error("Cannot take modPow with modulus 0");
        var r = Integer[1], base = this.mod(mod);
        if (exp.isNegative()) {
          exp = exp.multiply(Integer[-1]);
          base = base.modInv(mod);
        }
        while (exp.isPositive()) {
          if (base.isZero())
            return Integer[0];
          if (exp.isOdd())
            r = r.multiply(base).mod(mod);
          exp = exp.divide(2);
          base = base.square().mod(mod);
        }
        return r;
      };
      NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;
      function compareAbs(a, b) {
        if (a.length !== b.length) {
          return a.length > b.length ? 1 : -1;
        }
        for (var i2 = a.length - 1; i2 >= 0; i2--) {
          if (a[i2] !== b[i2])
            return a[i2] > b[i2] ? 1 : -1;
        }
        return 0;
      }
      BigInteger.prototype.compareAbs = function(v) {
        var n = parseValue(v), a = this.value, b = n.value;
        if (n.isSmall)
          return 1;
        return compareAbs(a, b);
      };
      SmallInteger.prototype.compareAbs = function(v) {
        var n = parseValue(v), a = Math.abs(this.value), b = n.value;
        if (n.isSmall) {
          b = Math.abs(b);
          return a === b ? 0 : a > b ? 1 : -1;
        }
        return -1;
      };
      NativeBigInt.prototype.compareAbs = function(v) {
        var a = this.value;
        var b = parseValue(v).value;
        a = a >= 0 ? a : -a;
        b = b >= 0 ? b : -b;
        return a === b ? 0 : a > b ? 1 : -1;
      };
      BigInteger.prototype.compare = function(v) {
        if (v === Infinity) {
          return -1;
        }
        if (v === -Infinity) {
          return 1;
        }
        var n = parseValue(v), a = this.value, b = n.value;
        if (this.sign !== n.sign) {
          return n.sign ? 1 : -1;
        }
        if (n.isSmall) {
          return this.sign ? -1 : 1;
        }
        return compareAbs(a, b) * (this.sign ? -1 : 1);
      };
      BigInteger.prototype.compareTo = BigInteger.prototype.compare;
      SmallInteger.prototype.compare = function(v) {
        if (v === Infinity) {
          return -1;
        }
        if (v === -Infinity) {
          return 1;
        }
        var n = parseValue(v), a = this.value, b = n.value;
        if (n.isSmall) {
          return a == b ? 0 : a > b ? 1 : -1;
        }
        if (a < 0 !== n.sign) {
          return a < 0 ? -1 : 1;
        }
        return a < 0 ? 1 : -1;
      };
      SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;
      NativeBigInt.prototype.compare = function(v) {
        if (v === Infinity) {
          return -1;
        }
        if (v === -Infinity) {
          return 1;
        }
        var a = this.value;
        var b = parseValue(v).value;
        return a === b ? 0 : a > b ? 1 : -1;
      };
      NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;
      BigInteger.prototype.equals = function(v) {
        return this.compare(v) === 0;
      };
      NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;
      BigInteger.prototype.notEquals = function(v) {
        return this.compare(v) !== 0;
      };
      NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;
      BigInteger.prototype.greater = function(v) {
        return this.compare(v) > 0;
      };
      NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;
      BigInteger.prototype.lesser = function(v) {
        return this.compare(v) < 0;
      };
      NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;
      BigInteger.prototype.greaterOrEquals = function(v) {
        return this.compare(v) >= 0;
      };
      NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;
      BigInteger.prototype.lesserOrEquals = function(v) {
        return this.compare(v) <= 0;
      };
      NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;
      BigInteger.prototype.isEven = function() {
        return (this.value[0] & 1) === 0;
      };
      SmallInteger.prototype.isEven = function() {
        return (this.value & 1) === 0;
      };
      NativeBigInt.prototype.isEven = function() {
        return (this.value & BigInt(1)) === BigInt(0);
      };
      BigInteger.prototype.isOdd = function() {
        return (this.value[0] & 1) === 1;
      };
      SmallInteger.prototype.isOdd = function() {
        return (this.value & 1) === 1;
      };
      NativeBigInt.prototype.isOdd = function() {
        return (this.value & BigInt(1)) === BigInt(1);
      };
      BigInteger.prototype.isPositive = function() {
        return !this.sign;
      };
      SmallInteger.prototype.isPositive = function() {
        return this.value > 0;
      };
      NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;
      BigInteger.prototype.isNegative = function() {
        return this.sign;
      };
      SmallInteger.prototype.isNegative = function() {
        return this.value < 0;
      };
      NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;
      BigInteger.prototype.isUnit = function() {
        return false;
      };
      SmallInteger.prototype.isUnit = function() {
        return Math.abs(this.value) === 1;
      };
      NativeBigInt.prototype.isUnit = function() {
        return this.abs().value === BigInt(1);
      };
      BigInteger.prototype.isZero = function() {
        return false;
      };
      SmallInteger.prototype.isZero = function() {
        return this.value === 0;
      };
      NativeBigInt.prototype.isZero = function() {
        return this.value === BigInt(0);
      };
      BigInteger.prototype.isDivisibleBy = function(v) {
        var n = parseValue(v);
        if (n.isZero())
          return false;
        if (n.isUnit())
          return true;
        if (n.compareAbs(2) === 0)
          return this.isEven();
        return this.mod(n).isZero();
      };
      NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;
      function isBasicPrime(v) {
        var n = v.abs();
        if (n.isUnit())
          return false;
        if (n.equals(2) || n.equals(3) || n.equals(5))
          return true;
        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5))
          return false;
        if (n.lesser(49))
          return true;
      }
      function millerRabinTest(n, a) {
        var nPrev = n.prev(), b = nPrev, r = 0, d, t, i2, x;
        while (b.isEven())
          b = b.divide(2), r++;
        next:
          for (i2 = 0; i2 < a.length; i2++) {
            if (n.lesser(a[i2]))
              continue;
            x = bigInt(a[i2]).modPow(b, n);
            if (x.isUnit() || x.equals(nPrev))
              continue;
            for (d = r - 1; d != 0; d--) {
              x = x.square().mod(n);
              if (x.isUnit())
                return false;
              if (x.equals(nPrev))
                continue next;
            }
            return false;
          }
        return true;
      }
      BigInteger.prototype.isPrime = function(strict) {
        var isPrime = isBasicPrime(this);
        if (isPrime !== undefined2)
          return isPrime;
        var n = this.abs();
        var bits = n.bitLength();
        if (bits <= 64)
          return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);
        var logN = Math.log(2) * bits.toJSNumber();
        var t = Math.ceil(strict === true ? 2 * Math.pow(logN, 2) : logN);
        for (var a = [], i2 = 0; i2 < t; i2++) {
          a.push(bigInt(i2 + 2));
        }
        return millerRabinTest(n, a);
      };
      NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;
      BigInteger.prototype.isProbablePrime = function(iterations, rng2) {
        var isPrime = isBasicPrime(this);
        if (isPrime !== undefined2)
          return isPrime;
        var n = this.abs();
        var t = iterations === undefined2 ? 5 : iterations;
        for (var a = [], i2 = 0; i2 < t; i2++) {
          a.push(bigInt.randBetween(2, n.minus(2), rng2));
        }
        return millerRabinTest(n, a);
      };
      NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;
      BigInteger.prototype.modInv = function(n) {
        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;
        while (!newR.isZero()) {
          q = r.divide(newR);
          lastT = t;
          lastR = r;
          t = newT;
          r = newR;
          newT = lastT.subtract(q.multiply(newT));
          newR = lastR.subtract(q.multiply(newR));
        }
        if (!r.isUnit())
          throw new Error(this.toString() + " and " + n.toString() + " are not co-prime");
        if (t.compare(0) === -1) {
          t = t.add(n);
        }
        if (this.isNegative()) {
          return t.negate();
        }
        return t;
      };
      NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;
      BigInteger.prototype.next = function() {
        var value = this.value;
        if (this.sign) {
          return subtractSmall(value, 1, this.sign);
        }
        return new BigInteger(addSmall(value, 1), this.sign);
      };
      SmallInteger.prototype.next = function() {
        var value = this.value;
        if (value + 1 < MAX_INT)
          return new SmallInteger(value + 1);
        return new BigInteger(MAX_INT_ARR, false);
      };
      NativeBigInt.prototype.next = function() {
        return new NativeBigInt(this.value + BigInt(1));
      };
      BigInteger.prototype.prev = function() {
        var value = this.value;
        if (this.sign) {
          return new BigInteger(addSmall(value, 1), true);
        }
        return subtractSmall(value, 1, this.sign);
      };
      SmallInteger.prototype.prev = function() {
        var value = this.value;
        if (value - 1 > -MAX_INT)
          return new SmallInteger(value - 1);
        return new BigInteger(MAX_INT_ARR, true);
      };
      NativeBigInt.prototype.prev = function() {
        return new NativeBigInt(this.value - BigInt(1));
      };
      var powersOfTwo = [1];
      while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE)
        powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);
      var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];
      function shift_isSmall(n) {
        return Math.abs(n) <= BASE;
      }
      BigInteger.prototype.shiftLeft = function(v) {
        var n = parseValue(v).toJSNumber();
        if (!shift_isSmall(n)) {
          throw new Error(String(n) + " is too large for shifting.");
        }
        if (n < 0)
          return this.shiftRight(-n);
        var result = this;
        if (result.isZero())
          return result;
        while (n >= powers2Length) {
          result = result.multiply(highestPower2);
          n -= powers2Length - 1;
        }
        return result.multiply(powersOfTwo[n]);
      };
      NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;
      BigInteger.prototype.shiftRight = function(v) {
        var remQuo;
        var n = parseValue(v).toJSNumber();
        if (!shift_isSmall(n)) {
          throw new Error(String(n) + " is too large for shifting.");
        }
        if (n < 0)
          return this.shiftLeft(-n);
        var result = this;
        while (n >= powers2Length) {
          if (result.isZero() || result.isNegative() && result.isUnit())
            return result;
          remQuo = divModAny(result, highestPower2);
          result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
          n -= powers2Length - 1;
        }
        remQuo = divModAny(result, powersOfTwo[n]);
        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
      };
      NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;
      function bitwise(x, y, fn) {
        y = parseValue(y);
        var xSign = x.isNegative(), ySign = y.isNegative();
        var xRem = xSign ? x.not() : x, yRem = ySign ? y.not() : y;
        var xDigit = 0, yDigit = 0;
        var xDivMod = null, yDivMod = null;
        var result = [];
        while (!xRem.isZero() || !yRem.isZero()) {
          xDivMod = divModAny(xRem, highestPower2);
          xDigit = xDivMod[1].toJSNumber();
          if (xSign) {
            xDigit = highestPower2 - 1 - xDigit;
          }
          yDivMod = divModAny(yRem, highestPower2);
          yDigit = yDivMod[1].toJSNumber();
          if (ySign) {
            yDigit = highestPower2 - 1 - yDigit;
          }
          xRem = xDivMod[0];
          yRem = yDivMod[0];
          result.push(fn(xDigit, yDigit));
        }
        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);
        for (var i2 = result.length - 1; i2 >= 0; i2 -= 1) {
          sum = sum.multiply(highestPower2).add(bigInt(result[i2]));
        }
        return sum;
      }
      BigInteger.prototype.not = function() {
        return this.negate().prev();
      };
      NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;
      BigInteger.prototype.and = function(n) {
        return bitwise(this, n, function(a, b) {
          return a & b;
        });
      };
      NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;
      BigInteger.prototype.or = function(n) {
        return bitwise(this, n, function(a, b) {
          return a | b;
        });
      };
      NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;
      BigInteger.prototype.xor = function(n) {
        return bitwise(this, n, function(a, b) {
          return a ^ b;
        });
      };
      NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;
      var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;
      function roughLOB(n) {
        var v = n.value, x = typeof v === "number" ? v | LOBMASK_I : typeof v === "bigint" ? v | BigInt(LOBMASK_I) : v[0] + v[1] * BASE | LOBMASK_BI;
        return x & -x;
      }
      function integerLogarithm(value, base) {
        if (base.compareTo(value) <= 0) {
          var tmp = integerLogarithm(value, base.square(base));
          var p = tmp.p;
          var e = tmp.e;
          var t = p.multiply(base);
          return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p, e: e * 2 };
        }
        return { p: bigInt(1), e: 0 };
      }
      BigInteger.prototype.bitLength = function() {
        var n = this;
        if (n.compareTo(bigInt(0)) < 0) {
          n = n.negate().subtract(bigInt(1));
        }
        if (n.compareTo(bigInt(0)) === 0) {
          return bigInt(0);
        }
        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));
      };
      NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;
      function max(a, b) {
        a = parseValue(a);
        b = parseValue(b);
        return a.greater(b) ? a : b;
      }
      function min(a, b) {
        a = parseValue(a);
        b = parseValue(b);
        return a.lesser(b) ? a : b;
      }
      function gcd(a, b) {
        a = parseValue(a).abs();
        b = parseValue(b).abs();
        if (a.equals(b))
          return a;
        if (a.isZero())
          return b;
        if (b.isZero())
          return a;
        var c = Integer[1], d, t;
        while (a.isEven() && b.isEven()) {
          d = min(roughLOB(a), roughLOB(b));
          a = a.divide(d);
          b = b.divide(d);
          c = c.multiply(d);
        }
        while (a.isEven()) {
          a = a.divide(roughLOB(a));
        }
        do {
          while (b.isEven()) {
            b = b.divide(roughLOB(b));
          }
          if (a.greater(b)) {
            t = b;
            b = a;
            a = t;
          }
          b = b.subtract(a);
        } while (!b.isZero());
        return c.isUnit() ? a : a.multiply(c);
      }
      function lcm(a, b) {
        a = parseValue(a).abs();
        b = parseValue(b).abs();
        return a.divide(gcd(a, b)).multiply(b);
      }
      function randBetween(a, b, rng2) {
        a = parseValue(a);
        b = parseValue(b);
        var usedRNG = rng2 || Math.random;
        var low = min(a, b), high = max(a, b);
        var range = high.subtract(low).add(1);
        if (range.isSmall)
          return low.add(Math.floor(usedRNG() * range));
        var digits = toBase(range, BASE).value;
        var result = [], restricted = true;
        for (var i2 = 0; i2 < digits.length; i2++) {
          var top = restricted ? digits[i2] + (i2 + 1 < digits.length ? digits[i2 + 1] / BASE : 0) : BASE;
          var digit = truncate(usedRNG() * top);
          result.push(digit);
          if (digit < digits[i2])
            restricted = false;
        }
        return low.add(Integer.fromArray(result, BASE, false));
      }
      var parseBase = function(text, base, alphabet, caseSensitive) {
        alphabet = alphabet || DEFAULT_ALPHABET;
        text = String(text);
        if (!caseSensitive) {
          text = text.toLowerCase();
          alphabet = alphabet.toLowerCase();
        }
        var length = text.length;
        var i2;
        var absBase = Math.abs(base);
        var alphabetValues = {};
        for (i2 = 0; i2 < alphabet.length; i2++) {
          alphabetValues[alphabet[i2]] = i2;
        }
        for (i2 = 0; i2 < length; i2++) {
          var c = text[i2];
          if (c === "-")
            continue;
          if (c in alphabetValues) {
            if (alphabetValues[c] >= absBase) {
              if (c === "1" && absBase === 1)
                continue;
              throw new Error(c + " is not a valid digit in base " + base + ".");
            }
          }
        }
        base = parseValue(base);
        var digits = [];
        var isNegative = text[0] === "-";
        for (i2 = isNegative ? 1 : 0; i2 < text.length; i2++) {
          var c = text[i2];
          if (c in alphabetValues)
            digits.push(parseValue(alphabetValues[c]));
          else if (c === "<") {
            var start = i2;
            do {
              i2++;
            } while (text[i2] !== ">" && i2 < text.length);
            digits.push(parseValue(text.slice(start + 1, i2)));
          } else
            throw new Error(c + " is not a valid character");
        }
        return parseBaseFromArray(digits, base, isNegative);
      };
      function parseBaseFromArray(digits, base, isNegative) {
        var val = Integer[0], pow = Integer[1], i2;
        for (i2 = digits.length - 1; i2 >= 0; i2--) {
          val = val.add(digits[i2].times(pow));
          pow = pow.times(base);
        }
        return isNegative ? val.negate() : val;
      }
      function stringify2(digit, alphabet) {
        alphabet = alphabet || DEFAULT_ALPHABET;
        if (digit < alphabet.length) {
          return alphabet[digit];
        }
        return "<" + digit + ">";
      }
      function toBase(n, base) {
        base = bigInt(base);
        if (base.isZero()) {
          if (n.isZero())
            return { value: [0], isNegative: false };
          throw new Error("Cannot convert nonzero numbers to base 0.");
        }
        if (base.equals(-1)) {
          if (n.isZero())
            return { value: [0], isNegative: false };
          if (n.isNegative())
            return {
              value: [].concat.apply(
                [],
                Array.apply(null, Array(-n.toJSNumber())).map(Array.prototype.valueOf, [1, 0])
              ),
              isNegative: false
            };
          var arr = Array.apply(null, Array(n.toJSNumber() - 1)).map(Array.prototype.valueOf, [0, 1]);
          arr.unshift([1]);
          return {
            value: [].concat.apply([], arr),
            isNegative: false
          };
        }
        var neg = false;
        if (n.isNegative() && base.isPositive()) {
          neg = true;
          n = n.abs();
        }
        if (base.isUnit()) {
          if (n.isZero())
            return { value: [0], isNegative: false };
          return {
            value: Array.apply(null, Array(n.toJSNumber())).map(Number.prototype.valueOf, 1),
            isNegative: neg
          };
        }
        var out = [];
        var left = n, divmod;
        while (left.isNegative() || left.compareAbs(base) >= 0) {
          divmod = left.divmod(base);
          left = divmod.quotient;
          var digit = divmod.remainder;
          if (digit.isNegative()) {
            digit = base.minus(digit).abs();
            left = left.next();
          }
          out.push(digit.toJSNumber());
        }
        out.push(left.toJSNumber());
        return { value: out.reverse(), isNegative: neg };
      }
      function toBaseString(n, base, alphabet) {
        var arr = toBase(n, base);
        return (arr.isNegative ? "-" : "") + arr.value.map(function(x) {
          return stringify2(x, alphabet);
        }).join("");
      }
      BigInteger.prototype.toArray = function(radix) {
        return toBase(this, radix);
      };
      SmallInteger.prototype.toArray = function(radix) {
        return toBase(this, radix);
      };
      NativeBigInt.prototype.toArray = function(radix) {
        return toBase(this, radix);
      };
      BigInteger.prototype.toString = function(radix, alphabet) {
        if (radix === undefined2)
          radix = 10;
        if (radix !== 10 || alphabet)
          return toBaseString(this, radix, alphabet);
        var v = this.value, l = v.length, str = String(v[--l]), zeros = "0000000", digit;
        while (--l >= 0) {
          digit = String(v[l]);
          str += zeros.slice(digit.length) + digit;
        }
        var sign = this.sign ? "-" : "";
        return sign + str;
      };
      SmallInteger.prototype.toString = function(radix, alphabet) {
        if (radix === undefined2)
          radix = 10;
        if (radix != 10 || alphabet)
          return toBaseString(this, radix, alphabet);
        return String(this.value);
      };
      NativeBigInt.prototype.toString = SmallInteger.prototype.toString;
      NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function() {
        return this.toString();
      };
      BigInteger.prototype.valueOf = function() {
        return parseInt(this.toString(), 10);
      };
      BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;
      SmallInteger.prototype.valueOf = function() {
        return this.value;
      };
      SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;
      NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function() {
        return parseInt(this.toString(), 10);
      };
      function parseStringValue(v) {
        if (isPrecise(+v)) {
          var x = +v;
          if (x === truncate(x))
            return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);
          throw new Error("Invalid integer: " + v);
        }
        var sign = v[0] === "-";
        if (sign)
          v = v.slice(1);
        var split = v.split(/e/i);
        if (split.length > 2)
          throw new Error("Invalid integer: " + split.join("e"));
        if (split.length === 2) {
          var exp = split[1];
          if (exp[0] === "+")
            exp = exp.slice(1);
          exp = +exp;
          if (exp !== truncate(exp) || !isPrecise(exp))
            throw new Error("Invalid integer: " + exp + " is not a valid exponent.");
          var text = split[0];
          var decimalPlace = text.indexOf(".");
          if (decimalPlace >= 0) {
            exp -= text.length - decimalPlace - 1;
            text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);
          }
          if (exp < 0)
            throw new Error("Cannot include negative exponent part for integers");
          text += new Array(exp + 1).join("0");
          v = text;
        }
        var isValid = /^([0-9][0-9]*)$/.test(v);
        if (!isValid)
          throw new Error("Invalid integer: " + v);
        if (supportsNativeBigInt) {
          return new NativeBigInt(BigInt(sign ? "-" + v : v));
        }
        var r = [], max2 = v.length, l = LOG_BASE, min2 = max2 - l;
        while (max2 > 0) {
          r.push(+v.slice(min2, max2));
          min2 -= l;
          if (min2 < 0)
            min2 = 0;
          max2 -= l;
        }
        trim(r);
        return new BigInteger(r, sign);
      }
      function parseNumberValue(v) {
        if (supportsNativeBigInt) {
          return new NativeBigInt(BigInt(v));
        }
        if (isPrecise(v)) {
          if (v !== truncate(v))
            throw new Error(v + " is not an integer.");
          return new SmallInteger(v);
        }
        return parseStringValue(v.toString());
      }
      function parseValue(v) {
        if (typeof v === "number") {
          return parseNumberValue(v);
        }
        if (typeof v === "string") {
          return parseStringValue(v);
        }
        if (typeof v === "bigint") {
          return new NativeBigInt(v);
        }
        return v;
      }
      for (var i = 0; i < 1e3; i++) {
        Integer[i] = parseValue(i);
        if (i > 0)
          Integer[-i] = parseValue(-i);
      }
      Integer.one = Integer[1];
      Integer.zero = Integer[0];
      Integer.minusOne = Integer[-1];
      Integer.max = max;
      Integer.min = min;
      Integer.gcd = gcd;
      Integer.lcm = lcm;
      Integer.isInstance = function(x) {
        return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt;
      };
      Integer.randBetween = randBetween;
      Integer.fromArray = function(digits, base, isNegative) {
        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);
      };
      return Integer;
    }();
    if (typeof module2 !== "undefined" && module2.hasOwnProperty("exports")) {
      module2.exports = bigInt;
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return bigInt;
      });
    }
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/utils/hashing/index.js
var require_hashing = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/utils/hashing/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHashedPercentateForObjIds = void 0;
    var md5_1 = __importDefault(require_md5());
    var big_integer_1 = __importDefault(require_BigInteger());
    var makeRepeated = function(arr, repeats) {
      return Array.from({ length: repeats }, function() {
        return arr;
      }).flat();
    };
    function h2d(s) {
      function add(x, y) {
        var c = 0, r = [];
        var x = x.split("").map(Number);
        var y = y.split("").map(Number);
        while (x.length || y.length) {
          var s2 = (x.pop() || 0) + (y.pop() || 0) + c;
          r.unshift(s2 < 10 ? s2 : s2 - 10);
          c = s2 < 10 ? 0 : 1;
        }
        if (c)
          r.unshift(c);
        return r.join("");
      }
      var dec = "0";
      s.split("").forEach(function(chr) {
        var n = parseInt(chr, 16);
        for (var t = 8; t; t >>= 1) {
          dec = add(dec, dec);
          if (n & t)
            dec = add(dec, "1");
        }
      });
      return dec;
    }
    function getHashedPercentateForObjIds(objectIds, iterations) {
      if (iterations === void 0) {
        iterations = 1;
      }
      var toHash = makeRepeated(objectIds, iterations).join(",");
      var hashedValue = (0, md5_1.default)(toHash);
      var hashedInt = (0, big_integer_1.default)(h2d(hashedValue));
      var value = hashedInt.mod(9999).toJSNumber() / 9998 * 100;
      if (value === 100) {
        return getHashedPercentateForObjIds(objectIds, iterations + 1);
      }
      return value;
    }
    exports.getHashedPercentateForObjIds = getHashedPercentateForObjIds;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/segments/constants.js
var require_constants = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/segments/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CONDITION_OPERATORS = exports.IN = exports.MODULO = exports.IS_NOT_SET = exports.IS_SET = exports.PERCENTAGE_SPLIT = exports.REGEX = exports.NOT_EQUAL = exports.NOT_CONTAINS = exports.GREATER_THAN_INCLUSIVE = exports.CONTAINS = exports.LESS_THAN_INCLUSIVE = exports.LESS_THAN = exports.GREATER_THAN = exports.EQUAL = exports.RULE_TYPES = exports.NONE_RULE = exports.ANY_RULE = exports.ALL_RULE = void 0;
    exports.ALL_RULE = "ALL";
    exports.ANY_RULE = "ANY";
    exports.NONE_RULE = "NONE";
    exports.RULE_TYPES = [exports.ALL_RULE, exports.ANY_RULE, exports.NONE_RULE];
    exports.EQUAL = "EQUAL";
    exports.GREATER_THAN = "GREATER_THAN";
    exports.LESS_THAN = "LESS_THAN";
    exports.LESS_THAN_INCLUSIVE = "LESS_THAN_INCLUSIVE";
    exports.CONTAINS = "CONTAINS";
    exports.GREATER_THAN_INCLUSIVE = "GREATER_THAN_INCLUSIVE";
    exports.NOT_CONTAINS = "NOT_CONTAINS";
    exports.NOT_EQUAL = "NOT_EQUAL";
    exports.REGEX = "REGEX";
    exports.PERCENTAGE_SPLIT = "PERCENTAGE_SPLIT";
    exports.IS_SET = "IS_SET";
    exports.IS_NOT_SET = "IS_NOT_SET";
    exports.MODULO = "MODULO";
    exports.IN = "IN";
    exports.CONDITION_OPERATORS = {
      EQUAL: exports.EQUAL,
      GREATER_THAN: exports.GREATER_THAN,
      LESS_THAN: exports.LESS_THAN,
      LESS_THAN_INCLUSIVE: exports.LESS_THAN_INCLUSIVE,
      CONTAINS: exports.CONTAINS,
      GREATER_THAN_INCLUSIVE: exports.GREATER_THAN_INCLUSIVE,
      NOT_CONTAINS: exports.NOT_CONTAINS,
      NOT_EQUAL: exports.NOT_EQUAL,
      REGEX: exports.REGEX,
      PERCENTAGE_SPLIT: exports.PERCENTAGE_SPLIT,
      IS_SET: exports.IS_SET,
      IS_NOT_SET: exports.IS_NOT_SET,
      MODULO: exports.MODULO,
      IN: exports.IN
    };
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/segments/evaluators.js
var require_evaluators = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/segments/evaluators.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.traitsMatchSegmentCondition = exports.evaluateIdentityInSegment = exports.getIdentitySegments = void 0;
    var hashing_1 = require_hashing();
    var constants_1 = require_constants();
    function getIdentitySegments(environment, identity, overrideTraits) {
      return environment.project.segments.filter(function(segment) {
        return evaluateIdentityInSegment(identity, segment, overrideTraits);
      });
    }
    exports.getIdentitySegments = getIdentitySegments;
    function evaluateIdentityInSegment(identity, segment, overrideTraits) {
      return segment.rules.length > 0 && segment.rules.filter(function(rule) {
        return traitsMatchSegmentRule(overrideTraits || identity.identityTraits, rule, segment.id, identity.djangoID || identity.compositeKey);
      }).length === segment.rules.length;
    }
    exports.evaluateIdentityInSegment = evaluateIdentityInSegment;
    function traitsMatchSegmentRule(identityTraits, rule, segmentId, identityId) {
      var matchesConditions = rule.conditions.length > 0 ? rule.matchingFunction()(rule.conditions.map(function(condition) {
        return traitsMatchSegmentCondition(identityTraits, condition, segmentId, identityId);
      })) : true;
      return matchesConditions && rule.rules.filter(function(rule2) {
        return traitsMatchSegmentRule(identityTraits, rule2, segmentId, identityId);
      }).length === rule.rules.length;
    }
    function traitsMatchSegmentCondition(identityTraits, condition, segmentId, identityId) {
      if (condition.operator == constants_1.PERCENTAGE_SPLIT) {
        var hashedPercentage = (0, hashing_1.getHashedPercentateForObjIds)([segmentId, identityId]);
        return hashedPercentage <= parseFloat(String(condition.value));
      }
      var traits = identityTraits.filter(function(t) {
        return t.traitKey === condition.property_;
      });
      var trait = traits.length > 0 ? traits[0] : void 0;
      if (condition.operator === constants_1.IS_SET) {
        return !!trait;
      } else if (condition.operator === constants_1.IS_NOT_SET) {
        return trait == void 0;
      }
      return trait ? condition.matchesTraitValue(trait.traitValue) : false;
    }
    exports.traitsMatchSegmentCondition = traitsMatchSegmentCondition;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/utils/errors.js
var require_errors = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/utils/errors.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FeatureStateNotFound = void 0;
    var FeatureStateNotFound = (
      /** @class */
      function(_super) {
        __extends(FeatureStateNotFound2, _super);
        function FeatureStateNotFound2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return FeatureStateNotFound2;
      }(Error)
    );
    exports.FeatureStateNotFound = FeatureStateNotFound;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/environments/models.js
var require_models = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/environments/models.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnvironmentModel = exports.EnvironmentAPIKeyModel = void 0;
    var EnvironmentAPIKeyModel = (
      /** @class */
      function() {
        function EnvironmentAPIKeyModel2(id, key, createdAt, name, clientApiKey, expiresAt) {
          this.active = true;
          this.id = id;
          this.key = key;
          this.createdAt = createdAt;
          this.name = name;
          this.clientApiKey = clientApiKey;
          this.expiresAt = expiresAt;
        }
        EnvironmentAPIKeyModel2.prototype.isValid = function() {
          return !!this.active && (!this.expiresAt || this.expiresAt > Date.now());
        };
        return EnvironmentAPIKeyModel2;
      }()
    );
    exports.EnvironmentAPIKeyModel = EnvironmentAPIKeyModel;
    var EnvironmentModel = (
      /** @class */
      function() {
        function EnvironmentModel2(id, apiKey, project) {
          this.featureStates = [];
          this.id = id;
          this.apiKey = apiKey;
          this.project = project;
        }
        return EnvironmentModel2;
      }()
    );
    exports.EnvironmentModel = EnvironmentModel;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/environments/integrations/models.js
var require_models2 = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/environments/integrations/models.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IntegrationModel = void 0;
    var IntegrationModel = (
      /** @class */
      function() {
        function IntegrationModel2() {
          this.api_key = void 0;
          this.base_url = void 0;
        }
        return IntegrationModel2;
      }()
    );
    exports.IntegrationModel = IntegrationModel;
  }
});

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/rng.js
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}
var getRandomValues, rnds8;
var init_rng = __esm({
  "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/rng.js"() {
    rnds8 = new Uint8Array(16);
  }
});

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/regex.js
var regex_default;
var init_regex = __esm({
  "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/stringify.js
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, i, stringify_default;
var init_stringify = __esm({
  "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  }
});

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v1.js
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  var msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  var tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  var v;
  var arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = [];
  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
var DNS, URL;
var init_v35 = __esm({
  "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = "0123456789abcdef";
  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 255;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  x[len >> 5] |= 128 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;
  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a, b, c, d];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));
  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 255) << i % 32;
  }
  return output;
}
function safeAdd(x, y) {
  var lsw = (x & 65535) + (y & 65535);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var md5_default;
var init_md5 = __esm({
  "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/md5.js"() {
    md5_default = md5;
  }
});

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  var K = [1518500249, 1859775393, 2400959708, 3395469782];
  var H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);
  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);
    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }
    M[_i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);
    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }
    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }
    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];
    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default;
var init_sha1 = __esm({
  "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/sha1.js"() {
    sha1_default = sha1;
  }
});

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/nil.js
var nil_default;
var init_nil = __esm({
  "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/version.js"() {
    init_validate();
    version_default = version;
  }
});

// node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/index.js
var esm_browser_exports = {};
__export(esm_browser_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_browser = __esm({
  "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-browser/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/features/models.js
var require_models3 = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/features/models.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FeatureSegment = exports.FeatureStateModel = exports.MultivariateFeatureStateValueModel = exports.MultivariateFeatureOptionModel = exports.FeatureModel = void 0;
    var uuid_1 = (init_esm_browser(), __toCommonJS(esm_browser_exports));
    var hashing_1 = require_hashing();
    var FeatureModel = (
      /** @class */
      function() {
        function FeatureModel2(id, name, type) {
          this.id = id;
          this.name = name;
          this.type = type;
        }
        FeatureModel2.prototype.eq = function(other) {
          return !!other && this.id === other.id;
        };
        return FeatureModel2;
      }()
    );
    exports.FeatureModel = FeatureModel;
    var MultivariateFeatureOptionModel = (
      /** @class */
      function() {
        function MultivariateFeatureOptionModel2(value, id) {
          this.value = value;
          this.id = id;
        }
        return MultivariateFeatureOptionModel2;
      }()
    );
    exports.MultivariateFeatureOptionModel = MultivariateFeatureOptionModel;
    var MultivariateFeatureStateValueModel = (
      /** @class */
      function() {
        function MultivariateFeatureStateValueModel2(multivariate_feature_option, percentage_allocation, id, mvFsValueUuid) {
          this.mvFsValueUuid = (0, uuid_1.v4)();
          this.id = id;
          this.percentageAllocation = percentage_allocation;
          this.multivariateFeatureOption = multivariate_feature_option;
          this.mvFsValueUuid = mvFsValueUuid || this.mvFsValueUuid;
        }
        return MultivariateFeatureStateValueModel2;
      }()
    );
    exports.MultivariateFeatureStateValueModel = MultivariateFeatureStateValueModel;
    var FeatureStateModel = (
      /** @class */
      function() {
        function FeatureStateModel2(feature, enabled, djangoID, value, featurestateUuid) {
          if (featurestateUuid === void 0) {
            featurestateUuid = (0, uuid_1.v4)();
          }
          this.featurestateUUID = (0, uuid_1.v4)();
          this.multivariateFeatureStateValues = [];
          this.feature = feature;
          this.enabled = enabled;
          this.djangoID = djangoID;
          this.value = value;
          this.featurestateUUID = featurestateUuid;
        }
        FeatureStateModel2.prototype.setValue = function(value) {
          this.value = value;
        };
        FeatureStateModel2.prototype.getValue = function(identityId) {
          if (!!identityId && this.multivariateFeatureStateValues.length > 0) {
            return this.getMultivariateValue(identityId);
          }
          return this.value;
        };
        FeatureStateModel2.prototype.isHigherSegmentPriority = function(other) {
          if (!other.featureSegment || !this.featureSegment) {
            return !!this.featureSegment && !other.featureSegment;
          }
          return this.featureSegment.priority < other.featureSegment.priority;
        };
        FeatureStateModel2.prototype.getMultivariateValue = function(identityID) {
          var e_1, _a;
          var percentageValue;
          var startPercentage = 0;
          var sortedF = this.multivariateFeatureStateValues.sort(function(a, b) {
            return a.id - b.id;
          });
          try {
            for (var sortedF_1 = __values(sortedF), sortedF_1_1 = sortedF_1.next(); !sortedF_1_1.done; sortedF_1_1 = sortedF_1.next()) {
              var myValue = sortedF_1_1.value;
              switch (myValue.percentageAllocation) {
                case 0:
                  continue;
                case 100:
                  return myValue.multivariateFeatureOption.value;
                default:
                  if (percentageValue === void 0) {
                    percentageValue = (0, hashing_1.getHashedPercentateForObjIds)([
                      this.djangoID || this.featurestateUUID,
                      identityID
                    ]);
                  }
              }
              var limit = myValue.percentageAllocation + startPercentage;
              if (startPercentage <= percentageValue && percentageValue < limit) {
                return myValue.multivariateFeatureOption.value;
              }
              startPercentage = limit;
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (sortedF_1_1 && !sortedF_1_1.done && (_a = sortedF_1.return))
                _a.call(sortedF_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return this.value;
        };
        return FeatureStateModel2;
      }()
    );
    exports.FeatureStateModel = FeatureStateModel;
    var FeatureSegment = (
      /** @class */
      function() {
        function FeatureSegment2(priority) {
          this.priority = priority;
        }
        return FeatureSegment2;
      }()
    );
    exports.FeatureSegment = FeatureSegment;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/utils/collections.js
var require_collections = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/utils/collections.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IdentityFeaturesList = void 0;
    var IdentityFeaturesList = (
      /** @class */
      function(_super) {
        __extends(IdentityFeaturesList2, _super);
        function IdentityFeaturesList2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return IdentityFeaturesList2;
      }(Array)
    );
    exports.IdentityFeaturesList = IdentityFeaturesList;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/identities/models.js
var require_models4 = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/identities/models.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IdentityModel = void 0;
    var collections_1 = require_collections();
    var uuidv4 = (init_esm_browser(), __toCommonJS(esm_browser_exports)).v4;
    var IdentityModel = (
      /** @class */
      function() {
        function IdentityModel2(created_date, identityTraits, identityFeatures, environmentApiKey, identifier, identityUuid, djangoID) {
          this.identityUuid = identityUuid || uuidv4();
          this.createdDate = Date.parse(created_date) || Date.now();
          this.identityTraits = identityTraits;
          this.identityFeatures = new (collections_1.IdentityFeaturesList.bind.apply(collections_1.IdentityFeaturesList, __spreadArray([void 0], __read(identityFeatures), false)))();
          this.environmentApiKey = environmentApiKey;
          this.identifier = identifier;
          this.djangoID = djangoID;
        }
        Object.defineProperty(IdentityModel2.prototype, "compositeKey", {
          get: function() {
            return IdentityModel2.generateCompositeKey(this.environmentApiKey, this.identifier);
          },
          enumerable: false,
          configurable: true
        });
        IdentityModel2.generateCompositeKey = function(env_key, identifier) {
          return "".concat(env_key, "_").concat(identifier);
        };
        IdentityModel2.prototype.updateTraits = function(traits) {
          var e_1, _a, e_2, _b, e_3, _c;
          var existingTraits = /* @__PURE__ */ new Map();
          try {
            for (var _d = __values(this.identityTraits), _e = _d.next(); !_e.done; _e = _d.next()) {
              var trait = _e.value;
              existingTraits.set(trait.traitKey, trait);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_e && !_e.done && (_a = _d.return))
                _a.call(_d);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          try {
            for (var traits_1 = __values(traits), traits_1_1 = traits_1.next(); !traits_1_1.done; traits_1_1 = traits_1.next()) {
              var trait = traits_1_1.value;
              if (!!trait.traitValue) {
                existingTraits.set(trait.traitKey, trait);
              } else {
                existingTraits.delete(trait.traitKey);
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (traits_1_1 && !traits_1_1.done && (_b = traits_1.return))
                _b.call(traits_1);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
          this.identityTraits = [];
          try {
            for (var _f = __values(existingTraits.entries()), _g = _f.next(); !_g.done; _g = _f.next()) {
              var _h = __read(_g.value, 2), k = _h[0], v = _h[1];
              this.identityTraits.push(v);
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (_g && !_g.done && (_c = _f.return))
                _c.call(_f);
            } finally {
              if (e_3)
                throw e_3.error;
            }
          }
        };
        return IdentityModel2;
      }()
    );
    exports.IdentityModel = IdentityModel;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/identities/traits/models.js
var require_models5 = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/identities/traits/models.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TraitModel = void 0;
    var TraitModel = (
      /** @class */
      function() {
        function TraitModel2(key, value) {
          this.traitKey = key;
          this.traitValue = value;
        }
        return TraitModel2;
      }()
    );
    exports.TraitModel = TraitModel;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/constants.js
var require_constants2 = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/constants.js"(exports, module2) {
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var RELEASE_TYPES = [
      "major",
      "premajor",
      "minor",
      "preminor",
      "patch",
      "prepatch",
      "prerelease"
    ];
    module2.exports = {
      MAX_LENGTH,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_SAFE_INTEGER,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2
    };
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/debug.js
var require_debug = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/debug.js"(exports, module2) {
    var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module2.exports = debug;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/re.js
var require_re = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/re.js"(exports, module2) {
    var {
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_LENGTH
    } = require_constants2();
    var debug = require_debug();
    exports = module2.exports = {};
    var re = exports.re = [];
    var safeRe = exports.safeRe = [];
    var src = exports.src = [];
    var t = exports.t = {};
    var R = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    var makeSafeRegex = (value) => {
      for (const [token, max] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
      }
      return value;
    };
    var createToken = (name, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index = R++;
      debug(name, index, value);
      t[name] = index;
      src[index] = value;
      re[index] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
    createToken("FULL", `^${src[t.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
    createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COERCE", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t.COERCE], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
    exports.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/parse-options.js"(exports, module2) {
    var looseOption = Object.freeze({ loose: true });
    var emptyOpts = Object.freeze({});
    var parseOptions = (options) => {
      if (!options) {
        return emptyOpts;
      }
      if (typeof options !== "object") {
        return looseOption;
      }
      return options;
    };
    module2.exports = parseOptions;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/identifiers.js"(exports, module2) {
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a, b) => {
      const anum = numeric.test(a);
      const bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    };
    var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
    module2.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js
var require_semver = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js"(exports, module2) {
    var debug = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants2();
    var { safeRe: re, t } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class {
      constructor(version2, options) {
        options = parseOptions(options);
        if (version2 instanceof SemVer) {
          if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease) {
            return version2;
          } else {
            version2 = version2.version;
          }
        } else if (typeof version2 !== "string") {
          throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version2}".`);
        }
        if (version2.length > MAX_LENGTH) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        }
        debug("SemVer", version2, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m = version2.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) {
          throw new TypeError(`Invalid Version: ${version2}`);
        }
        this.raw = version2;
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m[4].split(".").map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i = 0;
        do {
          const a = this.prerelease[i];
          const b = other.prerelease[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      compareBuild(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        let i = 0;
        do {
          const a = this.build[i];
          const b = other.build[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc(release, identifier, identifierBase) {
        switch (release) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier, identifierBase);
            this.inc("pre", identifier, identifierBase);
            break;
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier, identifierBase);
            }
            this.inc("pre", identifier, identifierBase);
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          case "pre": {
            const base = Number(identifierBase) ? 1 : 0;
            if (!identifier && identifierBase === false) {
              throw new Error("invalid increment argument: identifier is empty");
            }
            if (this.prerelease.length === 0) {
              this.prerelease = [base];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === "number") {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                if (identifier === this.prerelease.join(".") && identifierBase === false) {
                  throw new Error("invalid increment argument: identifier already exists");
                }
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) {
          this.raw += `+${this.build.join(".")}`;
        }
        return this;
      }
    };
    module2.exports = SemVer;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/parse.js
var require_parse = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/parse.js"(exports, module2) {
    var SemVer = require_semver();
    var parse2 = (version2, options, throwErrors = false) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      try {
        return new SemVer(version2, options);
      } catch (er) {
        if (!throwErrors) {
          return null;
        }
        throw er;
      }
    };
    module2.exports = parse2;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/valid.js"(exports, module2) {
    var parse2 = require_parse();
    var valid = (version2, options) => {
      const v = parse2(version2, options);
      return v ? v.version : null;
    };
    module2.exports = valid;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/clean.js"(exports, module2) {
    var parse2 = require_parse();
    var clean = (version2, options) => {
      const s = parse2(version2.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    };
    module2.exports = clean;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/inc.js"(exports, module2) {
    var SemVer = require_semver();
    var inc = (version2, release, options, identifier, identifierBase) => {
      if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = void 0;
      }
      try {
        return new SemVer(
          version2 instanceof SemVer ? version2.version : version2,
          options
        ).inc(release, identifier, identifierBase).version;
      } catch (er) {
        return null;
      }
    };
    module2.exports = inc;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/diff.js"(exports, module2) {
    var parse2 = require_parse();
    var diff = (version1, version2) => {
      const v12 = parse2(version1, null, true);
      const v2 = parse2(version2, null, true);
      const comparison = v12.compare(v2);
      if (comparison === 0) {
        return null;
      }
      const v1Higher = comparison > 0;
      const highVersion = v1Higher ? v12 : v2;
      const lowVersion = v1Higher ? v2 : v12;
      const highHasPre = !!highVersion.prerelease.length;
      const lowHasPre = !!lowVersion.prerelease.length;
      if (lowHasPre && !highHasPre) {
        if (!lowVersion.patch && !lowVersion.minor) {
          return "major";
        }
        if (highVersion.patch) {
          return "patch";
        }
        if (highVersion.minor) {
          return "minor";
        }
        return "major";
      }
      const prefix = highHasPre ? "pre" : "";
      if (v12.major !== v2.major) {
        return prefix + "major";
      }
      if (v12.minor !== v2.minor) {
        return prefix + "minor";
      }
      if (v12.patch !== v2.patch) {
        return prefix + "patch";
      }
      return "prerelease";
    };
    module2.exports = diff;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/major.js
var require_major = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/major.js"(exports, module2) {
    var SemVer = require_semver();
    var major = (a, loose) => new SemVer(a, loose).major;
    module2.exports = major;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/minor.js"(exports, module2) {
    var SemVer = require_semver();
    var minor = (a, loose) => new SemVer(a, loose).minor;
    module2.exports = minor;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/patch.js"(exports, module2) {
    var SemVer = require_semver();
    var patch = (a, loose) => new SemVer(a, loose).patch;
    module2.exports = patch;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/prerelease.js"(exports, module2) {
    var parse2 = require_parse();
    var prerelease = (version2, options) => {
      const parsed = parse2(version2, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module2.exports = prerelease;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js"(exports, module2) {
    var SemVer = require_semver();
    var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
    module2.exports = compare;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/rcompare.js"(exports, module2) {
    var compare = require_compare();
    var rcompare = (a, b, loose) => compare(b, a, loose);
    module2.exports = rcompare;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare-loose.js"(exports, module2) {
    var compare = require_compare();
    var compareLoose = (a, b) => compare(a, b, true);
    module2.exports = compareLoose;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare-build.js"(exports, module2) {
    var SemVer = require_semver();
    var compareBuild = (a, b, loose) => {
      const versionA = new SemVer(a, loose);
      const versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module2.exports = compareBuild;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/sort.js"(exports, module2) {
    var compareBuild = require_compare_build();
    var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
    module2.exports = sort;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/rsort.js"(exports, module2) {
    var compareBuild = require_compare_build();
    var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
    module2.exports = rsort;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gt.js"(exports, module2) {
    var compare = require_compare();
    var gt = (a, b, loose) => compare(a, b, loose) > 0;
    module2.exports = gt;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lt.js"(exports, module2) {
    var compare = require_compare();
    var lt = (a, b, loose) => compare(a, b, loose) < 0;
    module2.exports = lt;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/eq.js"(exports, module2) {
    var compare = require_compare();
    var eq = (a, b, loose) => compare(a, b, loose) === 0;
    module2.exports = eq;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/neq.js"(exports, module2) {
    var compare = require_compare();
    var neq = (a, b, loose) => compare(a, b, loose) !== 0;
    module2.exports = neq;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gte.js"(exports, module2) {
    var compare = require_compare();
    var gte = (a, b, loose) => compare(a, b, loose) >= 0;
    module2.exports = gte;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lte.js"(exports, module2) {
    var compare = require_compare();
    var lte = (a, b, loose) => compare(a, b, loose) <= 0;
    module2.exports = lte;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/cmp.js"(exports, module2) {
    var eq = require_eq();
    var neq = require_neq();
    var gt = require_gt();
    var gte = require_gte();
    var lt = require_lt();
    var lte = require_lte();
    var cmp = (a, op, b, loose) => {
      switch (op) {
        case "===":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a === b;
        case "!==":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module2.exports = cmp;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/coerce.js"(exports, module2) {
    var SemVer = require_semver();
    var parse2 = require_parse();
    var { safeRe: re, t } = require_re();
    var coerce = (version2, options) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      if (typeof version2 === "number") {
        version2 = String(version2);
      }
      if (typeof version2 !== "string") {
        return null;
      }
      options = options || {};
      let match = null;
      if (!options.rtl) {
        match = version2.match(re[t.COERCE]);
      } else {
        let next;
        while ((next = re[t.COERCERTL].exec(version2)) && (!match || match.index + match[0].length !== version2.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        re[t.COERCERTL].lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      return parse2(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
    };
    module2.exports = coerce;
  }
});

// node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js
var require_iterator = __commonJS({
  "node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js"(exports, module2) {
    "use strict";
    module2.exports = function(Yallist) {
      Yallist.prototype[Symbol.iterator] = function* () {
        for (let walker = this.head; walker; walker = walker.next) {
          yield walker.value;
        }
      };
    };
  }
});

// node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js
var require_yallist = __commonJS({
  "node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js"(exports, module2) {
    "use strict";
    module2.exports = Yallist;
    Yallist.Node = Node;
    Yallist.create = Yallist;
    function Yallist(list) {
      var self2 = this;
      if (!(self2 instanceof Yallist)) {
        self2 = new Yallist();
      }
      self2.tail = null;
      self2.head = null;
      self2.length = 0;
      if (list && typeof list.forEach === "function") {
        list.forEach(function(item) {
          self2.push(item);
        });
      } else if (arguments.length > 0) {
        for (var i = 0, l = arguments.length; i < l; i++) {
          self2.push(arguments[i]);
        }
      }
      return self2;
    }
    Yallist.prototype.removeNode = function(node) {
      if (node.list !== this) {
        throw new Error("removing node which does not belong to this list");
      }
      var next = node.next;
      var prev = node.prev;
      if (next) {
        next.prev = prev;
      }
      if (prev) {
        prev.next = next;
      }
      if (node === this.head) {
        this.head = next;
      }
      if (node === this.tail) {
        this.tail = prev;
      }
      node.list.length--;
      node.next = null;
      node.prev = null;
      node.list = null;
      return next;
    };
    Yallist.prototype.unshiftNode = function(node) {
      if (node === this.head) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var head = this.head;
      node.list = this;
      node.next = head;
      if (head) {
        head.prev = node;
      }
      this.head = node;
      if (!this.tail) {
        this.tail = node;
      }
      this.length++;
    };
    Yallist.prototype.pushNode = function(node) {
      if (node === this.tail) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var tail = this.tail;
      node.list = this;
      node.prev = tail;
      if (tail) {
        tail.next = node;
      }
      this.tail = node;
      if (!this.head) {
        this.head = node;
      }
      this.length++;
    };
    Yallist.prototype.push = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        push(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.unshift = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        unshift(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.pop = function() {
      if (!this.tail) {
        return void 0;
      }
      var res = this.tail.value;
      this.tail = this.tail.prev;
      if (this.tail) {
        this.tail.next = null;
      } else {
        this.head = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.shift = function() {
      if (!this.head) {
        return void 0;
      }
      var res = this.head.value;
      this.head = this.head.next;
      if (this.head) {
        this.head.prev = null;
      } else {
        this.tail = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.forEach = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.head, i = 0; walker !== null; i++) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
      }
    };
    Yallist.prototype.forEachReverse = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
      }
    };
    Yallist.prototype.get = function(n) {
      for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
        walker = walker.next;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.getReverse = function(n) {
      for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
        walker = walker.prev;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.map = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.head; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
      }
      return res;
    };
    Yallist.prototype.mapReverse = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.tail; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
      }
      return res;
    };
    Yallist.prototype.reduce = function(fn, initial) {
      var acc;
      var walker = this.head;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = 0; walker !== null; i++) {
        acc = fn(acc, walker.value, i);
        walker = walker.next;
      }
      return acc;
    };
    Yallist.prototype.reduceReverse = function(fn, initial) {
      var acc;
      var walker = this.tail;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = this.length - 1; walker !== null; i--) {
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
      }
      return acc;
    };
    Yallist.prototype.toArray = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.head; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.next;
      }
      return arr;
    };
    Yallist.prototype.toArrayReverse = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.tail; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.prev;
      }
      return arr;
    };
    Yallist.prototype.slice = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
        walker = walker.next;
      }
      for (; walker !== null && i < to; i++, walker = walker.next) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.sliceReverse = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
        walker = walker.prev;
      }
      for (; walker !== null && i > from; i--, walker = walker.prev) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
      if (start > this.length) {
        start = this.length - 1;
      }
      if (start < 0) {
        start = this.length + start;
      }
      for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
        walker = walker.next;
      }
      var ret = [];
      for (var i = 0; walker && i < deleteCount; i++) {
        ret.push(walker.value);
        walker = this.removeNode(walker);
      }
      if (walker === null) {
        walker = this.tail;
      }
      if (walker !== this.head && walker !== this.tail) {
        walker = walker.prev;
      }
      for (var i = 0; i < nodes.length; i++) {
        walker = insert(this, walker, nodes[i]);
      }
      return ret;
    };
    Yallist.prototype.reverse = function() {
      var head = this.head;
      var tail = this.tail;
      for (var walker = head; walker !== null; walker = walker.prev) {
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
      }
      this.head = tail;
      this.tail = head;
      return this;
    };
    function insert(self2, node, value) {
      var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
      if (inserted.next === null) {
        self2.tail = inserted;
      }
      if (inserted.prev === null) {
        self2.head = inserted;
      }
      self2.length++;
      return inserted;
    }
    function push(self2, item) {
      self2.tail = new Node(item, self2.tail, null, self2);
      if (!self2.head) {
        self2.head = self2.tail;
      }
      self2.length++;
    }
    function unshift(self2, item) {
      self2.head = new Node(item, null, self2.head, self2);
      if (!self2.tail) {
        self2.tail = self2.head;
      }
      self2.length++;
    }
    function Node(value, prev, next, list) {
      if (!(this instanceof Node)) {
        return new Node(value, prev, next, list);
      }
      this.list = list;
      this.value = value;
      if (prev) {
        prev.next = this;
        this.prev = prev;
      } else {
        this.prev = null;
      }
      if (next) {
        next.prev = this;
        this.next = next;
      } else {
        this.next = null;
      }
    }
    try {
      require_iterator()(Yallist);
    } catch (er) {
    }
  }
});

// node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js
var require_lru_cache = __commonJS({
  "node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js"(exports, module2) {
    "use strict";
    var Yallist = require_yallist();
    var MAX = Symbol("max");
    var LENGTH = Symbol("length");
    var LENGTH_CALCULATOR = Symbol("lengthCalculator");
    var ALLOW_STALE = Symbol("allowStale");
    var MAX_AGE = Symbol("maxAge");
    var DISPOSE = Symbol("dispose");
    var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
    var LRU_LIST = Symbol("lruList");
    var CACHE = Symbol("cache");
    var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
    var naiveLength = () => 1;
    var LRUCache = class {
      constructor(options) {
        if (typeof options === "number")
          options = { max: options };
        if (!options)
          options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0))
          throw new TypeError("max must be a non-negative number");
        const max = this[MAX] = options.max || Infinity;
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
      }
      // resize the cache when the max changes.
      set max(mL) {
        if (typeof mL !== "number" || mL < 0)
          throw new TypeError("max must be a non-negative number");
        this[MAX] = mL || Infinity;
        trim(this);
      }
      get max() {
        return this[MAX];
      }
      set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
      }
      get allowStale() {
        return this[ALLOW_STALE];
      }
      set maxAge(mA) {
        if (typeof mA !== "number")
          throw new TypeError("maxAge must be a non-negative number");
        this[MAX_AGE] = mA;
        trim(this);
      }
      get maxAge() {
        return this[MAX_AGE];
      }
      // resize the cache when the lengthCalculator changes.
      set lengthCalculator(lC) {
        if (typeof lC !== "function")
          lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
          this[LENGTH_CALCULATOR] = lC;
          this[LENGTH] = 0;
          this[LRU_LIST].forEach((hit) => {
            hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
            this[LENGTH] += hit.length;
          });
        }
        trim(this);
      }
      get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
      }
      get length() {
        return this[LENGTH];
      }
      get itemCount() {
        return this[LRU_LIST].length;
      }
      rforEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].tail; walker !== null; ) {
          const prev = walker.prev;
          forEachStep(this, fn, walker, thisp);
          walker = prev;
        }
      }
      forEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].head; walker !== null; ) {
          const next = walker.next;
          forEachStep(this, fn, walker, thisp);
          walker = next;
        }
      }
      keys() {
        return this[LRU_LIST].toArray().map((k) => k.key);
      }
      values() {
        return this[LRU_LIST].toArray().map((k) => k.value);
      }
      reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
          this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
        }
        this[CACHE] = /* @__PURE__ */ new Map();
        this[LRU_LIST] = new Yallist();
        this[LENGTH] = 0;
      }
      dump() {
        return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        }).toArray().filter((h) => h);
      }
      dumpLru() {
        return this[LRU_LIST];
      }
      set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
          if (len > this[MAX]) {
            del(this, this[CACHE].get(key));
            return false;
          }
          const node = this[CACHE].get(key);
          const item = node.value;
          if (this[DISPOSE]) {
            if (!this[NO_DISPOSE_ON_SET])
              this[DISPOSE](key, item.value);
          }
          item.now = now;
          item.maxAge = maxAge;
          item.value = value;
          this[LENGTH] += len - item.length;
          item.length = len;
          this.get(key);
          trim(this);
          return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        if (hit.length > this[MAX]) {
          if (this[DISPOSE])
            this[DISPOSE](key, value);
          return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim(this);
        return true;
      }
      has(key) {
        if (!this[CACHE].has(key))
          return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
      }
      get(key) {
        return get(this, key, true);
      }
      peek(key) {
        return get(this, key, false);
      }
      pop() {
        const node = this[LRU_LIST].tail;
        if (!node)
          return null;
        del(this, node);
        return node.value;
      }
      del(key) {
        del(this, this[CACHE].get(key));
      }
      load(arr) {
        this.reset();
        const now = Date.now();
        for (let l = arr.length - 1; l >= 0; l--) {
          const hit = arr[l];
          const expiresAt = hit.e || 0;
          if (expiresAt === 0)
            this.set(hit.k, hit.v);
          else {
            const maxAge = expiresAt - now;
            if (maxAge > 0) {
              this.set(hit.k, hit.v, maxAge);
            }
          }
        }
      }
      prune() {
        this[CACHE].forEach((value, key) => get(this, key, false));
      }
    };
    var get = (self2, key, doUse) => {
      const node = self2[CACHE].get(key);
      if (node) {
        const hit = node.value;
        if (isStale(self2, hit)) {
          del(self2, node);
          if (!self2[ALLOW_STALE])
            return void 0;
        } else {
          if (doUse) {
            if (self2[UPDATE_AGE_ON_GET])
              node.value.now = Date.now();
            self2[LRU_LIST].unshiftNode(node);
          }
        }
        return hit.value;
      }
    };
    var isStale = (self2, hit) => {
      if (!hit || !hit.maxAge && !self2[MAX_AGE])
        return false;
      const diff = Date.now() - hit.now;
      return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
    };
    var trim = (self2) => {
      if (self2[LENGTH] > self2[MAX]) {
        for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
          const prev = walker.prev;
          del(self2, walker);
          walker = prev;
        }
      }
    };
    var del = (self2, node) => {
      if (node) {
        const hit = node.value;
        if (self2[DISPOSE])
          self2[DISPOSE](hit.key, hit.value);
        self2[LENGTH] -= hit.length;
        self2[CACHE].delete(hit.key);
        self2[LRU_LIST].removeNode(node);
      }
    };
    var Entry = class {
      constructor(key, value, length, now, maxAge) {
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      }
    };
    var forEachStep = (self2, fn, node, thisp) => {
      let hit = node.value;
      if (isStale(self2, hit)) {
        del(self2, node);
        if (!self2[ALLOW_STALE])
          hit = void 0;
      }
      if (hit)
        fn.call(thisp, hit.value, hit.key, self2);
    };
    module2.exports = LRUCache;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js
var require_range = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js"(exports, module2) {
    var Range = class {
      constructor(range, options) {
        options = parseOptions(options);
        if (range instanceof Range) {
          if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
            return range;
          } else {
            return new Range(range.raw, options);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.format();
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range.trim().split(/\s+/).join(" ");
        this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.format();
      }
      format() {
        this.range = this.set.map((comps) => comps.join(" ").trim()).join("||").trim();
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        debug("tilde trim", range);
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        debug("caret trim", range);
        let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re[t.COMPARATORLOOSE]);
          });
        }
        debug("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options) {
        if (!(range instanceof Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version2) {
        if (!version2) {
          return false;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version2, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module2.exports = Range;
    var LRU = require_lru_cache();
    var cache = new LRU({ max: 1e3 });
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug();
    var SemVer = require_semver();
    var {
      safeRe: re,
      t,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants2();
    var isNullSet = (c) => c.value === "<0.0.0-0";
    var isAny = (c) => c.value === "";
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    };
    var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
    var replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
    };
    var replaceTilde = (comp, options) => {
      const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
    };
    var replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re[t.STAR], "");
    };
    var replaceGTE0 = (comp, options) => {
      debug("replaceGTE0", comp, options);
      return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    var testSet = (set, version2, options) => {
      for (let i = 0; i < set.length; i++) {
        if (!set[i].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (let i = 0; i < set.length; i++) {
          debug(set[i].semver);
          if (set[i].semver === Comparator.ANY) {
            continue;
          }
          if (set[i].semver.prerelease.length > 0) {
            const allowed = set[i].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/comparator.js"(exports, module2) {
    var ANY = Symbol("SemVer ANY");
    var Comparator = class {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version2) {
        debug("Comparator.test", version2, this.options.loose);
        if (this.semver === ANY || version2 === ANY) {
          return true;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version2, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    };
    module2.exports = Comparator;
    var parseOptions = require_parse_options();
    var { safeRe: re, t } = require_re();
    var cmp = require_cmp();
    var debug = require_debug();
    var SemVer = require_semver();
    var Range = require_range();
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/satisfies.js"(exports, module2) {
    var Range = require_range();
    var satisfies = (version2, range, options) => {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version2);
    };
    module2.exports = satisfies;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/to-comparators.js"(exports, module2) {
    var Range = require_range();
    var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
    module2.exports = toComparators;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/max-satisfying.js"(exports, module2) {
    var SemVer = require_semver();
    var Range = require_range();
    var maxSatisfying = (versions, range, options) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    };
    module2.exports = maxSatisfying;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/min-satisfying.js"(exports, module2) {
    var SemVer = require_semver();
    var Range = require_range();
    var minSatisfying = (versions, range, options) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    };
    module2.exports = minSatisfying;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/min-version.js"(exports, module2) {
    var SemVer = require_semver();
    var Range = require_range();
    var gt = require_gt();
    var minVersion = (range, loose) => {
      range = new Range(range, loose);
      let minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!setMin || gt(compver, setMin)) {
                setMin = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt(minver, setMin))) {
          minver = setMin;
        }
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    };
    module2.exports = minVersion;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/valid.js"(exports, module2) {
    var Range = require_range();
    var validRange = (range, options) => {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    };
    module2.exports = validRange;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/outside.js"(exports, module2) {
    var SemVer = require_semver();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range = require_range();
    var satisfies = require_satisfies();
    var gt = require_gt();
    var lt = require_lt();
    var lte = require_lte();
    var gte = require_gte();
    var outside = (version2, range, hilo, options) => {
      version2 = new SemVer(version2, options);
      range = new Range(range, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version2, range, options)) {
        return false;
      }
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
          return false;
        }
      }
      return true;
    };
    module2.exports = outside;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/gtr.js"(exports, module2) {
    var outside = require_outside();
    var gtr = (version2, range, options) => outside(version2, range, ">", options);
    module2.exports = gtr;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/ltr.js"(exports, module2) {
    var outside = require_outside();
    var ltr = (version2, range, options) => outside(version2, range, "<", options);
    module2.exports = ltr;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/intersects.js"(exports, module2) {
    var Range = require_range();
    var intersects = (r1, r2, options) => {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2, options);
    };
    module2.exports = intersects;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/simplify.js"(exports, module2) {
    var satisfies = require_satisfies();
    var compare = require_compare();
    module2.exports = (versions, range, options) => {
      const set = [];
      let first = null;
      let prev = null;
      const v = versions.sort((a, b) => compare(a, b, options));
      for (const version2 of v) {
        const included = satisfies(version2, range, options);
        if (included) {
          prev = version2;
          if (!first) {
            first = version2;
          }
        } else {
          if (prev) {
            set.push([first, prev]);
          }
          prev = null;
          first = null;
        }
      }
      if (first) {
        set.push([first, null]);
      }
      const ranges = [];
      for (const [min, max] of set) {
        if (min === max) {
          ranges.push(min);
        } else if (!max && min === v[0]) {
          ranges.push("*");
        } else if (!max) {
          ranges.push(`>=${min}`);
        } else if (min === v[0]) {
          ranges.push(`<=${max}`);
        } else {
          ranges.push(`${min} - ${max}`);
        }
      }
      const simplified = ranges.join(" || ");
      const original = typeof range.raw === "string" ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range;
    };
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/subset.js"(exports, module2) {
    var Range = require_range();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies = require_satisfies();
    var compare = require_compare();
    var subset = (sub, dom, options = {}) => {
      if (sub === dom) {
        return true;
      }
      sub = new Range(sub, options);
      dom = new Range(dom, options);
      let sawNonNull = false;
      OUTER:
        for (const simpleSub of sub.set) {
          for (const simpleDom of dom.set) {
            const isSub = simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub) {
              continue OUTER;
            }
          }
          if (sawNonNull) {
            return false;
          }
        }
      return true;
    };
    var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
    var minimumVersion = [new Comparator(">=0.0.0")];
    var simpleSubset = (sub, dom, options) => {
      if (sub === dom) {
        return true;
      }
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
          return true;
        } else if (options.includePrerelease) {
          sub = minimumVersionWithPreRelease;
        } else {
          sub = minimumVersion;
        }
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) {
          return true;
        } else {
          dom = minimumVersion;
        }
      }
      const eqSet = /* @__PURE__ */ new Set();
      let gt, lt;
      for (const c of sub) {
        if (c.operator === ">" || c.operator === ">=") {
          gt = higherGT(gt, c, options);
        } else if (c.operator === "<" || c.operator === "<=") {
          lt = lowerLT(lt, c, options);
        } else {
          eqSet.add(c.semver);
        }
      }
      if (eqSet.size > 1) {
        return null;
      }
      let gtltComp;
      if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0) {
          return null;
        } else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) {
          return null;
        }
      }
      for (const eq of eqSet) {
        if (gt && !satisfies(eq, String(gt), options)) {
          return null;
        }
        if (lt && !satisfies(eq, String(lt), options)) {
          return null;
        }
        for (const c of dom) {
          if (!satisfies(eq, String(c), options)) {
            return false;
          }
        }
        return true;
      }
      let higher, lower;
      let hasDomLT, hasDomGT;
      let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
      let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }
      for (const c of dom) {
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt) {
          if (needDomGTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c.operator === ">" || c.operator === ">=") {
            higher = higherGT(gt, c, options);
            if (higher === c && higher !== gt) {
              return false;
            }
          } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options)) {
            return false;
          }
        }
        if (lt) {
          if (needDomLTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c.operator === "<" || c.operator === "<=") {
            lower = lowerLT(lt, c, options);
            if (lower === c && lower !== lt) {
              return false;
            }
          } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options)) {
            return false;
          }
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0) {
          return false;
        }
      }
      if (gt && hasDomLT && !lt && gtltComp !== 0) {
        return false;
      }
      if (lt && hasDomGT && !gt && gtltComp !== 0) {
        return false;
      }
      if (needDomGTPre || needDomLTPre) {
        return false;
      }
      return true;
    };
    var higherGT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
    };
    var lowerLT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
    };
    module2.exports = subset;
  }
});

// node_modules/.pnpm/semver@7.5.4/node_modules/semver/index.js
var require_semver2 = __commonJS({
  "node_modules/.pnpm/semver@7.5.4/node_modules/semver/index.js"(exports, module2) {
    var internalRe = require_re();
    var constants = require_constants2();
    var SemVer = require_semver();
    var identifiers = require_identifiers();
    var parse2 = require_parse();
    var valid = require_valid();
    var clean = require_clean();
    var inc = require_inc();
    var diff = require_diff();
    var major = require_major();
    var minor = require_minor();
    var patch = require_patch();
    var prerelease = require_prerelease();
    var compare = require_compare();
    var rcompare = require_rcompare();
    var compareLoose = require_compare_loose();
    var compareBuild = require_compare_build();
    var sort = require_sort();
    var rsort = require_rsort();
    var gt = require_gt();
    var lt = require_lt();
    var eq = require_eq();
    var neq = require_neq();
    var gte = require_gte();
    var lte = require_lte();
    var cmp = require_cmp();
    var coerce = require_coerce();
    var Comparator = require_comparator();
    var Range = require_range();
    var satisfies = require_satisfies();
    var toComparators = require_to_comparators();
    var maxSatisfying = require_max_satisfying();
    var minSatisfying = require_min_satisfying();
    var minVersion = require_min_version();
    var validRange = require_valid2();
    var outside = require_outside();
    var gtr = require_gtr();
    var ltr = require_ltr();
    var intersects = require_intersects();
    var simplifyRange = require_simplify();
    var subset = require_subset();
    module2.exports = {
      parse: parse2,
      valid,
      clean,
      inc,
      diff,
      major,
      minor,
      patch,
      prerelease,
      compare,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt,
      lt,
      eq,
      neq,
      gte,
      lte,
      cmp,
      coerce,
      Comparator,
      Range,
      satisfies,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
      RELEASE_TYPES: constants.RELEASE_TYPES,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers
    };
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/features/util.js
var require_util = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/features/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildFeatureSegment = exports.buildFeatureStateModel = exports.buildFeatureModel = void 0;
    var models_1 = require_models3();
    function buildFeatureModel(featuresModelJSON) {
      return new models_1.FeatureModel(featuresModelJSON.id, featuresModelJSON.name, featuresModelJSON.type);
    }
    exports.buildFeatureModel = buildFeatureModel;
    function buildFeatureStateModel(featuresStateModelJSON) {
      var featureStateModel = new models_1.FeatureStateModel(buildFeatureModel(featuresStateModelJSON.feature), featuresStateModelJSON.enabled, featuresStateModelJSON.django_id, featuresStateModelJSON.feature_state_value, featuresStateModelJSON.uuid);
      featureStateModel.featureSegment = featuresStateModelJSON.feature_segment ? buildFeatureSegment(featuresStateModelJSON.feature_segment) : void 0;
      var multivariateFeatureStateValues = featuresStateModelJSON.multivariate_feature_state_values ? featuresStateModelJSON.multivariate_feature_state_values.map(function(fsv) {
        var featureOption = new models_1.MultivariateFeatureOptionModel(fsv.multivariate_feature_option.value, fsv.multivariate_feature_option.id);
        return new models_1.MultivariateFeatureStateValueModel(featureOption, fsv.percentage_allocation, fsv.id);
      }) : [];
      featureStateModel.multivariateFeatureStateValues = multivariateFeatureStateValues;
      return featureStateModel;
    }
    exports.buildFeatureStateModel = buildFeatureStateModel;
    function buildFeatureSegment(featureSegmentJSON) {
      return new models_1.FeatureSegment(featureSegmentJSON.priority);
    }
    exports.buildFeatureSegment = buildFeatureSegment;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/segments/util.js
var require_util2 = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/segments/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.removeSemverSuffix = exports.isSemver = exports.buildSegmentModel = exports.buildSegmentRuleModel = exports.buildSegmentConditionModel = void 0;
    var util_1 = require_util();
    var models_1 = require_models6();
    function buildSegmentConditionModel(segmentConditionJSON) {
      return new models_1.SegmentConditionModel(segmentConditionJSON.operator, segmentConditionJSON.value, segmentConditionJSON.property_);
    }
    exports.buildSegmentConditionModel = buildSegmentConditionModel;
    function buildSegmentRuleModel(ruleModelJSON) {
      var ruleModel = new models_1.SegmentRuleModel(ruleModelJSON.type);
      ruleModel.rules = ruleModelJSON.rules.map(function(r) {
        return buildSegmentRuleModel(r);
      });
      ruleModel.conditions = ruleModelJSON.conditions.map(function(c) {
        return buildSegmentConditionModel(c);
      });
      return ruleModel;
    }
    exports.buildSegmentRuleModel = buildSegmentRuleModel;
    function buildSegmentModel(segmentModelJSON) {
      var model = new models_1.SegmentModel(segmentModelJSON.id, segmentModelJSON.name);
      model.featureStates = segmentModelJSON["feature_states"].map(function(fs) {
        return (0, util_1.buildFeatureStateModel)(fs);
      });
      model.rules = segmentModelJSON["rules"].map(function(r) {
        return buildSegmentRuleModel(r);
      });
      return model;
    }
    exports.buildSegmentModel = buildSegmentModel;
    function isSemver(value) {
      return typeof value == "string" && value.endsWith(":semver");
    }
    exports.isSemver = isSemver;
    function removeSemverSuffix(value) {
      return value.replace(":semver", "");
    }
    exports.removeSemverSuffix = removeSemverSuffix;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/utils/index.js
var require_utils = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCastingFunction = void 0;
    var util_1 = require_util2();
    function getCastingFunction(traitType) {
      switch (traitType) {
        case "boolean":
          return function(x) {
            return !["False", "false"].includes(x);
          };
        case "number":
          return function(x) {
            return parseFloat(x);
          };
        case "semver":
          return function(x) {
            return (0, util_1.removeSemverSuffix)(x);
          };
        default:
          return function(x) {
            return String(x);
          };
      }
    }
    exports.getCastingFunction = getCastingFunction;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/segments/models.js
var require_models6 = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/segments/models.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var _a;
    var _b;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SegmentModel = exports.SegmentRuleModel = exports.SegmentConditionModel = exports.getMatchingFunctions = exports.semverMatchingFunction = exports.matchingFunctions = exports.any = exports.all = void 0;
    var semver_1 = __importDefault(require_semver2());
    var utils_1 = require_utils();
    var constants_1 = require_constants();
    var util_1 = require_util2();
    var all = function(iterable) {
      return iterable.filter(function(e) {
        return !!e;
      }).length === iterable.length;
    };
    exports.all = all;
    var any = function(iterable) {
      return iterable.filter(function(e) {
        return !!e;
      }).length > 0;
    };
    exports.any = any;
    exports.matchingFunctions = (_a = {}, _a[constants_1.CONDITION_OPERATORS.EQUAL] = function(thisValue, otherValue) {
      return thisValue == otherValue;
    }, _a[constants_1.CONDITION_OPERATORS.GREATER_THAN] = function(thisValue, otherValue) {
      return otherValue > thisValue;
    }, _a[constants_1.CONDITION_OPERATORS.GREATER_THAN_INCLUSIVE] = function(thisValue, otherValue) {
      return otherValue >= thisValue;
    }, _a[constants_1.CONDITION_OPERATORS.LESS_THAN] = function(thisValue, otherValue) {
      return thisValue > otherValue;
    }, _a[constants_1.CONDITION_OPERATORS.LESS_THAN_INCLUSIVE] = function(thisValue, otherValue) {
      return thisValue >= otherValue;
    }, _a[constants_1.CONDITION_OPERATORS.NOT_EQUAL] = function(thisValue, otherValue) {
      return thisValue != otherValue;
    }, _a[constants_1.CONDITION_OPERATORS.CONTAINS] = function(thisValue, otherValue) {
      return otherValue.includes(thisValue);
    }, _a);
    exports.semverMatchingFunction = __assign(__assign({}, exports.matchingFunctions), (_b = {}, _b[constants_1.CONDITION_OPERATORS.EQUAL] = function(thisValue, otherValue) {
      return semver_1.default.eq(thisValue, otherValue);
    }, _b[constants_1.CONDITION_OPERATORS.GREATER_THAN] = function(thisValue, otherValue) {
      return semver_1.default.gt(otherValue, thisValue);
    }, _b[constants_1.CONDITION_OPERATORS.GREATER_THAN_INCLUSIVE] = function(thisValue, otherValue) {
      return semver_1.default.gte(otherValue, thisValue);
    }, _b[constants_1.CONDITION_OPERATORS.LESS_THAN] = function(thisValue, otherValue) {
      return semver_1.default.gt(thisValue, otherValue);
    }, _b[constants_1.CONDITION_OPERATORS.LESS_THAN_INCLUSIVE] = function(thisValue, otherValue) {
      return semver_1.default.gte(thisValue, otherValue);
    }, _b));
    var getMatchingFunctions = function(semver) {
      return semver ? exports.semverMatchingFunction : exports.matchingFunctions;
    };
    exports.getMatchingFunctions = getMatchingFunctions;
    var SegmentConditionModel = (
      /** @class */
      function() {
        function SegmentConditionModel2(operator, value, property) {
          var _a2;
          this.EXCEPTION_OPERATOR_METHODS = (_a2 = {}, _a2[constants_1.NOT_CONTAINS] = "evaluateNotContains", _a2[constants_1.REGEX] = "evaluateRegex", _a2[constants_1.MODULO] = "evaluateModulo", _a2[constants_1.IN] = "evaluateIn", _a2);
          this.operator = operator;
          this.value = value;
          this.property_ = property;
        }
        SegmentConditionModel2.prototype.matchesTraitValue = function(traitValue) {
          var _this = this;
          var evaluators = {
            evaluateNotContains: function(traitValue2) {
              return !traitValue2.includes(_this.value);
            },
            evaluateRegex: function(traitValue2) {
              return !!_this.value && !!traitValue2.match(new RegExp(_this.value));
            },
            evaluateModulo: function(traitValue2) {
              if (isNaN(parseFloat(traitValue2)) || !_this.value) {
                return false;
              }
              var parts = _this.value.split("|");
              var _a2 = __read([parseFloat(parts[0]), parseFloat(parts[1])], 2), divisor = _a2[0], reminder = _a2[1];
              return traitValue2 % divisor === reminder;
            },
            evaluateIn: function(traitValue2) {
              var _a2;
              return (_a2 = _this.value) === null || _a2 === void 0 ? void 0 : _a2.split(",").includes(traitValue2.toString());
            }
          };
          if (this.EXCEPTION_OPERATOR_METHODS[this.operator]) {
            var evaluatorFunction = evaluators[this.EXCEPTION_OPERATOR_METHODS[this.operator]];
            return evaluatorFunction(traitValue);
          }
          var defaultFunction = function(x, y) {
            return false;
          };
          var matchingFunctionSet = (0, exports.getMatchingFunctions)((0, util_1.isSemver)(this.value));
          var matchingFunction = matchingFunctionSet[this.operator] || defaultFunction;
          var traitType = (0, util_1.isSemver)(this.value) ? "semver" : typeof traitValue;
          var castToTypeOfTraitValue = (0, utils_1.getCastingFunction)(traitType);
          return matchingFunction(castToTypeOfTraitValue(this.value), traitValue);
        };
        return SegmentConditionModel2;
      }()
    );
    exports.SegmentConditionModel = SegmentConditionModel;
    var SegmentRuleModel = (
      /** @class */
      function() {
        function SegmentRuleModel2(type) {
          this.rules = [];
          this.conditions = [];
          this.type = type;
        }
        SegmentRuleModel2.none = function(iterable) {
          return iterable.filter(function(e) {
            return !!e;
          }).length === 0;
        };
        SegmentRuleModel2.prototype.matchingFunction = function() {
          var _a2;
          return (_a2 = {}, _a2[constants_1.ANY_RULE] = exports.any, _a2[constants_1.ALL_RULE] = exports.all, _a2[constants_1.NONE_RULE] = SegmentRuleModel2.none, _a2)[this.type];
        };
        return SegmentRuleModel2;
      }()
    );
    exports.SegmentRuleModel = SegmentRuleModel;
    var SegmentModel = (
      /** @class */
      function() {
        function SegmentModel2(id, name) {
          this.rules = [];
          this.featureStates = [];
          this.id = id;
          this.name = name;
        }
        return SegmentModel2;
      }()
    );
    exports.SegmentModel = SegmentModel;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/organisations/models.js
var require_models7 = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/organisations/models.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OrganisationModel = void 0;
    var OrganisationModel = (
      /** @class */
      function() {
        function OrganisationModel2(id, name, featureAnalytics, stopServingFlags, persistTraitData) {
          this.id = id;
          this.name = name;
          this.featureAnalytics = featureAnalytics;
          this.stopServingFlags = stopServingFlags;
          this.persistTraitData = persistTraitData;
        }
        Object.defineProperty(OrganisationModel2.prototype, "uniqueSlug", {
          get: function() {
            return this.id.toString() + "-" + this.name;
          },
          enumerable: false,
          configurable: true
        });
        return OrganisationModel2;
      }()
    );
    exports.OrganisationModel = OrganisationModel;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/index.js
var require_flagsmith_engine = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/index.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEnvironmentFeatureStates = exports.getEnvironmentFeatureState = exports.getIdentityFeatureStates = exports.getIdentityFeatureState = exports.OrganisationModel = exports.SegmentModel = exports.TraitModel = exports.IdentityModel = exports.FeatureStateModel = exports.IntegrationModel = exports.EnvironmentModel = void 0;
    var evaluators_1 = require_evaluators();
    var errors_1 = require_errors();
    var models_1 = require_models();
    Object.defineProperty(exports, "EnvironmentModel", { enumerable: true, get: function() {
      return models_1.EnvironmentModel;
    } });
    var models_2 = require_models2();
    Object.defineProperty(exports, "IntegrationModel", { enumerable: true, get: function() {
      return models_2.IntegrationModel;
    } });
    var models_3 = require_models3();
    Object.defineProperty(exports, "FeatureStateModel", { enumerable: true, get: function() {
      return models_3.FeatureStateModel;
    } });
    var models_4 = require_models4();
    Object.defineProperty(exports, "IdentityModel", { enumerable: true, get: function() {
      return models_4.IdentityModel;
    } });
    var models_5 = require_models5();
    Object.defineProperty(exports, "TraitModel", { enumerable: true, get: function() {
      return models_5.TraitModel;
    } });
    var models_6 = require_models6();
    Object.defineProperty(exports, "SegmentModel", { enumerable: true, get: function() {
      return models_6.SegmentModel;
    } });
    var models_7 = require_models7();
    Object.defineProperty(exports, "OrganisationModel", { enumerable: true, get: function() {
      return models_7.OrganisationModel;
    } });
    function getIdentityFeatureStatesDict(environment, identity, overrideTraits) {
      var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
      var featureStates = {};
      try {
        for (var _e = __values(environment.featureStates), _f = _e.next(); !_f.done; _f = _e.next()) {
          var fs = _f.value;
          featureStates[fs.feature.id] = fs;
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_f && !_f.done && (_a = _e.return))
            _a.call(_e);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      var identitySegments = (0, evaluators_1.getIdentitySegments)(environment, identity, overrideTraits);
      try {
        for (var identitySegments_1 = __values(identitySegments), identitySegments_1_1 = identitySegments_1.next(); !identitySegments_1_1.done; identitySegments_1_1 = identitySegments_1.next()) {
          var matchingSegment = identitySegments_1_1.value;
          try {
            for (var _g = (e_3 = void 0, __values(matchingSegment.featureStates)), _h = _g.next(); !_h.done; _h = _g.next()) {
              var featureState = _h.value;
              if (featureStates[featureState.feature.id]) {
                if (featureStates[featureState.feature.id].isHigherSegmentPriority(featureState)) {
                  continue;
                }
              }
              featureStates[featureState.feature.id] = featureState;
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (_h && !_h.done && (_c = _g.return))
                _c.call(_g);
            } finally {
              if (e_3)
                throw e_3.error;
            }
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (identitySegments_1_1 && !identitySegments_1_1.done && (_b = identitySegments_1.return))
            _b.call(identitySegments_1);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      try {
        for (var _j = __values(identity.identityFeatures), _k = _j.next(); !_k.done; _k = _j.next()) {
          var fs = _k.value;
          if (featureStates[fs.feature.id]) {
            featureStates[fs.feature.id] = fs;
          }
        }
      } catch (e_4_1) {
        e_4 = { error: e_4_1 };
      } finally {
        try {
          if (_k && !_k.done && (_d = _j.return))
            _d.call(_j);
        } finally {
          if (e_4)
            throw e_4.error;
        }
      }
      return featureStates;
    }
    function getIdentityFeatureState(environment, identity, featureName, overrideTraits) {
      var featureStates = getIdentityFeatureStatesDict(environment, identity, overrideTraits);
      var matchingFeature = Object.values(featureStates).filter(function(f2) {
        return f2.feature.name === featureName;
      });
      if (matchingFeature.length === 0) {
        throw new errors_1.FeatureStateNotFound("Feature State Not Found");
      }
      return matchingFeature[0];
    }
    exports.getIdentityFeatureState = getIdentityFeatureState;
    function getIdentityFeatureStates(environment, identity, overrideTraits) {
      var featureStates = Object.values(getIdentityFeatureStatesDict(environment, identity, overrideTraits));
      if (environment.project.hideDisabledFlags) {
        return featureStates.filter(function(fs) {
          return !!fs.enabled;
        });
      }
      return featureStates;
    }
    exports.getIdentityFeatureStates = getIdentityFeatureStates;
    function getEnvironmentFeatureState(environment, featureName) {
      var featuresStates = environment.featureStates.filter(function(f2) {
        return f2.feature.name === featureName;
      });
      if (featuresStates.length === 0) {
        throw new errors_1.FeatureStateNotFound("Feature State Not Found");
      }
      return featuresStates[0];
    }
    exports.getEnvironmentFeatureState = getEnvironmentFeatureState;
    function getEnvironmentFeatureStates(environment) {
      if (environment.project.hideDisabledFlags) {
        return environment.featureStates.filter(function(fs) {
          return !!fs.enabled;
        });
      }
      return environment.featureStates;
    }
    exports.getEnvironmentFeatureStates = getEnvironmentFeatureStates;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/organisations/util.js
var require_util3 = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/organisations/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildOrganizationModel = void 0;
    var models_1 = require_models7();
    function buildOrganizationModel(organizationJSON) {
      return new models_1.OrganisationModel(organizationJSON.id, organizationJSON.name, organizationJSON.feature_analytics, organizationJSON.stop_serving_flags, organizationJSON.persist_trait_data);
    }
    exports.buildOrganizationModel = buildOrganizationModel;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/projects/models.js
var require_models8 = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/projects/models.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProjectModel = void 0;
    var ProjectModel = (
      /** @class */
      function() {
        function ProjectModel2(id, name, hideDisabledFlags, organization) {
          this.segments = [];
          this.id = id;
          this.name = name;
          this.hideDisabledFlags = hideDisabledFlags;
          this.organisation = organization;
        }
        return ProjectModel2;
      }()
    );
    exports.ProjectModel = ProjectModel;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/projects/util.js
var require_util4 = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/projects/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildProjectModel = void 0;
    var util_1 = require_util3();
    var util_2 = require_util2();
    var models_1 = require_models8();
    function buildProjectModel(projectJSON) {
      var segments = projectJSON["segments"] ? projectJSON["segments"].map(function(s) {
        return (0, util_2.buildSegmentModel)(s);
      }) : [];
      var model = new models_1.ProjectModel(projectJSON.id, projectJSON.name, projectJSON.hide_disabled_flags, (0, util_1.buildOrganizationModel)(projectJSON.organisation));
      model.segments = segments;
      return model;
    }
    exports.buildProjectModel = buildProjectModel;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/environments/util.js
var require_util5 = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/flagsmith-engine/environments/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildEnvironmentAPIKeyModel = exports.buildEnvironmentModel = void 0;
    var util_1 = require_util();
    var util_2 = require_util4();
    var models_1 = require_models();
    function buildEnvironmentModel(environmentJSON) {
      var project = (0, util_2.buildProjectModel)(environmentJSON.project);
      var featureStates = environmentJSON.feature_states.map(function(fs) {
        return (0, util_1.buildFeatureStateModel)(fs);
      });
      var environmentModel = new models_1.EnvironmentModel(environmentJSON.id, environmentJSON.api_key, project);
      environmentModel.featureStates = featureStates;
      return environmentModel;
    }
    exports.buildEnvironmentModel = buildEnvironmentModel;
    function buildEnvironmentAPIKeyModel(apiKeyJSON) {
      var model = new models_1.EnvironmentAPIKeyModel(apiKeyJSON.id, apiKeyJSON.key, Date.parse(apiKeyJSON.created_at), apiKeyJSON.name, apiKeyJSON.client_api_key);
      return model;
    }
    exports.buildEnvironmentAPIKeyModel = buildEnvironmentAPIKeyModel;
  }
});

// node_modules/.pnpm/node-fetch@2.7.0/node_modules/node-fetch/browser.js
var require_browser = __commonJS({
  "node_modules/.pnpm/node-fetch@2.7.0/node_modules/node-fetch/browser.js"(exports, module2) {
    "use strict";
    var getGlobal = function() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("unable to locate global object");
    };
    var globalObject = getGlobal();
    module2.exports = exports = globalObject.fetch;
    if (globalObject.fetch) {
      exports.default = globalObject.fetch.bind(globalObject);
    }
    exports.Headers = globalObject.Headers;
    exports.Request = globalObject.Request;
    exports.Response = globalObject.Response;
  }
});

// node_modules/.pnpm/quick-format-unescaped@4.0.4/node_modules/quick-format-unescaped/index.js
var require_quick_format_unescaped = __commonJS({
  "node_modules/.pnpm/quick-format-unescaped@4.0.4/node_modules/quick-format-unescaped/index.js"(exports, module2) {
    "use strict";
    function tryStringify(o) {
      try {
        return JSON.stringify(o);
      } catch (e) {
        return '"[Circular]"';
      }
    }
    module2.exports = format;
    function format(f2, args, opts) {
      var ss = opts && opts.stringify || tryStringify;
      var offset = 1;
      if (typeof f2 === "object" && f2 !== null) {
        var len = args.length + offset;
        if (len === 1)
          return f2;
        var objects = new Array(len);
        objects[0] = ss(f2);
        for (var index = 1; index < len; index++) {
          objects[index] = ss(args[index]);
        }
        return objects.join(" ");
      }
      if (typeof f2 !== "string") {
        return f2;
      }
      var argLen = args.length;
      if (argLen === 0)
        return f2;
      var str = "";
      var a = 1 - offset;
      var lastPos = -1;
      var flen = f2 && f2.length || 0;
      for (var i = 0; i < flen; ) {
        if (f2.charCodeAt(i) === 37 && i + 1 < flen) {
          lastPos = lastPos > -1 ? lastPos : 0;
          switch (f2.charCodeAt(i + 1)) {
            case 100:
            case 102:
              if (a >= argLen)
                break;
              if (args[a] == null)
                break;
              if (lastPos < i)
                str += f2.slice(lastPos, i);
              str += Number(args[a]);
              lastPos = i + 2;
              i++;
              break;
            case 105:
              if (a >= argLen)
                break;
              if (args[a] == null)
                break;
              if (lastPos < i)
                str += f2.slice(lastPos, i);
              str += Math.floor(Number(args[a]));
              lastPos = i + 2;
              i++;
              break;
            case 79:
            case 111:
            case 106:
              if (a >= argLen)
                break;
              if (args[a] === void 0)
                break;
              if (lastPos < i)
                str += f2.slice(lastPos, i);
              var type = typeof args[a];
              if (type === "string") {
                str += "'" + args[a] + "'";
                lastPos = i + 2;
                i++;
                break;
              }
              if (type === "function") {
                str += args[a].name || "<anonymous>";
                lastPos = i + 2;
                i++;
                break;
              }
              str += ss(args[a]);
              lastPos = i + 2;
              i++;
              break;
            case 115:
              if (a >= argLen)
                break;
              if (lastPos < i)
                str += f2.slice(lastPos, i);
              str += String(args[a]);
              lastPos = i + 2;
              i++;
              break;
            case 37:
              if (lastPos < i)
                str += f2.slice(lastPos, i);
              str += "%";
              lastPos = i + 2;
              i++;
              a--;
              break;
          }
          ++a;
        }
        ++i;
      }
      if (lastPos === -1)
        return f2;
      else if (lastPos < flen) {
        str += f2.slice(lastPos);
      }
      return str;
    }
  }
});

// node_modules/.pnpm/pino@8.16.2/node_modules/pino/browser.js
var require_browser2 = __commonJS({
  "node_modules/.pnpm/pino@8.16.2/node_modules/pino/browser.js"(exports, module2) {
    "use strict";
    var format = require_quick_format_unescaped();
    module2.exports = pino;
    var _console = pfGlobalThisOrFallback().console || {};
    var stdSerializers = {
      mapHttpRequest: mock,
      mapHttpResponse: mock,
      wrapRequestSerializer: passthrough,
      wrapResponseSerializer: passthrough,
      wrapErrorSerializer: passthrough,
      req: mock,
      res: mock,
      err: asErrValue,
      errWithCause: asErrValue
    };
    function levelToValue(level, logger) {
      return level === "silent" ? Infinity : logger.levels.values[level];
    }
    var baseLogFunctionSymbol = Symbol("pino.logFuncs");
    var hierarchySymbol = Symbol("pino.hierarchy");
    var logFallbackMap = {
      error: "log",
      fatal: "error",
      warn: "error",
      info: "log",
      debug: "log",
      trace: "log"
    };
    function appendChildLogger(parentLogger, childLogger) {
      const newEntry = {
        logger: childLogger,
        parent: parentLogger[hierarchySymbol]
      };
      childLogger[hierarchySymbol] = newEntry;
    }
    function setupBaseLogFunctions(logger, levels, proto) {
      const logFunctions = {};
      levels.forEach((level) => {
        logFunctions[level] = proto[level] ? proto[level] : _console[level] || _console[logFallbackMap[level] || "log"] || noop;
      });
      logger[baseLogFunctionSymbol] = logFunctions;
    }
    function shouldSerialize(serialize, serializers) {
      if (Array.isArray(serialize)) {
        const hasToFilter = serialize.filter(function(k) {
          return k !== "!stdSerializers.err";
        });
        return hasToFilter;
      } else if (serialize === true) {
        return Object.keys(serializers);
      }
      return false;
    }
    function pino(opts) {
      opts = opts || {};
      opts.browser = opts.browser || {};
      const transmit2 = opts.browser.transmit;
      if (transmit2 && typeof transmit2.send !== "function") {
        throw Error("pino: transmit option must have a send function");
      }
      const proto = opts.browser.write || _console;
      if (opts.browser.write)
        opts.browser.asObject = true;
      const serializers = opts.serializers || {};
      const serialize = shouldSerialize(opts.browser.serialize, serializers);
      let stdErrSerialize = opts.browser.serialize;
      if (Array.isArray(opts.browser.serialize) && opts.browser.serialize.indexOf("!stdSerializers.err") > -1)
        stdErrSerialize = false;
      const customLevels = Object.keys(opts.customLevels || {});
      const levels = ["error", "fatal", "warn", "info", "debug", "trace"].concat(customLevels);
      if (typeof proto === "function") {
        levels.forEach(function(level2) {
          proto[level2] = proto;
        });
      }
      if (opts.enabled === false || opts.browser.disabled)
        opts.level = "silent";
      const level = opts.level || "info";
      const logger = Object.create(proto);
      if (!logger.log)
        logger.log = noop;
      setupBaseLogFunctions(logger, levels, proto);
      appendChildLogger({}, logger);
      Object.defineProperty(logger, "levelVal", {
        get: getLevelVal
      });
      Object.defineProperty(logger, "level", {
        get: getLevel,
        set: setLevel
      });
      const setOpts = {
        transmit: transmit2,
        serialize,
        asObject: opts.browser.asObject,
        levels,
        timestamp: getTimeFunction(opts)
      };
      logger.levels = getLevels(opts);
      logger.level = level;
      logger.setMaxListeners = logger.getMaxListeners = logger.emit = logger.addListener = logger.on = logger.prependListener = logger.once = logger.prependOnceListener = logger.removeListener = logger.removeAllListeners = logger.listeners = logger.listenerCount = logger.eventNames = logger.write = logger.flush = noop;
      logger.serializers = serializers;
      logger._serialize = serialize;
      logger._stdErrSerialize = stdErrSerialize;
      logger.child = child;
      if (transmit2)
        logger._logEvent = createLogEventShape();
      function getLevelVal() {
        return levelToValue(this.level, this);
      }
      function getLevel() {
        return this._level;
      }
      function setLevel(level2) {
        if (level2 !== "silent" && !this.levels.values[level2]) {
          throw Error("unknown level " + level2);
        }
        this._level = level2;
        set(this, setOpts, logger, "error");
        set(this, setOpts, logger, "fatal");
        set(this, setOpts, logger, "warn");
        set(this, setOpts, logger, "info");
        set(this, setOpts, logger, "debug");
        set(this, setOpts, logger, "trace");
        customLevels.forEach((level3) => {
          set(this, setOpts, logger, level3);
        });
      }
      function child(bindings, childOptions) {
        if (!bindings) {
          throw new Error("missing bindings for child Pino");
        }
        childOptions = childOptions || {};
        if (serialize && bindings.serializers) {
          childOptions.serializers = bindings.serializers;
        }
        const childOptionsSerializers = childOptions.serializers;
        if (serialize && childOptionsSerializers) {
          var childSerializers = Object.assign({}, serializers, childOptionsSerializers);
          var childSerialize = opts.browser.serialize === true ? Object.keys(childSerializers) : serialize;
          delete bindings.serializers;
          applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize);
        }
        function Child(parent) {
          this._childLevel = (parent._childLevel | 0) + 1;
          this.bindings = bindings;
          if (childSerializers) {
            this.serializers = childSerializers;
            this._serialize = childSerialize;
          }
          if (transmit2) {
            this._logEvent = createLogEventShape(
              [].concat(parent._logEvent.bindings, bindings)
            );
          }
        }
        Child.prototype = this;
        const newLogger = new Child(this);
        appendChildLogger(this, newLogger);
        newLogger.level = this.level;
        return newLogger;
      }
      return logger;
    }
    function getLevels(opts) {
      const customLevels = opts.customLevels || {};
      const values = Object.assign({}, pino.levels.values, customLevels);
      const labels = Object.assign({}, pino.levels.labels, invertObject(customLevels));
      return {
        values,
        labels
      };
    }
    function invertObject(obj) {
      const inverted = {};
      Object.keys(obj).forEach(function(key) {
        inverted[obj[key]] = key;
      });
      return inverted;
    }
    pino.levels = {
      values: {
        fatal: 60,
        error: 50,
        warn: 40,
        info: 30,
        debug: 20,
        trace: 10
      },
      labels: {
        10: "trace",
        20: "debug",
        30: "info",
        40: "warn",
        50: "error",
        60: "fatal"
      }
    };
    pino.stdSerializers = stdSerializers;
    pino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime });
    function getBindingChain(logger) {
      const bindings = [];
      if (logger.bindings) {
        bindings.push(logger.bindings);
      }
      let hierarchy = logger[hierarchySymbol];
      while (hierarchy.parent) {
        hierarchy = hierarchy.parent;
        if (hierarchy.logger.bindings) {
          bindings.push(hierarchy.logger.bindings);
        }
      }
      return bindings.reverse();
    }
    function set(self2, opts, rootLogger, level) {
      self2[level] = levelToValue(self2.level, rootLogger) > levelToValue(level, rootLogger) ? noop : rootLogger[baseLogFunctionSymbol][level];
      if (!opts.transmit && self2[level] === noop) {
        return;
      }
      self2[level] = createWrap(self2, opts, rootLogger, level);
      const bindings = getBindingChain(self2);
      if (bindings.length === 0) {
        return;
      }
      self2[level] = prependBindingsInArguments(bindings, self2[level]);
    }
    function prependBindingsInArguments(bindings, logFunc) {
      return function() {
        return logFunc.apply(this, [...bindings, ...arguments]);
      };
    }
    function createWrap(self2, opts, rootLogger, level) {
      return function(write) {
        return function LOG() {
          const ts = opts.timestamp();
          const args = new Array(arguments.length);
          const proto = Object.getPrototypeOf && Object.getPrototypeOf(this) === _console ? _console : this;
          for (var i = 0; i < args.length; i++)
            args[i] = arguments[i];
          if (opts.serialize && !opts.asObject) {
            applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize);
          }
          if (opts.asObject)
            write.call(proto, asObject(this, level, args, ts));
          else
            write.apply(proto, args);
          if (opts.transmit) {
            const transmitLevel = opts.transmit.level || self2._level;
            const transmitValue = rootLogger.levels.values[transmitLevel];
            const methodValue = rootLogger.levels.values[level];
            if (methodValue < transmitValue)
              return;
            transmit(this, {
              ts,
              methodLevel: level,
              methodValue,
              transmitLevel,
              transmitValue: rootLogger.levels.values[opts.transmit.level || self2._level],
              send: opts.transmit.send,
              val: levelToValue(self2._level, rootLogger)
            }, args);
          }
        };
      }(self2[baseLogFunctionSymbol][level]);
    }
    function asObject(logger, level, args, ts) {
      if (logger._serialize)
        applySerializers(args, logger._serialize, logger.serializers, logger._stdErrSerialize);
      const argsCloned = args.slice();
      let msg = argsCloned[0];
      const o = {};
      if (ts) {
        o.time = ts;
      }
      o.level = logger.levels.values[level];
      let lvl = (logger._childLevel | 0) + 1;
      if (lvl < 1)
        lvl = 1;
      if (msg !== null && typeof msg === "object") {
        while (lvl-- && typeof argsCloned[0] === "object") {
          Object.assign(o, argsCloned.shift());
        }
        msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : void 0;
      } else if (typeof msg === "string")
        msg = format(argsCloned.shift(), argsCloned);
      if (msg !== void 0)
        o.msg = msg;
      return o;
    }
    function applySerializers(args, serialize, serializers, stdErrSerialize) {
      for (const i in args) {
        if (stdErrSerialize && args[i] instanceof Error) {
          args[i] = pino.stdSerializers.err(args[i]);
        } else if (typeof args[i] === "object" && !Array.isArray(args[i])) {
          for (const k in args[i]) {
            if (serialize && serialize.indexOf(k) > -1 && k in serializers) {
              args[i][k] = serializers[k](args[i][k]);
            }
          }
        }
      }
    }
    function transmit(logger, opts, args) {
      const send2 = opts.send;
      const ts = opts.ts;
      const methodLevel = opts.methodLevel;
      const methodValue = opts.methodValue;
      const val = opts.val;
      const bindings = logger._logEvent.bindings;
      applySerializers(
        args,
        logger._serialize || Object.keys(logger.serializers),
        logger.serializers,
        logger._stdErrSerialize === void 0 ? true : logger._stdErrSerialize
      );
      logger._logEvent.ts = ts;
      logger._logEvent.messages = args.filter(function(arg) {
        return bindings.indexOf(arg) === -1;
      });
      logger._logEvent.level.label = methodLevel;
      logger._logEvent.level.value = methodValue;
      send2(methodLevel, logger._logEvent, val);
      logger._logEvent = createLogEventShape(bindings);
    }
    function createLogEventShape(bindings) {
      return {
        ts: 0,
        messages: [],
        bindings: bindings || [],
        level: { label: "", value: 0 }
      };
    }
    function asErrValue(err) {
      const obj = {
        type: err.constructor.name,
        msg: err.message,
        stack: err.stack
      };
      for (const key in err) {
        if (obj[key] === void 0) {
          obj[key] = err[key];
        }
      }
      return obj;
    }
    function getTimeFunction(opts) {
      if (typeof opts.timestamp === "function") {
        return opts.timestamp;
      }
      if (opts.timestamp === false) {
        return nullTime;
      }
      return epochTime;
    }
    function mock() {
      return {};
    }
    function passthrough(a) {
      return a;
    }
    function noop() {
    }
    function nullTime() {
      return false;
    }
    function epochTime() {
      return Date.now();
    }
    function unixTime() {
      return Math.round(Date.now() / 1e3);
    }
    function isoTime() {
      return new Date(Date.now()).toISOString();
    }
    function pfGlobalThisOrFallback() {
      function defd(o) {
        return typeof o !== "undefined" && o;
      }
      try {
        if (typeof globalThis !== "undefined")
          return globalThis;
        Object.defineProperty(Object.prototype, "globalThis", {
          get: function() {
            delete Object.prototype.globalThis;
            return this.globalThis = this;
          },
          configurable: true
        });
        return globalThis;
      } catch (e) {
        return defd(self) || defd(window) || defd(this) || {};
      }
    }
    module2.exports.default = pino;
    module2.exports.pino = pino;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/sdk/analytics.js
var require_analytics = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/sdk/analytics.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnalyticsProcessor = void 0;
    var node_fetch_1 = __importDefault(require_browser());
    var pino_1 = __importDefault(require_browser2());
    var ANALYTICS_ENDPOINT = "analytics/flags/";
    var ANALYTICS_TIMER = 10;
    var AnalyticsProcessor = (
      /** @class */
      function() {
        function AnalyticsProcessor2(data) {
          this.requestTimeoutMs = 3e3;
          this.analyticsEndpoint = data.baseApiUrl + ANALYTICS_ENDPOINT;
          this.environmentKey = data.environmentKey;
          this.lastFlushed = Date.now();
          this.analyticsData = {};
          this.requestTimeoutMs = data.requestTimeoutMs || this.requestTimeoutMs;
          this.logger = data.logger || (0, pino_1.default)();
        }
        AnalyticsProcessor2.prototype.flush = function() {
          return __awaiter(this, void 0, void 0, function() {
            var error_1;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!Object.keys(this.analyticsData).length) {
                    return [
                      2
                      /*return*/
                    ];
                  }
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 3, , 4]);
                  return [4, (0, node_fetch_1.default)(this.analyticsEndpoint, {
                    method: "POST",
                    body: JSON.stringify(this.analyticsData),
                    timeout: this.requestTimeoutMs,
                    headers: {
                      "Content-Type": "application/json",
                      "X-Environment-Key": this.environmentKey
                    }
                  })];
                case 2:
                  _a.sent();
                  return [3, 4];
                case 3:
                  error_1 = _a.sent();
                  this.logger.warn("Failed to post analytics to Flagsmith API. Not clearing data, will retry.");
                  return [
                    2
                    /*return*/
                  ];
                case 4:
                  this.analyticsData = {};
                  this.lastFlushed = Date.now();
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        AnalyticsProcessor2.prototype.trackFeature = function(featureName) {
          this.analyticsData[featureName] = (this.analyticsData[featureName] || 0) + 1;
          if (Date.now() - this.lastFlushed > ANALYTICS_TIMER * 1e3) {
            this.flush();
          }
        };
        return AnalyticsProcessor2;
      }()
    );
    exports.AnalyticsProcessor = AnalyticsProcessor;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/sdk/errors.js
var require_errors2 = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/sdk/errors.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FlagsmithAPIError = exports.FlagsmithClientError = void 0;
    var FlagsmithClientError = (
      /** @class */
      function(_super) {
        __extends(FlagsmithClientError2, _super);
        function FlagsmithClientError2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return FlagsmithClientError2;
      }(Error)
    );
    exports.FlagsmithClientError = FlagsmithClientError;
    var FlagsmithAPIError = (
      /** @class */
      function(_super) {
        __extends(FlagsmithAPIError2, _super);
        function FlagsmithAPIError2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return FlagsmithAPIError2;
      }(Error)
    );
    exports.FlagsmithAPIError = FlagsmithAPIError;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/sdk/models.js
var require_models9 = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/sdk/models.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Flags = exports.Flag = exports.DefaultFlag = exports.BaseFlag = void 0;
    var BaseFlag = (
      /** @class */
      function() {
        function BaseFlag2(value, enabled, isDefault) {
          this.value = value;
          this.enabled = enabled;
          this.isDefault = isDefault;
        }
        return BaseFlag2;
      }()
    );
    exports.BaseFlag = BaseFlag;
    var DefaultFlag = (
      /** @class */
      function(_super) {
        __extends(DefaultFlag2, _super);
        function DefaultFlag2(value, enabled) {
          return _super.call(this, value, enabled, true) || this;
        }
        return DefaultFlag2;
      }(BaseFlag)
    );
    exports.DefaultFlag = DefaultFlag;
    var Flag = (
      /** @class */
      function(_super) {
        __extends(Flag2, _super);
        function Flag2(params) {
          var _this = _super.call(this, params.value, params.enabled, !!params.isDefault) || this;
          _this.featureId = params.featureId;
          _this.featureName = params.featureName;
          return _this;
        }
        Flag2.fromFeatureStateModel = function(fsm, identityId) {
          return new Flag2({
            value: fsm.getValue(identityId),
            enabled: fsm.enabled,
            featureId: fsm.feature.id,
            featureName: fsm.feature.name
          });
        };
        Flag2.fromAPIFlag = function(flagData) {
          return new Flag2({
            enabled: flagData["enabled"],
            value: flagData["feature_state_value"] || flagData["value"],
            featureId: flagData["feature"]["id"],
            featureName: flagData["feature"]["name"]
          });
        };
        return Flag2;
      }(BaseFlag)
    );
    exports.Flag = Flag;
    var Flags2 = (
      /** @class */
      function() {
        function Flags3(data) {
          this.flags = {};
          this.flags = data.flags;
          this.defaultFlagHandler = data.defaultFlagHandler;
          this.analyticsProcessor = data.analyticsProcessor;
        }
        Flags3.fromFeatureStateModels = function(data) {
          var e_1, _a;
          var flags = {};
          try {
            for (var _b = __values(data.featureStates), _c = _b.next(); !_c.done; _c = _b.next()) {
              var fs = _c.value;
              flags[fs.feature.name] = Flag.fromFeatureStateModel(fs, data.identityID);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return))
                _a.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return new Flags3({
            flags,
            defaultFlagHandler: data.defaultFlagHandler,
            analyticsProcessor: data.analyticsProcessor
          });
        };
        Flags3.fromAPIFlags = function(data) {
          var e_2, _a;
          var flags = {};
          try {
            for (var _b = __values(data.apiFlags), _c = _b.next(); !_c.done; _c = _b.next()) {
              var flagData = _c.value;
              flags[flagData["feature"]["name"]] = Flag.fromAPIFlag(flagData);
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return))
                _a.call(_b);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
          return new Flags3({
            flags,
            defaultFlagHandler: data.defaultFlagHandler,
            analyticsProcessor: data.analyticsProcessor
          });
        };
        Flags3.prototype.allFlags = function() {
          return Object.values(this.flags);
        };
        Flags3.prototype.getFlag = function(featureName) {
          var flag = this.flags[featureName];
          if (!flag) {
            if (this.defaultFlagHandler) {
              return this.defaultFlagHandler(featureName);
            }
            return { enabled: false, isDefault: true, value: void 0 };
          }
          if (this.analyticsProcessor && flag.featureId) {
            this.analyticsProcessor.trackFeature(flag.featureName);
          }
          return flag;
        };
        Flags3.prototype.getFeatureValue = function(featureName) {
          return this.getFlag(featureName).value;
        };
        Flags3.prototype.isFeatureEnabled = function(featureName) {
          return this.getFlag(featureName).enabled;
        };
        return Flags3;
      }()
    );
    exports.Flags = Flags2;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/sdk/polling_manager.js
var require_polling_manager = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/sdk/polling_manager.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnvironmentDataPollingManager = void 0;
    var EnvironmentDataPollingManager = (
      /** @class */
      function() {
        function EnvironmentDataPollingManager2(main, refreshIntervalSeconds) {
          this.main = main;
          this.refreshIntervalSeconds = refreshIntervalSeconds;
        }
        EnvironmentDataPollingManager2.prototype.start = function() {
          var _this = this;
          var updateEnvironment = function() {
            if (_this.interval)
              clearInterval(_this.interval);
            _this.interval = setInterval(function() {
              return __awaiter(_this, void 0, void 0, function() {
                return __generator(this, function(_a) {
                  switch (_a.label) {
                    case 0:
                      return [4, this.main.updateEnvironment()];
                    case 1:
                      _a.sent();
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              });
            }, _this.refreshIntervalSeconds * 1e3);
          };
          this.main.updateEnvironment();
          updateEnvironment();
        };
        EnvironmentDataPollingManager2.prototype.stop = function() {
          if (!this.interval) {
            return;
          }
          clearInterval(this.interval);
        };
        return EnvironmentDataPollingManager2;
      }()
    );
    exports.EnvironmentDataPollingManager = EnvironmentDataPollingManager;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/sdk/utils.js
var require_utils2 = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/sdk/utils.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retryFetch = exports.delay = exports.generateIdentitiesData = void 0;
    var node_fetch_1 = __importDefault(require_browser());
    if (typeof node_fetch_1.default.default !== "undefined")
      node_fetch_1.default = node_fetch_1.default.default;
    function generateIdentitiesData(identifier, traits) {
      var traitsGenerated = Object.entries(traits).map(function(trait) {
        return {
          trait_key: trait[0],
          trait_value: trait[1]
        };
      });
      return {
        identifier,
        traits: traitsGenerated
      };
    }
    exports.generateIdentitiesData = generateIdentitiesData;
    var delay = function(ms) {
      return new Promise(function(resolve) {
        return setTimeout(function() {
          return resolve(void 0);
        }, ms);
      });
    };
    exports.delay = delay;
    var retryFetch = function(url, fetchOptions, retries, timeout) {
      if (retries === void 0) {
        retries = 3;
      }
      if (timeout === void 0) {
        timeout = 10;
      }
      return new Promise(function(resolve, reject) {
        var retryWrapper = function(n) {
          requestWrapper().then(function(res) {
            return resolve(res);
          }).catch(function(err) {
            return __awaiter(void 0, void 0, void 0, function() {
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (!(n > 0))
                      return [3, 2];
                    return [4, (0, exports.delay)(1e3)];
                  case 1:
                    _a.sent();
                    retryWrapper(--n);
                    return [3, 3];
                  case 2:
                    reject(err);
                    _a.label = 3;
                  case 3:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          });
        };
        var requestWrapper = function() {
          return new Promise(function(resolve2, reject2) {
            if (timeout)
              setTimeout(function() {
                return reject2("error: timeout");
              }, timeout);
            return (0, node_fetch_1.default)(url, fetchOptions).then(function(res) {
              return resolve2(res);
            }).catch(function(err) {
              return reject2(err);
            });
          });
        };
        retryWrapper(retries);
      });
    };
    exports.retryFetch = retryFetch;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/sdk/index.js
var require_sdk = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/sdk/index.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f2, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f2)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f2 = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Flagsmith = exports.EnvironmentDataPollingManager = exports.Flags = exports.DefaultFlag = exports.FlagsmithClientError = exports.FlagsmithAPIError = exports.AnalyticsProcessor = void 0;
    var flagsmith_engine_1 = require_flagsmith_engine();
    var util_1 = require_util5();
    var models_1 = require_models4();
    var models_2 = require_models5();
    var analytics_1 = require_analytics();
    var errors_1 = require_errors2();
    var models_3 = require_models9();
    var polling_manager_1 = require_polling_manager();
    var utils_1 = require_utils2();
    var evaluators_1 = require_evaluators();
    var pino_1 = __importDefault(require_browser2());
    var analytics_2 = require_analytics();
    Object.defineProperty(exports, "AnalyticsProcessor", { enumerable: true, get: function() {
      return analytics_2.AnalyticsProcessor;
    } });
    var errors_2 = require_errors2();
    Object.defineProperty(exports, "FlagsmithAPIError", { enumerable: true, get: function() {
      return errors_2.FlagsmithAPIError;
    } });
    Object.defineProperty(exports, "FlagsmithClientError", { enumerable: true, get: function() {
      return errors_2.FlagsmithClientError;
    } });
    var models_4 = require_models9();
    Object.defineProperty(exports, "DefaultFlag", { enumerable: true, get: function() {
      return models_4.DefaultFlag;
    } });
    Object.defineProperty(exports, "Flags", { enumerable: true, get: function() {
      return models_4.Flags;
    } });
    var polling_manager_2 = require_polling_manager();
    Object.defineProperty(exports, "EnvironmentDataPollingManager", { enumerable: true, get: function() {
      return polling_manager_2.EnvironmentDataPollingManager;
    } });
    var DEFAULT_API_URL = "https://edge.api.flagsmith.com/api/v1/";
    var DEFAULT_REQUEST_TIMEOUT_SECONDS = 10;
    var Flagsmith2 = (
      /** @class */
      function() {
        function Flagsmith3(data) {
          if (data === void 0) {
            data = {};
          }
          var _a;
          this.environmentKey = void 0;
          this.apiUrl = void 0;
          this.enableLocalEvaluation = false;
          this.environmentRefreshIntervalSeconds = 60;
          this.enableAnalytics = false;
          this.offlineMode = false;
          this.offlineHandler = void 0;
          this.agent = data.agent;
          this.environmentKey = data.environmentKey;
          this.apiUrl = data.apiUrl || this.apiUrl;
          this.customHeaders = data.customHeaders;
          this.requestTimeoutMs = 1e3 * ((_a = data.requestTimeoutSeconds) !== null && _a !== void 0 ? _a : DEFAULT_REQUEST_TIMEOUT_SECONDS);
          this.enableLocalEvaluation = data.enableLocalEvaluation;
          this.environmentRefreshIntervalSeconds = data.environmentRefreshIntervalSeconds || this.environmentRefreshIntervalSeconds;
          this.retries = data.retries;
          this.enableAnalytics = data.enableAnalytics || false;
          this.defaultFlagHandler = data.defaultFlagHandler;
          this.onEnvironmentChange = data.onEnvironmentChange;
          this.logger = data.logger || (0, pino_1.default)();
          this.offlineMode = data.offlineMode || false;
          this.offlineHandler = data.offlineHandler;
          if (this.offlineMode && !this.offlineHandler) {
            throw new Error("ValueError: offlineHandler must be provided to use offline mode.");
          } else if (this.defaultFlagHandler && this.offlineHandler) {
            throw new Error("ValueError: Cannot use both defaultFlagHandler and offlineHandler.");
          }
          if (this.offlineHandler) {
            this.environment = this.offlineHandler.getEnvironment();
          }
          if (!!data.cache) {
            var missingMethods = ["has", "get", "set"].filter(function(method) {
              return data.cache && !data.cache[method];
            });
            if (missingMethods.length > 0) {
              throw new Error("Please implement the following methods in your cache: ".concat(missingMethods.join(", ")));
            }
            this.cache = data.cache;
          }
          if (!this.offlineMode) {
            if (!this.environmentKey) {
              throw new Error("ValueError: environmentKey is required.");
            }
            var apiUrl = data.apiUrl || DEFAULT_API_URL;
            this.apiUrl = apiUrl.endsWith("/") ? apiUrl : "".concat(apiUrl, "/");
            this.environmentFlagsUrl = "".concat(this.apiUrl, "flags/");
            this.identitiesUrl = "".concat(this.apiUrl, "identities/");
            this.environmentUrl = "".concat(this.apiUrl, "environment-document/");
            if (this.enableLocalEvaluation) {
              if (!this.environmentKey.startsWith("ser.")) {
                console.error("In order to use local evaluation, please generate a server key in the environment settings page.");
              }
              this.environmentDataPollingManager = new polling_manager_1.EnvironmentDataPollingManager(this, this.environmentRefreshIntervalSeconds);
              this.environmentDataPollingManager.start();
              this.updateEnvironment();
            }
            this.analyticsProcessor = data.enableAnalytics ? new analytics_1.AnalyticsProcessor({
              environmentKey: this.environmentKey,
              baseApiUrl: this.apiUrl,
              requestTimeoutMs: this.requestTimeoutMs,
              logger: this.logger
            }) : void 0;
          }
        }
        Flagsmith3.prototype.getEnvironmentFlags = function() {
          return __awaiter(this, void 0, void 0, function() {
            var cachedItem, _a;
            var _this = this;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  _a = !!this.cache;
                  if (!_a)
                    return [3, 2];
                  return [4, this.cache.get("flags")];
                case 1:
                  _a = _b.sent();
                  _b.label = 2;
                case 2:
                  cachedItem = _a;
                  if (!!cachedItem) {
                    return [2, cachedItem];
                  }
                  if (this.enableLocalEvaluation && !this.offlineMode) {
                    return [2, new Promise(function(resolve, reject) {
                      return _this.environmentPromise.then(function() {
                        resolve(_this.getEnvironmentFlagsFromDocument());
                      }).catch(function(e) {
                        return reject(e);
                      });
                    })];
                  }
                  if (this.environment) {
                    return [2, this.getEnvironmentFlagsFromDocument()];
                  }
                  return [2, this.getEnvironmentFlagsFromApi()];
              }
            });
          });
        };
        Flagsmith3.prototype.getIdentityFlags = function(identifier, traits) {
          return __awaiter(this, void 0, void 0, function() {
            var cachedItem, _a;
            var _this = this;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  if (!identifier) {
                    throw new Error("`identifier` argument is missing or invalid.");
                  }
                  _a = !!this.cache;
                  if (!_a)
                    return [3, 2];
                  return [4, this.cache.get("flags-".concat(identifier))];
                case 1:
                  _a = _b.sent();
                  _b.label = 2;
                case 2:
                  cachedItem = _a;
                  if (!!cachedItem) {
                    return [2, cachedItem];
                  }
                  traits = traits || {};
                  if (this.enableLocalEvaluation) {
                    return [2, new Promise(function(resolve, reject) {
                      return _this.environmentPromise.then(function() {
                        resolve(_this.getIdentityFlagsFromDocument(identifier, traits || {}));
                      }).catch(function(e) {
                        return reject(e);
                      });
                    })];
                  }
                  if (this.offlineMode) {
                    return [2, this.getIdentityFlagsFromDocument(identifier, traits || {})];
                  }
                  return [2, this.getIdentityFlagsFromApi(identifier, traits)];
              }
            });
          });
        };
        Flagsmith3.prototype.getIdentitySegments = function(identifier, traits) {
          var _this = this;
          if (!identifier) {
            throw new Error("`identifier` argument is missing or invalid.");
          }
          traits = traits || {};
          if (this.enableLocalEvaluation) {
            return new Promise(function(resolve, reject) {
              return _this.environmentPromise.then(function() {
                var identityModel = _this.buildIdentityModel(identifier, Object.keys(traits || {}).map(function(key) {
                  return {
                    key,
                    value: traits === null || traits === void 0 ? void 0 : traits[key]
                  };
                }));
                var segments = (0, evaluators_1.getIdentitySegments)(_this.environment, identityModel);
                return resolve(segments);
              }).catch(function(e) {
                return reject(e);
              });
            });
          }
          console.error("This function is only permitted with local evaluation.");
          return Promise.resolve([]);
        };
        Flagsmith3.prototype.updateEnvironment = function() {
          return __awaiter(this, void 0, void 0, function() {
            var request, _a, e_1;
            var _this = this;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  _b.trys.push([0, 5, , 6]);
                  request = this.getEnvironmentFromApi();
                  if (!!this.environmentPromise)
                    return [3, 2];
                  this.environmentPromise = request.then(function(res) {
                    _this.environment = res;
                  });
                  return [4, this.environmentPromise];
                case 1:
                  _b.sent();
                  return [3, 4];
                case 2:
                  _a = this;
                  return [4, request];
                case 3:
                  _a.environment = _b.sent();
                  _b.label = 4;
                case 4:
                  if (this.onEnvironmentChange) {
                    this.onEnvironmentChange(null, this.environment);
                  }
                  return [3, 6];
                case 5:
                  e_1 = _b.sent();
                  if (this.onEnvironmentChange) {
                    this.onEnvironmentChange(e_1, this.environment);
                  }
                  return [3, 6];
                case 6:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        Flagsmith3.prototype.close = function() {
          var _a;
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_b) {
              (_a = this.environmentDataPollingManager) === null || _a === void 0 ? void 0 : _a.stop();
              return [
                2
                /*return*/
              ];
            });
          });
        };
        Flagsmith3.prototype.getJSONResponse = function(url, method, body) {
          return __awaiter(this, void 0, void 0, function() {
            var headers, _a, _b, _c, k, v, data;
            var e_2, _d;
            return __generator(this, function(_e) {
              switch (_e.label) {
                case 0:
                  headers = { "Content-Type": "application/json" };
                  if (this.environmentKey) {
                    headers["X-Environment-Key"] = this.environmentKey;
                  }
                  if (this.customHeaders) {
                    try {
                      for (_a = __values(Object.entries(this.customHeaders)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        _c = __read(_b.value, 2), k = _c[0], v = _c[1];
                        headers[k] = v;
                      }
                    } catch (e_2_1) {
                      e_2 = { error: e_2_1 };
                    } finally {
                      try {
                        if (_b && !_b.done && (_d = _a.return))
                          _d.call(_a);
                      } finally {
                        if (e_2)
                          throw e_2.error;
                      }
                    }
                  }
                  return [4, (0, utils_1.retryFetch)(url, {
                    agent: this.agent,
                    method,
                    body: JSON.stringify(body),
                    headers
                  }, this.retries, this.requestTimeoutMs || void 0)];
                case 1:
                  data = _e.sent();
                  if (data.status !== 200) {
                    throw new errors_1.FlagsmithAPIError("Invalid request made to Flagsmith API. Response status code: ".concat(data.status));
                  }
                  return [2, data.json()];
              }
            });
          });
        };
        Flagsmith3.prototype.getEnvironmentFromApi = function() {
          return __awaiter(this, void 0, void 0, function() {
            var environment_data;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.environmentUrl) {
                    throw new Error("`apiUrl` argument is missing or invalid.");
                  }
                  return [4, this.getJSONResponse(this.environmentUrl, "GET")];
                case 1:
                  environment_data = _a.sent();
                  return [2, (0, util_1.buildEnvironmentModel)(environment_data)];
              }
            });
          });
        };
        Flagsmith3.prototype.getEnvironmentFlagsFromDocument = function() {
          return __awaiter(this, void 0, void 0, function() {
            var flags;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  flags = models_3.Flags.fromFeatureStateModels({
                    featureStates: (0, flagsmith_engine_1.getEnvironmentFeatureStates)(this.environment),
                    analyticsProcessor: this.analyticsProcessor,
                    defaultFlagHandler: this.defaultFlagHandler
                  });
                  if (!!!this.cache)
                    return [3, 2];
                  return [4, this.cache.set("flags", flags)];
                case 1:
                  _a.sent();
                  _a.label = 2;
                case 2:
                  return [2, flags];
              }
            });
          });
        };
        Flagsmith3.prototype.getIdentityFlagsFromDocument = function(identifier, traits) {
          return __awaiter(this, void 0, void 0, function() {
            var identityModel, featureStates, flags;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  identityModel = this.buildIdentityModel(identifier, Object.keys(traits).map(function(key) {
                    return {
                      key,
                      value: traits[key]
                    };
                  }));
                  featureStates = (0, flagsmith_engine_1.getIdentityFeatureStates)(this.environment, identityModel);
                  flags = models_3.Flags.fromFeatureStateModels({
                    featureStates,
                    analyticsProcessor: this.analyticsProcessor,
                    defaultFlagHandler: this.defaultFlagHandler,
                    identityID: identityModel.djangoID || identityModel.compositeKey
                  });
                  if (!!!this.cache)
                    return [3, 2];
                  return [4, this.cache.set("flags-".concat(identifier), flags)];
                case 1:
                  _a.sent();
                  _a.label = 2;
                case 2:
                  return [2, flags];
              }
            });
          });
        };
        Flagsmith3.prototype.getEnvironmentFlagsFromApi = function() {
          return __awaiter(this, void 0, void 0, function() {
            var apiFlags, flags, e_3;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.environmentFlagsUrl) {
                    throw new Error("`apiUrl` argument is missing or invalid.");
                  }
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 5, , 6]);
                  return [4, this.getJSONResponse(this.environmentFlagsUrl, "GET")];
                case 2:
                  apiFlags = _a.sent();
                  flags = models_3.Flags.fromAPIFlags({
                    apiFlags,
                    analyticsProcessor: this.analyticsProcessor,
                    defaultFlagHandler: this.defaultFlagHandler
                  });
                  if (!!!this.cache)
                    return [3, 4];
                  return [4, this.cache.set("flags", flags)];
                case 3:
                  _a.sent();
                  _a.label = 4;
                case 4:
                  return [2, flags];
                case 5:
                  e_3 = _a.sent();
                  if (this.offlineHandler) {
                    return [2, this.getEnvironmentFlagsFromDocument()];
                  }
                  if (this.defaultFlagHandler) {
                    return [2, new models_3.Flags({
                      flags: {},
                      defaultFlagHandler: this.defaultFlagHandler
                    })];
                  }
                  throw e_3;
                case 6:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        Flagsmith3.prototype.getIdentityFlagsFromApi = function(identifier, traits) {
          return __awaiter(this, void 0, void 0, function() {
            var data, jsonResponse, flags, e_4;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.identitiesUrl) {
                    throw new Error("`apiUrl` argument is missing or invalid.");
                  }
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 5, , 6]);
                  data = (0, utils_1.generateIdentitiesData)(identifier, traits);
                  return [4, this.getJSONResponse(this.identitiesUrl, "POST", data)];
                case 2:
                  jsonResponse = _a.sent();
                  flags = models_3.Flags.fromAPIFlags({
                    apiFlags: jsonResponse["flags"],
                    analyticsProcessor: this.analyticsProcessor,
                    defaultFlagHandler: this.defaultFlagHandler
                  });
                  if (!!!this.cache)
                    return [3, 4];
                  return [4, this.cache.set("flags-".concat(identifier), flags)];
                case 3:
                  _a.sent();
                  _a.label = 4;
                case 4:
                  return [2, flags];
                case 5:
                  e_4 = _a.sent();
                  if (this.offlineHandler) {
                    return [2, this.getIdentityFlagsFromDocument(identifier, traits)];
                  }
                  if (this.defaultFlagHandler) {
                    return [2, new models_3.Flags({
                      flags: {},
                      defaultFlagHandler: this.defaultFlagHandler
                    })];
                  }
                  throw e_4;
                case 6:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        Flagsmith3.prototype.buildIdentityModel = function(identifier, traits) {
          var traitModels = traits.map(function(trait) {
            return new models_2.TraitModel(trait.key, trait.value);
          });
          return new models_1.IdentityModel("0", traitModels, [], this.environment.apiKey, identifier);
        };
        return Flagsmith3;
      }()
    );
    exports.Flagsmith = Flagsmith2;
    exports.default = Flagsmith2;
  }
});

// node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/index.js
var require_build = __commonJS({
  "node_modules/.pnpm/flagsmith-nodejs@3.2.0/node_modules/flagsmith-nodejs/build/index.js"(exports, module2) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OrganisationModel = exports.SegmentModel = exports.TraitModel = exports.IdentityModel = exports.FeatureStateModel = exports.IntegrationModel = exports.EnvironmentModel = exports.default = exports.Flags = exports.DefaultFlag = exports.EnvironmentDataPollingManager = exports.FlagsmithClientError = exports.FlagsmithAPIError = exports.AnalyticsProcessor = void 0;
    var sdk_1 = __importDefault(require_sdk());
    var sdk_2 = require_sdk();
    Object.defineProperty(exports, "AnalyticsProcessor", { enumerable: true, get: function() {
      return sdk_2.AnalyticsProcessor;
    } });
    Object.defineProperty(exports, "FlagsmithAPIError", { enumerable: true, get: function() {
      return sdk_2.FlagsmithAPIError;
    } });
    Object.defineProperty(exports, "FlagsmithClientError", { enumerable: true, get: function() {
      return sdk_2.FlagsmithClientError;
    } });
    Object.defineProperty(exports, "EnvironmentDataPollingManager", { enumerable: true, get: function() {
      return sdk_2.EnvironmentDataPollingManager;
    } });
    Object.defineProperty(exports, "DefaultFlag", { enumerable: true, get: function() {
      return sdk_2.DefaultFlag;
    } });
    Object.defineProperty(exports, "Flags", { enumerable: true, get: function() {
      return sdk_2.Flags;
    } });
    Object.defineProperty(exports, "default", { enumerable: true, get: function() {
      return __importDefault(sdk_2).default;
    } });
    var flagsmith_engine_1 = require_flagsmith_engine();
    Object.defineProperty(exports, "EnvironmentModel", { enumerable: true, get: function() {
      return flagsmith_engine_1.EnvironmentModel;
    } });
    Object.defineProperty(exports, "IntegrationModel", { enumerable: true, get: function() {
      return flagsmith_engine_1.IntegrationModel;
    } });
    Object.defineProperty(exports, "FeatureStateModel", { enumerable: true, get: function() {
      return flagsmith_engine_1.FeatureStateModel;
    } });
    Object.defineProperty(exports, "IdentityModel", { enumerable: true, get: function() {
      return flagsmith_engine_1.IdentityModel;
    } });
    Object.defineProperty(exports, "TraitModel", { enumerable: true, get: function() {
      return flagsmith_engine_1.TraitModel;
    } });
    Object.defineProperty(exports, "SegmentModel", { enumerable: true, get: function() {
      return flagsmith_engine_1.SegmentModel;
    } });
    Object.defineProperty(exports, "OrganisationModel", { enumerable: true, get: function() {
      return flagsmith_engine_1.OrganisationModel;
    } });
    module2.exports = sdk_1.default;
  }
});

// node_modules/.pnpm/platform@1.3.6/node_modules/platform/platform.js
var require_platform = __commonJS({
  "node_modules/.pnpm/platform@1.3.6/node_modules/platform/platform.js"(exports, module2) {
    (function() {
      "use strict";
      var objectTypes = {
        "function": true,
        "object": true
      };
      var root = objectTypes[typeof window] && window || this;
      var oldRoot = root;
      var freeExports = objectTypes[typeof exports] && exports;
      var freeModule = objectTypes[typeof module2] && module2 && !module2.nodeType && module2;
      var freeGlobal = freeExports && freeModule && typeof global == "object" && global;
      if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
        root = freeGlobal;
      }
      var maxSafeInteger = Math.pow(2, 53) - 1;
      var reOpera = /\bOpera/;
      var thisBinding = this;
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var toString = objectProto.toString;
      function capitalize(string) {
        string = String(string);
        return string.charAt(0).toUpperCase() + string.slice(1);
      }
      function cleanupOS(os, pattern, label) {
        var data = {
          "10.0": "10",
          "6.4": "10 Technical Preview",
          "6.3": "8.1",
          "6.2": "8",
          "6.1": "Server 2008 R2 / 7",
          "6.0": "Server 2008 / Vista",
          "5.2": "Server 2003 / XP 64-bit",
          "5.1": "XP",
          "5.01": "2000 SP1",
          "5.0": "2000",
          "4.0": "NT",
          "4.90": "ME"
        };
        if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) && (data = data[/[\d.]+$/.exec(os)])) {
          os = "Windows " + data;
        }
        os = String(os);
        if (pattern && label) {
          os = os.replace(RegExp(pattern, "i"), label);
        }
        os = format(
          os.replace(/ ce$/i, " CE").replace(/\bhpw/i, "web").replace(/\bMacintosh\b/, "Mac OS").replace(/_PowerPC\b/i, " OS").replace(/\b(OS X) [^ \d]+/i, "$1").replace(/\bMac (OS X)\b/, "$1").replace(/\/(\d)/, " $1").replace(/_/g, ".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, "").replace(/\bx86\.64\b/gi, "x86_64").replace(/\b(Windows Phone) OS\b/, "$1").replace(/\b(Chrome OS \w+) [\d.]+\b/, "$1").split(" on ")[0]
        );
        return os;
      }
      function each(object, callback) {
        var index = -1, length = object ? object.length : 0;
        if (typeof length == "number" && length > -1 && length <= maxSafeInteger) {
          while (++index < length) {
            callback(object[index], index, object);
          }
        } else {
          forOwn(object, callback);
        }
      }
      function format(string) {
        string = trim(string);
        return /^(?:webOS|i(?:OS|P))/.test(string) ? string : capitalize(string);
      }
      function forOwn(object, callback) {
        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            callback(object[key], key, object);
          }
        }
      }
      function getClassOf(value) {
        return value == null ? capitalize(value) : toString.call(value).slice(8, -1);
      }
      function isHostType(object, property) {
        var type = object != null ? typeof object[property] : "number";
        return !/^(?:boolean|number|string|undefined)$/.test(type) && (type == "object" ? !!object[property] : true);
      }
      function qualify(string) {
        return String(string).replace(/([ -])(?!$)/g, "$1?");
      }
      function reduce(array, callback) {
        var accumulator = null;
        each(array, function(value, index) {
          accumulator = callback(accumulator, value, index, array);
        });
        return accumulator;
      }
      function trim(string) {
        return String(string).replace(/^ +| +$/g, "");
      }
      function parse2(ua) {
        var context = root;
        var isCustomContext = ua && typeof ua == "object" && getClassOf(ua) != "String";
        if (isCustomContext) {
          context = ua;
          ua = null;
        }
        var nav = context.navigator || {};
        var userAgent = nav.userAgent || "";
        ua || (ua = userAgent);
        var isModuleScope = isCustomContext || thisBinding == oldRoot;
        var likeChrome = isCustomContext ? !!nav.likeChrome : /\bChrome\b/.test(ua) && !/internal|\n/i.test(toString.toString());
        var objectClass = "Object", airRuntimeClass = isCustomContext ? objectClass : "ScriptBridgingProxyObject", enviroClass = isCustomContext ? objectClass : "Environment", javaClass = isCustomContext && context.java ? "JavaPackage" : getClassOf(context.java), phantomClass = isCustomContext ? objectClass : "RuntimeObject";
        var java = /\bJava/.test(javaClass) && context.java;
        var rhino = java && getClassOf(context.environment) == enviroClass;
        var alpha = java ? "a" : "\u03B1";
        var beta = java ? "b" : "\u03B2";
        var doc = context.document || {};
        var opera = context.operamini || context.opera;
        var operaClass = reOpera.test(operaClass = isCustomContext && opera ? opera["[[Class]]"] : getClassOf(opera)) ? operaClass : opera = null;
        var data;
        var arch = ua;
        var description = [];
        var prerelease = null;
        var useFeatures = ua == userAgent;
        var version2 = useFeatures && opera && typeof opera.version == "function" && opera.version();
        var isSpecialCasedOS;
        var layout = getLayout([
          { "label": "EdgeHTML", "pattern": "Edge" },
          "Trident",
          { "label": "WebKit", "pattern": "AppleWebKit" },
          "iCab",
          "Presto",
          "NetFront",
          "Tasman",
          "KHTML",
          "Gecko"
        ]);
        var name = getName([
          "Adobe AIR",
          "Arora",
          "Avant Browser",
          "Breach",
          "Camino",
          "Electron",
          "Epiphany",
          "Fennec",
          "Flock",
          "Galeon",
          "GreenBrowser",
          "iCab",
          "Iceweasel",
          "K-Meleon",
          "Konqueror",
          "Lunascape",
          "Maxthon",
          { "label": "Microsoft Edge", "pattern": "(?:Edge|Edg|EdgA|EdgiOS)" },
          "Midori",
          "Nook Browser",
          "PaleMoon",
          "PhantomJS",
          "Raven",
          "Rekonq",
          "RockMelt",
          { "label": "Samsung Internet", "pattern": "SamsungBrowser" },
          "SeaMonkey",
          { "label": "Silk", "pattern": "(?:Cloud9|Silk-Accelerated)" },
          "Sleipnir",
          "SlimBrowser",
          { "label": "SRWare Iron", "pattern": "Iron" },
          "Sunrise",
          "Swiftfox",
          "Vivaldi",
          "Waterfox",
          "WebPositive",
          { "label": "Yandex Browser", "pattern": "YaBrowser" },
          { "label": "UC Browser", "pattern": "UCBrowser" },
          "Opera Mini",
          { "label": "Opera Mini", "pattern": "OPiOS" },
          "Opera",
          { "label": "Opera", "pattern": "OPR" },
          "Chromium",
          "Chrome",
          { "label": "Chrome", "pattern": "(?:HeadlessChrome)" },
          { "label": "Chrome Mobile", "pattern": "(?:CriOS|CrMo)" },
          { "label": "Firefox", "pattern": "(?:Firefox|Minefield)" },
          { "label": "Firefox for iOS", "pattern": "FxiOS" },
          { "label": "IE", "pattern": "IEMobile" },
          { "label": "IE", "pattern": "MSIE" },
          "Safari"
        ]);
        var product = getProduct([
          { "label": "BlackBerry", "pattern": "BB10" },
          "BlackBerry",
          { "label": "Galaxy S", "pattern": "GT-I9000" },
          { "label": "Galaxy S2", "pattern": "GT-I9100" },
          { "label": "Galaxy S3", "pattern": "GT-I9300" },
          { "label": "Galaxy S4", "pattern": "GT-I9500" },
          { "label": "Galaxy S5", "pattern": "SM-G900" },
          { "label": "Galaxy S6", "pattern": "SM-G920" },
          { "label": "Galaxy S6 Edge", "pattern": "SM-G925" },
          { "label": "Galaxy S7", "pattern": "SM-G930" },
          { "label": "Galaxy S7 Edge", "pattern": "SM-G935" },
          "Google TV",
          "Lumia",
          "iPad",
          "iPod",
          "iPhone",
          "Kindle",
          { "label": "Kindle Fire", "pattern": "(?:Cloud9|Silk-Accelerated)" },
          "Nexus",
          "Nook",
          "PlayBook",
          "PlayStation Vita",
          "PlayStation",
          "TouchPad",
          "Transformer",
          { "label": "Wii U", "pattern": "WiiU" },
          "Wii",
          "Xbox One",
          { "label": "Xbox 360", "pattern": "Xbox" },
          "Xoom"
        ]);
        var manufacturer = getManufacturer({
          "Apple": { "iPad": 1, "iPhone": 1, "iPod": 1 },
          "Alcatel": {},
          "Archos": {},
          "Amazon": { "Kindle": 1, "Kindle Fire": 1 },
          "Asus": { "Transformer": 1 },
          "Barnes & Noble": { "Nook": 1 },
          "BlackBerry": { "PlayBook": 1 },
          "Google": { "Google TV": 1, "Nexus": 1 },
          "HP": { "TouchPad": 1 },
          "HTC": {},
          "Huawei": {},
          "Lenovo": {},
          "LG": {},
          "Microsoft": { "Xbox": 1, "Xbox One": 1 },
          "Motorola": { "Xoom": 1 },
          "Nintendo": { "Wii U": 1, "Wii": 1 },
          "Nokia": { "Lumia": 1 },
          "Oppo": {},
          "Samsung": { "Galaxy S": 1, "Galaxy S2": 1, "Galaxy S3": 1, "Galaxy S4": 1 },
          "Sony": { "PlayStation": 1, "PlayStation Vita": 1 },
          "Xiaomi": { "Mi": 1, "Redmi": 1 }
        });
        var os = getOS([
          "Windows Phone",
          "KaiOS",
          "Android",
          "CentOS",
          { "label": "Chrome OS", "pattern": "CrOS" },
          "Debian",
          { "label": "DragonFly BSD", "pattern": "DragonFly" },
          "Fedora",
          "FreeBSD",
          "Gentoo",
          "Haiku",
          "Kubuntu",
          "Linux Mint",
          "OpenBSD",
          "Red Hat",
          "SuSE",
          "Ubuntu",
          "Xubuntu",
          "Cygwin",
          "Symbian OS",
          "hpwOS",
          "webOS ",
          "webOS",
          "Tablet OS",
          "Tizen",
          "Linux",
          "Mac OS X",
          "Macintosh",
          "Mac",
          "Windows 98;",
          "Windows "
        ]);
        function getLayout(guesses) {
          return reduce(guesses, function(result, guess) {
            return result || RegExp("\\b" + (guess.pattern || qualify(guess)) + "\\b", "i").exec(ua) && (guess.label || guess);
          });
        }
        function getManufacturer(guesses) {
          return reduce(guesses, function(result, value, key) {
            return result || (value[product] || value[/^[a-z]+(?: +[a-z]+\b)*/i.exec(product)] || RegExp("\\b" + qualify(key) + "(?:\\b|\\w*\\d)", "i").exec(ua)) && key;
          });
        }
        function getName(guesses) {
          return reduce(guesses, function(result, guess) {
            return result || RegExp("\\b" + (guess.pattern || qualify(guess)) + "\\b", "i").exec(ua) && (guess.label || guess);
          });
        }
        function getOS(guesses) {
          return reduce(guesses, function(result, guess) {
            var pattern = guess.pattern || qualify(guess);
            if (!result && (result = RegExp("\\b" + pattern + "(?:/[\\d.]+|[ \\w.]*)", "i").exec(ua))) {
              result = cleanupOS(result, pattern, guess.label || guess);
            }
            return result;
          });
        }
        function getProduct(guesses) {
          return reduce(guesses, function(result, guess) {
            var pattern = guess.pattern || qualify(guess);
            if (!result && (result = RegExp("\\b" + pattern + " *\\d+[.\\w_]*", "i").exec(ua) || RegExp("\\b" + pattern + " *\\w+-[\\w]*", "i").exec(ua) || RegExp("\\b" + pattern + "(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)", "i").exec(ua))) {
              if ((result = String(guess.label && !RegExp(pattern, "i").test(guess.label) ? guess.label : result).split("/"))[1] && !/[\d.]+/.test(result[0])) {
                result[0] += " " + result[1];
              }
              guess = guess.label || guess;
              result = format(result[0].replace(RegExp(pattern, "i"), guess).replace(RegExp("; *(?:" + guess + "[_-])?", "i"), " ").replace(RegExp("(" + guess + ")[-_.]?(\\w)", "i"), "$1 $2"));
            }
            return result;
          });
        }
        function getVersion(patterns) {
          return reduce(patterns, function(result, pattern) {
            return result || (RegExp(pattern + "(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)", "i").exec(ua) || 0)[1] || null;
          });
        }
        function toStringPlatform() {
          return this.description || "";
        }
        layout && (layout = [layout]);
        if (/\bAndroid\b/.test(os) && !product && (data = /\bAndroid[^;]*;(.*?)(?:Build|\) AppleWebKit)\b/i.exec(ua))) {
          product = trim(data[1]).replace(/^[a-z]{2}-[a-z]{2};\s*/i, "") || null;
        }
        if (manufacturer && !product) {
          product = getProduct([manufacturer]);
        } else if (manufacturer && product) {
          product = product.replace(RegExp("^(" + qualify(manufacturer) + ")[-_.\\s]", "i"), manufacturer + " ").replace(RegExp("^(" + qualify(manufacturer) + ")[-_.]?(\\w)", "i"), manufacturer + " $2");
        }
        if (data = /\bGoogle TV\b/.exec(product)) {
          product = data[0];
        }
        if (/\bSimulator\b/i.test(ua)) {
          product = (product ? product + " " : "") + "Simulator";
        }
        if (name == "Opera Mini" && /\bOPiOS\b/.test(ua)) {
          description.push("running in Turbo/Uncompressed mode");
        }
        if (name == "IE" && /\blike iPhone OS\b/.test(ua)) {
          data = parse2(ua.replace(/like iPhone OS/, ""));
          manufacturer = data.manufacturer;
          product = data.product;
        } else if (/^iP/.test(product)) {
          name || (name = "Safari");
          os = "iOS" + ((data = / OS ([\d_]+)/i.exec(ua)) ? " " + data[1].replace(/_/g, ".") : "");
        } else if (name == "Konqueror" && /^Linux\b/i.test(os)) {
          os = "Kubuntu";
        } else if (manufacturer && manufacturer != "Google" && (/Chrome/.test(name) && !/\bMobile Safari\b/i.test(ua) || /\bVita\b/.test(product)) || /\bAndroid\b/.test(os) && /^Chrome/.test(name) && /\bVersion\//i.test(ua)) {
          name = "Android Browser";
          os = /\bAndroid\b/.test(os) ? os : "Android";
        } else if (name == "Silk") {
          if (!/\bMobi/i.test(ua)) {
            os = "Android";
            description.unshift("desktop mode");
          }
          if (/Accelerated *= *true/i.test(ua)) {
            description.unshift("accelerated");
          }
        } else if (name == "UC Browser" && /\bUCWEB\b/.test(ua)) {
          description.push("speed mode");
        } else if (name == "PaleMoon" && (data = /\bFirefox\/([\d.]+)\b/.exec(ua))) {
          description.push("identifying as Firefox " + data[1]);
        } else if (name == "Firefox" && (data = /\b(Mobile|Tablet|TV)\b/i.exec(ua))) {
          os || (os = "Firefox OS");
          product || (product = data[1]);
        } else if (!name || (data = !/\bMinefield\b/i.test(ua) && /\b(?:Firefox|Safari)\b/.exec(name))) {
          if (name && !product && /[\/,]|^[^(]+?\)/.test(ua.slice(ua.indexOf(data + "/") + 8))) {
            name = null;
          }
          if ((data = product || manufacturer || os) && (product || manufacturer || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(os))) {
            name = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(os) ? os : data) + " Browser";
          }
        } else if (name == "Electron" && (data = (/\bChrome\/([\d.]+)\b/.exec(ua) || 0)[1])) {
          description.push("Chromium " + data);
        }
        if (!version2) {
          version2 = getVersion([
            "(?:Cloud9|CriOS|CrMo|Edge|Edg|EdgA|EdgiOS|FxiOS|HeadlessChrome|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$)|UCBrowser|YaBrowser)",
            "Version",
            qualify(name),
            "(?:Firefox|Minefield|NetFront)"
          ]);
        }
        if (data = layout == "iCab" && parseFloat(version2) > 3 && "WebKit" || /\bOpera\b/.test(name) && (/\bOPR\b/.test(ua) ? "Blink" : "Presto") || /\b(?:Midori|Nook|Safari)\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && "WebKit" || !layout && /\bMSIE\b/i.test(ua) && (os == "Mac OS" ? "Tasman" : "Trident") || layout == "WebKit" && /\bPlayStation\b(?! Vita\b)/i.test(name) && "NetFront") {
          layout = [data];
        }
        if (name == "IE" && (data = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(ua) || 0)[1])) {
          name += " Mobile";
          os = "Windows Phone " + (/\+$/.test(data) ? data : data + ".x");
          description.unshift("desktop mode");
        } else if (/\bWPDesktop\b/i.test(ua)) {
          name = "IE Mobile";
          os = "Windows Phone 8.x";
          description.unshift("desktop mode");
          version2 || (version2 = (/\brv:([\d.]+)/.exec(ua) || 0)[1]);
        } else if (name != "IE" && layout == "Trident" && (data = /\brv:([\d.]+)/.exec(ua))) {
          if (name) {
            description.push("identifying as " + name + (version2 ? " " + version2 : ""));
          }
          name = "IE";
          version2 = data[1];
        }
        if (useFeatures) {
          if (isHostType(context, "global")) {
            if (java) {
              data = java.lang.System;
              arch = data.getProperty("os.arch");
              os = os || data.getProperty("os.name") + " " + data.getProperty("os.version");
            }
            if (rhino) {
              try {
                version2 = context.require("ringo/engine").version.join(".");
                name = "RingoJS";
              } catch (e) {
                if ((data = context.system) && data.global.system == context.system) {
                  name = "Narwhal";
                  os || (os = data[0].os || null);
                }
              }
              if (!name) {
                name = "Rhino";
              }
            } else if (typeof context.process == "object" && !context.process.browser && (data = context.process)) {
              if (typeof data.versions == "object") {
                if (typeof data.versions.electron == "string") {
                  description.push("Node " + data.versions.node);
                  name = "Electron";
                  version2 = data.versions.electron;
                } else if (typeof data.versions.nw == "string") {
                  description.push("Chromium " + version2, "Node " + data.versions.node);
                  name = "NW.js";
                  version2 = data.versions.nw;
                }
              }
              if (!name) {
                name = "Node.js";
                arch = data.arch;
                os = data.platform;
                version2 = /[\d.]+/.exec(data.version);
                version2 = version2 ? version2[0] : null;
              }
            }
          } else if (getClassOf(data = context.runtime) == airRuntimeClass) {
            name = "Adobe AIR";
            os = data.flash.system.Capabilities.os;
          } else if (getClassOf(data = context.phantom) == phantomClass) {
            name = "PhantomJS";
            version2 = (data = data.version || null) && data.major + "." + data.minor + "." + data.patch;
          } else if (typeof doc.documentMode == "number" && (data = /\bTrident\/(\d+)/i.exec(ua))) {
            version2 = [version2, doc.documentMode];
            if ((data = +data[1] + 4) != version2[1]) {
              description.push("IE " + version2[1] + " mode");
              layout && (layout[1] = "");
              version2[1] = data;
            }
            version2 = name == "IE" ? String(version2[1].toFixed(1)) : version2[0];
          } else if (typeof doc.documentMode == "number" && /^(?:Chrome|Firefox)\b/.test(name)) {
            description.push("masking as " + name + " " + version2);
            name = "IE";
            version2 = "11.0";
            layout = ["Trident"];
            os = "Windows";
          }
          os = os && format(os);
        }
        if (version2 && (data = /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(version2) || /(?:alpha|beta)(?: ?\d)?/i.exec(ua + ";" + (useFeatures && nav.appMinorVersion)) || /\bMinefield\b/i.test(ua) && "a")) {
          prerelease = /b/i.test(data) ? "beta" : "alpha";
          version2 = version2.replace(RegExp(data + "\\+?$"), "") + (prerelease == "beta" ? beta : alpha) + (/\d+\+?/.exec(data) || "");
        }
        if (name == "Fennec" || name == "Firefox" && /\b(?:Android|Firefox OS|KaiOS)\b/.test(os)) {
          name = "Firefox Mobile";
        } else if (name == "Maxthon" && version2) {
          version2 = version2.replace(/\.[\d.]+/, ".x");
        } else if (/\bXbox\b/i.test(product)) {
          if (product == "Xbox 360") {
            os = null;
          }
          if (product == "Xbox 360" && /\bIEMobile\b/.test(ua)) {
            description.unshift("mobile mode");
          }
        } else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) && (os == "Windows CE" || /Mobi/i.test(ua))) {
          name += " Mobile";
        } else if (name == "IE" && useFeatures) {
          try {
            if (context.external === null) {
              description.unshift("platform preview");
            }
          } catch (e) {
            description.unshift("embedded");
          }
        } else if ((/\bBlackBerry\b/.test(product) || /\bBB10\b/.test(ua)) && (data = (RegExp(product.replace(/ +/g, " *") + "/([.\\d]+)", "i").exec(ua) || 0)[1] || version2)) {
          data = [data, /BB10/.test(ua)];
          os = (data[1] ? (product = null, manufacturer = "BlackBerry") : "Device Software") + " " + data[0];
          version2 = null;
        } else if (this != forOwn && product != "Wii" && (useFeatures && opera || /Opera/.test(name) && /\b(?:MSIE|Firefox)\b/i.test(ua) || name == "Firefox" && /\bOS X (?:\d+\.){2,}/.test(os) || name == "IE" && (os && !/^Win/.test(os) && version2 > 5.5 || /\bWindows XP\b/.test(os) && version2 > 8 || version2 == 8 && !/\bTrident\b/.test(ua))) && !reOpera.test(data = parse2.call(forOwn, ua.replace(reOpera, "") + ";")) && data.name) {
          data = "ing as " + data.name + ((data = data.version) ? " " + data : "");
          if (reOpera.test(name)) {
            if (/\bIE\b/.test(data) && os == "Mac OS") {
              os = null;
            }
            data = "identify" + data;
          } else {
            data = "mask" + data;
            if (operaClass) {
              name = format(operaClass.replace(/([a-z])([A-Z])/g, "$1 $2"));
            } else {
              name = "Opera";
            }
            if (/\bIE\b/.test(data)) {
              os = null;
            }
            if (!useFeatures) {
              version2 = null;
            }
          }
          layout = ["Presto"];
          description.push(data);
        }
        if (data = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(ua) || 0)[1]) {
          data = [parseFloat(data.replace(/\.(\d)$/, ".0$1")), data];
          if (name == "Safari" && data[1].slice(-1) == "+") {
            name = "WebKit Nightly";
            prerelease = "alpha";
            version2 = data[1].slice(0, -1);
          } else if (version2 == data[1] || version2 == (data[2] = (/\bSafari\/([\d.]+\+?)/i.exec(ua) || 0)[1])) {
            version2 = null;
          }
          data[1] = (/\b(?:Headless)?Chrome\/([\d.]+)/i.exec(ua) || 0)[1];
          if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == "WebKit") {
            layout = ["Blink"];
          }
          if (!useFeatures || !likeChrome && !data[1]) {
            layout && (layout[1] = "like Safari");
            data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? "4+" : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : data < 602 ? 9 : data < 604 ? 10 : data < 606 ? 11 : data < 608 ? 12 : "12");
          } else {
            layout && (layout[1] = "like Chrome");
            data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.1 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.3 ? 11 : data < 535.01 ? 12 : data < 535.02 ? "13+" : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.1 ? 19 : data < 537.01 ? 20 : data < 537.11 ? "21+" : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != "Blink" ? "27" : "28");
          }
          layout && (layout[1] += " " + (data += typeof data == "number" ? ".x" : /[.+]/.test(data) ? "" : "+"));
          if (name == "Safari" && (!version2 || parseInt(version2) > 45)) {
            version2 = data;
          } else if (name == "Chrome" && /\bHeadlessChrome/i.test(ua)) {
            description.unshift("headless");
          }
        }
        if (name == "Opera" && (data = /\bzbov|zvav$/.exec(os))) {
          name += " ";
          description.unshift("desktop mode");
          if (data == "zvav") {
            name += "Mini";
            version2 = null;
          } else {
            name += "Mobile";
          }
          os = os.replace(RegExp(" *" + data + "$"), "");
        } else if (name == "Safari" && /\bChrome\b/.exec(layout && layout[1])) {
          description.unshift("desktop mode");
          name = "Chrome Mobile";
          version2 = null;
          if (/\bOS X\b/.test(os)) {
            manufacturer = "Apple";
            os = "iOS 4.3+";
          } else {
            os = null;
          }
        } else if (/\bSRWare Iron\b/.test(name) && !version2) {
          version2 = getVersion("Chrome");
        }
        if (version2 && version2.indexOf(data = /[\d.]+$/.exec(os)) == 0 && ua.indexOf("/" + data + "-") > -1) {
          os = trim(os.replace(data, ""));
        }
        if (os && os.indexOf(name) != -1 && !RegExp(name + " OS").test(os)) {
          os = os.replace(RegExp(" *" + qualify(name) + " *"), "");
        }
        if (layout && !/\b(?:Avant|Nook)\b/.test(name) && (/Browser|Lunascape|Maxthon/.test(name) || name != "Safari" && /^iOS/.test(os) && /\bSafari\b/.test(layout[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|SRWare Iron|Vivaldi|Web)/.test(name) && layout[1])) {
          (data = layout[layout.length - 1]) && description.push(data);
        }
        if (description.length) {
          description = ["(" + description.join("; ") + ")"];
        }
        if (manufacturer && product && product.indexOf(manufacturer) < 0) {
          description.push("on " + manufacturer);
        }
        if (product) {
          description.push((/^on /.test(description[description.length - 1]) ? "" : "on ") + product);
        }
        if (os) {
          data = / ([\d.+]+)$/.exec(os);
          isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == "/";
          os = {
            "architecture": 32,
            "family": data && !isSpecialCasedOS ? os.replace(data[0], "") : os,
            "version": data ? data[1] : null,
            "toString": function() {
              var version3 = this.version;
              return this.family + (version3 && !isSpecialCasedOS ? " " + version3 : "") + (this.architecture == 64 ? " 64-bit" : "");
            }
          };
        }
        if ((data = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(arch)) && !/\bi686\b/i.test(arch)) {
          if (os) {
            os.architecture = 64;
            os.family = os.family.replace(RegExp(" *" + data), "");
          }
          if (name && (/\bWOW64\b/i.test(ua) || useFeatures && /\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\bWin64; x64\b/i.test(ua))) {
            description.unshift("32-bit");
          }
        } else if (os && /^OS X/.test(os.family) && name == "Chrome" && parseFloat(version2) >= 39) {
          os.architecture = 64;
        }
        ua || (ua = null);
        var platform3 = {};
        platform3.description = ua;
        platform3.layout = layout && layout[0];
        platform3.manufacturer = manufacturer;
        platform3.name = name;
        platform3.prerelease = prerelease;
        platform3.product = product;
        platform3.ua = ua;
        platform3.version = name && version2;
        platform3.os = os || {
          /**
           * The CPU architecture the OS is built for.
           *
           * @memberOf platform.os
           * @type number|null
           */
          "architecture": null,
          /**
           * The family of the OS.
           *
           * Common values include:
           * "Windows", "Windows Server 2008 R2 / 7", "Windows Server 2008 / Vista",
           * "Windows XP", "OS X", "Linux", "Ubuntu", "Debian", "Fedora", "Red Hat",
           * "SuSE", "Android", "iOS" and "Windows Phone"
           *
           * @memberOf platform.os
           * @type string|null
           */
          "family": null,
          /**
           * The version of the OS.
           *
           * @memberOf platform.os
           * @type string|null
           */
          "version": null,
          /**
           * Returns the OS string.
           *
           * @memberOf platform.os
           * @returns {string} The OS string.
           */
          "toString": function() {
            return "null";
          }
        };
        platform3.parse = parse2;
        platform3.toString = toStringPlatform;
        if (platform3.version) {
          description.unshift(version2);
        }
        if (platform3.name) {
          description.unshift(name);
        }
        if (os && name && !(os == String(os).split(" ")[0] && (os == name.split(" ")[0] || product))) {
          description.push(product ? "(" + os + ")" : "on " + os);
        }
        if (description.length) {
          platform3.description = description.join(" ");
        }
        return platform3;
      }
      var platform2 = parse2();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root.platform = platform2;
        define(function() {
          return platform2;
        });
      } else if (freeExports && freeModule) {
        forOwn(platform2, function(value, key) {
          freeExports[key] = value;
        });
      } else {
        root.platform = platform2;
      }
    }).call(exports);
  }
});

// node_modules/.pnpm/bible-book-names-intl@3.0.9/node_modules/bible-book-names-intl/dist/data/base.json
var require_base = __commonJS({
  "node_modules/.pnpm/bible-book-names-intl@3.0.9/node_modules/bible-book-names-intl/dist/data/base.json"(exports, module2) {
    module2.exports = {
      "1": {
        verses: [
          31,
          25,
          24,
          26,
          32,
          22,
          24,
          22,
          29,
          32,
          32,
          20,
          18,
          24,
          21,
          16,
          27,
          33,
          38,
          18,
          34,
          24,
          20,
          67,
          34,
          35,
          46,
          22,
          35,
          43,
          55,
          32,
          20,
          31,
          29,
          43,
          36,
          30,
          23,
          23,
          57,
          38,
          34,
          34,
          28,
          34,
          31,
          22,
          33,
          26
        ]
      },
      "2": {
        verses: [
          22,
          25,
          22,
          31,
          23,
          30,
          25,
          32,
          35,
          29,
          10,
          51,
          22,
          31,
          27,
          36,
          16,
          27,
          25,
          26,
          36,
          31,
          33,
          18,
          40,
          37,
          21,
          43,
          46,
          38,
          18,
          35,
          23,
          35,
          35,
          38,
          29,
          31,
          43,
          38
        ]
      },
      "3": {
        verses: [
          17,
          16,
          17,
          35,
          19,
          30,
          38,
          36,
          24,
          20,
          47,
          8,
          59,
          57,
          33,
          34,
          16,
          30,
          37,
          27,
          24,
          33,
          44,
          23,
          55,
          46,
          34
        ]
      },
      "4": {
        verses: [
          54,
          34,
          51,
          49,
          31,
          27,
          89,
          26,
          23,
          36,
          35,
          16,
          33,
          45,
          41,
          50,
          13,
          32,
          22,
          29,
          35,
          41,
          30,
          25,
          18,
          65,
          23,
          31,
          40,
          16,
          54,
          42,
          56,
          29,
          34,
          13
        ]
      },
      "5": {
        verses: [
          46,
          37,
          29,
          49,
          33,
          25,
          26,
          20,
          29,
          22,
          32,
          32,
          18,
          29,
          23,
          22,
          20,
          22,
          21,
          20,
          23,
          30,
          25,
          22,
          19,
          19,
          26,
          68,
          29,
          20,
          30,
          52,
          29,
          12
        ]
      },
      "6": {
        verses: [
          18,
          24,
          17,
          24,
          15,
          27,
          26,
          35,
          27,
          43,
          23,
          24,
          33,
          15,
          63,
          10,
          18,
          28,
          51,
          9,
          45,
          34,
          16,
          33
        ]
      },
      "7": {
        verses: [
          36,
          23,
          31,
          24,
          31,
          40,
          25,
          35,
          57,
          18,
          40,
          15,
          25,
          20,
          20,
          31,
          13,
          31,
          30,
          48,
          25
        ]
      },
      "8": {
        verses: [
          22,
          23,
          18,
          22
        ]
      },
      "9": {
        verses: [
          28,
          36,
          21,
          22,
          12,
          21,
          17,
          22,
          27,
          27,
          15,
          25,
          23,
          52,
          35,
          23,
          58,
          30,
          24,
          42,
          15,
          23,
          29,
          22,
          44,
          25,
          12,
          25,
          11,
          31,
          13
        ],
        startNumber: 1
      },
      "10": {
        verses: [
          27,
          32,
          39,
          12,
          25,
          23,
          29,
          18,
          13,
          19,
          27,
          31,
          39,
          33,
          37,
          23,
          29,
          33,
          43,
          26,
          22,
          51,
          39,
          25
        ],
        startNumber: 2
      },
      "11": {
        verses: [
          53,
          46,
          28,
          34,
          18,
          38,
          51,
          66,
          28,
          29,
          43,
          33,
          34,
          31,
          34,
          34,
          24,
          46,
          21,
          43,
          29,
          53
        ],
        startNumber: 1
      },
      "12": {
        verses: [
          18,
          25,
          27,
          44,
          27,
          33,
          20,
          29,
          37,
          36,
          21,
          21,
          25,
          29,
          38,
          20,
          41,
          37,
          37,
          21,
          26,
          20,
          37,
          20,
          30
        ],
        startNumber: 2
      },
      "13": {
        verses: [
          54,
          55,
          24,
          43,
          26,
          81,
          40,
          40,
          44,
          14,
          47,
          40,
          14,
          17,
          29,
          43,
          27,
          17,
          19,
          8,
          30,
          19,
          32,
          31,
          31,
          32,
          34,
          21,
          30
        ],
        startNumber: 1
      },
      "14": {
        verses: [
          17,
          18,
          17,
          22,
          14,
          42,
          22,
          18,
          31,
          19,
          23,
          16,
          22,
          15,
          19,
          14,
          19,
          34,
          11,
          37,
          20,
          12,
          21,
          27,
          28,
          23,
          9,
          27,
          36,
          27,
          21,
          33,
          25,
          33,
          27,
          23
        ],
        startNumber: 2
      },
      "15": {
        verses: [
          11,
          70,
          13,
          24,
          17,
          22,
          28,
          36,
          15,
          44
        ]
      },
      "16": {
        verses: [
          11,
          20,
          32,
          23,
          19,
          19,
          73,
          18,
          38,
          39,
          36,
          47,
          31
        ]
      },
      "17": {
        verses: [
          22,
          23,
          15,
          17,
          14,
          14,
          10,
          17,
          32,
          3
        ]
      },
      "18": {
        verses: [
          22,
          13,
          26,
          21,
          27,
          30,
          21,
          22,
          35,
          22,
          20,
          25,
          28,
          22,
          35,
          22,
          16,
          21,
          29,
          29,
          34,
          30,
          17,
          25,
          6,
          14,
          23,
          28,
          25,
          31,
          40,
          22,
          33,
          37,
          16,
          33,
          24,
          41,
          30,
          24,
          34,
          17
        ]
      },
      "19": {
        verses: [
          6,
          12,
          8,
          8,
          12,
          10,
          17,
          9,
          20,
          18,
          7,
          8,
          6,
          7,
          5,
          11,
          15,
          50,
          14,
          9,
          13,
          31,
          6,
          10,
          22,
          12,
          14,
          9,
          11,
          12,
          24,
          11,
          22,
          22,
          28,
          12,
          40,
          22,
          13,
          17,
          13,
          11,
          5,
          26,
          17,
          11,
          9,
          14,
          20,
          23,
          19,
          9,
          6,
          7,
          23,
          13,
          11,
          11,
          17,
          12,
          8,
          12,
          11,
          10,
          13,
          20,
          7,
          35,
          36,
          5,
          24,
          20,
          28,
          23,
          10,
          12,
          20,
          72,
          13,
          19,
          16,
          8,
          18,
          12,
          13,
          17,
          7,
          18,
          52,
          17,
          16,
          15,
          5,
          23,
          11,
          13,
          12,
          9,
          9,
          5,
          8,
          28,
          22,
          35,
          45,
          48,
          43,
          13,
          31,
          7,
          10,
          10,
          9,
          8,
          18,
          19,
          2,
          29,
          176,
          7,
          8,
          9,
          4,
          8,
          5,
          6,
          5,
          6,
          8,
          8,
          3,
          18,
          3,
          3,
          21,
          26,
          9,
          8,
          24,
          13,
          10,
          7,
          12,
          15,
          21,
          10,
          20,
          14,
          9,
          6
        ]
      },
      "20": {
        verses: [
          33,
          22,
          35,
          27,
          23,
          35,
          27,
          36,
          18,
          32,
          31,
          28,
          25,
          35,
          33,
          33,
          28,
          24,
          29,
          30,
          31,
          29,
          35,
          34,
          28,
          28,
          27,
          28,
          27,
          33,
          31
        ]
      },
      "21": {
        verses: [
          18,
          26,
          22,
          16,
          20,
          12,
          29,
          17,
          18,
          20,
          10,
          14
        ]
      },
      "22": {
        verses: [
          17,
          17,
          11,
          16,
          16,
          13,
          13,
          14
        ]
      },
      "23": {
        verses: [
          31,
          22,
          26,
          6,
          30,
          13,
          25,
          22,
          21,
          34,
          16,
          6,
          22,
          32,
          9,
          14,
          14,
          7,
          25,
          6,
          17,
          25,
          18,
          23,
          12,
          21,
          13,
          29,
          24,
          33,
          9,
          20,
          24,
          17,
          10,
          22,
          38,
          22,
          8,
          31,
          29,
          25,
          28,
          28,
          25,
          13,
          15,
          22,
          26,
          11,
          23,
          15,
          12,
          17,
          13,
          12,
          21,
          14,
          21,
          22,
          11,
          12,
          19,
          12,
          25,
          24
        ]
      },
      "24": {
        verses: [
          19,
          37,
          25,
          31,
          31,
          30,
          34,
          22,
          26,
          25,
          23,
          17,
          27,
          22,
          21,
          21,
          27,
          23,
          15,
          18,
          14,
          30,
          40,
          10,
          38,
          24,
          22,
          17,
          32,
          24,
          40,
          44,
          26,
          22,
          19,
          32,
          21,
          28,
          18,
          16,
          18,
          22,
          13,
          30,
          5,
          28,
          7,
          47,
          39,
          46,
          64,
          34
        ]
      },
      "25": {
        verses: [
          22,
          22,
          66,
          22,
          22
        ]
      },
      "26": {
        verses: [
          28,
          10,
          27,
          17,
          17,
          14,
          27,
          18,
          11,
          22,
          25,
          28,
          23,
          23,
          8,
          63,
          24,
          32,
          14,
          49,
          32,
          31,
          49,
          27,
          17,
          21,
          36,
          26,
          21,
          26,
          18,
          32,
          33,
          31,
          15,
          38,
          28,
          23,
          29,
          49,
          26,
          20,
          27,
          31,
          25,
          24,
          23,
          35
        ]
      },
      "27": {
        verses: [
          21,
          49,
          30,
          37,
          31,
          28,
          28,
          27,
          27,
          21,
          45,
          13
        ]
      },
      "28": {
        verses: [
          11,
          23,
          5,
          19,
          15,
          11,
          16,
          14,
          17,
          15,
          12,
          14,
          16,
          9
        ]
      },
      "29": {
        verses: [
          20,
          32,
          21
        ]
      },
      "30": {
        verses: [
          15,
          16,
          15,
          13,
          27,
          14,
          17,
          14,
          15
        ]
      },
      "31": {
        verses: [
          21
        ]
      },
      "32": {
        verses: [
          17,
          10,
          10,
          11
        ]
      },
      "33": {
        verses: [
          16,
          13,
          12,
          13,
          15,
          16,
          20
        ]
      },
      "34": {
        verses: [
          15,
          13,
          19
        ]
      },
      "35": {
        verses: [
          17,
          20,
          19
        ]
      },
      "36": {
        verses: [
          18,
          15,
          20
        ]
      },
      "37": {
        verses: [
          15,
          23
        ]
      },
      "38": {
        verses: [
          21,
          13,
          10,
          14,
          11,
          15,
          14,
          23,
          17,
          12,
          17,
          14,
          9,
          21
        ]
      },
      "39": {
        verses: [
          14,
          17,
          18,
          6
        ]
      },
      "40": {
        verses: [
          25,
          23,
          17,
          25,
          48,
          34,
          29,
          34,
          38,
          42,
          30,
          50,
          58,
          36,
          39,
          28,
          27,
          35,
          30,
          34,
          46,
          46,
          39,
          51,
          46,
          75,
          66,
          20
        ]
      },
      "41": {
        verses: [
          45,
          28,
          35,
          41,
          43,
          56,
          37,
          38,
          50,
          52,
          33,
          44,
          37,
          72,
          47,
          20
        ]
      },
      "42": {
        verses: [
          80,
          52,
          38,
          44,
          39,
          49,
          50,
          56,
          62,
          42,
          54,
          59,
          35,
          35,
          32,
          31,
          37,
          43,
          48,
          47,
          38,
          71,
          56,
          53
        ]
      },
      "43": {
        verses: [
          51,
          25,
          36,
          54,
          47,
          71,
          53,
          59,
          41,
          42,
          57,
          50,
          38,
          31,
          27,
          33,
          26,
          40,
          42,
          31,
          25
        ]
      },
      "44": {
        verses: [
          26,
          47,
          26,
          37,
          42,
          15,
          60,
          40,
          43,
          48,
          30,
          25,
          52,
          28,
          41,
          40,
          34,
          28,
          41,
          38,
          40,
          30,
          35,
          27,
          27,
          32,
          44,
          31
        ]
      },
      "45": {
        verses: [
          32,
          29,
          31,
          25,
          21,
          23,
          25,
          39,
          33,
          21,
          36,
          21,
          14,
          23,
          33,
          27
        ]
      },
      "46": {
        verses: [
          31,
          16,
          23,
          21,
          13,
          20,
          40,
          13,
          27,
          33,
          34,
          31,
          13,
          40,
          58,
          24
        ],
        startNumber: 1
      },
      "47": {
        verses: [
          24,
          17,
          18,
          18,
          21,
          18,
          16,
          24,
          15,
          18,
          33,
          21,
          14
        ],
        startNumber: 2
      },
      "48": {
        verses: [
          24,
          21,
          29,
          31,
          26,
          18
        ]
      },
      "49": {
        verses: [
          23,
          22,
          21,
          32,
          33,
          24
        ]
      },
      "50": {
        verses: [
          30,
          30,
          21,
          23
        ]
      },
      "51": {
        verses: [
          29,
          23,
          25,
          18
        ]
      },
      "52": {
        verses: [
          10,
          20,
          13,
          18,
          28
        ],
        startNumber: 1
      },
      "53": {
        verses: [
          12,
          17,
          18
        ],
        startNumber: 2
      },
      "54": {
        verses: [
          20,
          15,
          16,
          16,
          25,
          21
        ],
        startNumber: 1
      },
      "55": {
        verses: [
          18,
          26,
          17,
          22
        ],
        startNumber: 2
      },
      "56": {
        verses: [
          16,
          15,
          15
        ]
      },
      "57": {
        verses: [
          25
        ]
      },
      "58": {
        verses: [
          14,
          18,
          19,
          16,
          14,
          20,
          28,
          13,
          28,
          39,
          40,
          29,
          25
        ]
      },
      "59": {
        verses: [
          27,
          26,
          18,
          17,
          20
        ]
      },
      "60": {
        verses: [
          25,
          25,
          22,
          19,
          14
        ],
        startNumber: 1
      },
      "61": {
        verses: [
          21,
          22,
          18
        ],
        startNumber: 2
      },
      "62": {
        verses: [
          10,
          29,
          24,
          21,
          21
        ],
        startNumber: 1
      },
      "63": {
        verses: [
          13
        ],
        startNumber: 2
      },
      "64": {
        verses: [
          14
        ],
        startNumber: 3
      },
      "65": {
        verses: [
          25
        ]
      },
      "66": {
        verses: [
          20,
          29,
          22,
          11,
          14,
          17,
          17,
          13,
          21,
          11,
          19,
          17,
          18,
          20,
          8,
          21,
          18,
          24,
          21,
          15,
          27,
          21
        ]
      }
    };
  }
});

// node_modules/.pnpm/bible-book-names-intl@3.0.9/node_modules/bible-book-names-intl/dist/data/translations/en.json
var require_en = __commonJS({
  "node_modules/.pnpm/bible-book-names-intl@3.0.9/node_modules/bible-book-names-intl/dist/data/translations/en.json"(exports, module2) {
    module2.exports = {
      language: "en",
      "1": {
        name: "Genesis",
        shortNames: [
          "Ge",
          "Gen"
        ],
        startNumber: 0
      },
      "2": {
        name: "Exodus",
        shortNames: [
          "Ex",
          "Exo"
        ],
        startNumber: 0
      },
      "3": {
        name: "Leviticus",
        shortNames: [
          "Le",
          "Lev"
        ],
        startNumber: 0
      },
      "4": {
        name: "Numbers",
        shortNames: [
          "Nu",
          "Num"
        ],
        startNumber: 0
      },
      "5": {
        name: "Deuteronomy",
        shortNames: [
          "Dt",
          "Deut",
          "Deu",
          "De"
        ],
        startNumber: 0
      },
      "6": {
        name: "Joshua",
        shortNames: [
          "Js",
          "Jos",
          "Josh"
        ],
        startNumber: 0
      },
      "7": {
        name: "Judges",
        shortNames: [
          "Jg",
          "Jud",
          "Jdg",
          "Ju",
          "Jdgs",
          "Judg"
        ],
        startNumber: 0
      },
      "8": {
        name: "Ruth",
        shortNames: [
          "Ru",
          "Rut"
        ],
        startNumber: 0
      },
      "9": {
        name: "Samuel",
        shortNames: [
          "Sa",
          "Sam"
        ],
        startNumber: 1
      },
      "10": {
        name: "Samuel",
        shortNames: [
          "Sa",
          "Sam"
        ],
        startNumber: 2
      },
      "11": {
        name: "Kings",
        shortNames: [
          "Ki",
          "King",
          "Kin",
          "Kngs"
        ],
        startNumber: 1
      },
      "12": {
        name: "Kings",
        shortNames: [
          "Ki",
          "King",
          "Kin",
          "Kngs"
        ],
        startNumber: 2
      },
      "13": {
        name: "Chronicles",
        shortNames: [
          "Ch",
          "Chr",
          "Chron"
        ],
        startNumber: 1
      },
      "14": {
        name: "Chronicles",
        shortNames: [
          "Ch",
          "Chr",
          "Chron"
        ],
        startNumber: 2
      },
      "15": {
        name: "Ezra",
        shortNames: [
          "Ez",
          "Ezr"
        ],
        startNumber: 0
      },
      "16": {
        name: "Nehemiah",
        shortNames: [
          "Ne",
          "Neh"
        ],
        startNumber: 0
      },
      "17": {
        name: "Esther",
        shortNames: [
          "Es",
          "Est",
          "Esth",
          "Ester"
        ],
        startNumber: 0
      },
      "18": {
        name: "Job",
        shortNames: [
          "Jb"
        ],
        startNumber: 0
      },
      "19": {
        name: "Psalm",
        shortNames: [
          "Ps",
          "Psa",
          "Pss",
          "Psalms"
        ],
        startNumber: 0
      },
      "20": {
        name: "Proverbs",
        shortNames: [
          "Pr",
          "Prov",
          "Pro"
        ],
        startNumber: 0
      },
      "21": {
        name: "Ecclesiastes",
        shortNames: [
          "Ec",
          "Ecc"
        ],
        startNumber: 0
      },
      "22": {
        name: "Song of Solomon",
        shortNames: [
          "SOS",
          "Song of Songs",
          "SongOfSongs"
        ],
        startNumber: 0
      },
      "23": {
        name: "Isaiah",
        shortNames: [
          "Isa"
        ],
        startNumber: 0
      },
      "24": {
        name: "Jeremiah",
        shortNames: [
          "Je",
          "Jer"
        ],
        startNumber: 0
      },
      "25": {
        name: "Lamentations",
        shortNames: [
          "La",
          "Lam",
          "Lament"
        ],
        startNumber: 0
      },
      "26": {
        name: "Ezekiel",
        shortNames: [
          "Ek",
          "Ezek",
          "Eze"
        ],
        startNumber: 0
      },
      "27": {
        name: "Daniel",
        shortNames: [
          "Da",
          "Dan",
          "Dl",
          "Dnl"
        ],
        startNumber: 0
      },
      "28": {
        name: "Hosea",
        shortNames: [
          "Ho",
          "Hos"
        ],
        startNumber: 0
      },
      "29": {
        name: "Joel",
        shortNames: [
          "Jl",
          "Joe"
        ],
        startNumber: 0
      },
      "30": {
        name: "Amos",
        shortNames: [
          "Am",
          "Amo"
        ],
        startNumber: 0
      },
      "31": {
        name: "Obadiah",
        shortNames: [
          "Ob",
          "Oba",
          "Obd",
          "Odbh"
        ],
        startNumber: 0
      },
      "32": {
        name: "Jonah",
        shortNames: [
          "Jh",
          "Jon",
          "Jnh"
        ],
        startNumber: 0
      },
      "33": {
        name: "Micah",
        shortNames: [
          "Mi",
          "Mic"
        ],
        startNumber: 0
      },
      "34": {
        name: "Nahum",
        shortNames: [
          "Na",
          "Nah"
        ],
        startNumber: 0
      },
      "35": {
        name: "Habakkuk",
        shortNames: [
          "Hb",
          "Hab",
          "Hk",
          "Habk"
        ],
        startNumber: 0
      },
      "36": {
        name: "Zephaniah",
        shortNames: [
          "Zp",
          "Zep",
          "Zeph",
          "Ze"
        ],
        startNumber: 0
      },
      "37": {
        name: "Haggai",
        shortNames: [
          "Ha",
          "Hag",
          "Hagg"
        ],
        startNumber: 0
      },
      "38": {
        name: "Zechariah",
        shortNames: [
          "Zc",
          "Zech",
          "Zec"
        ],
        startNumber: 0
      },
      "39": {
        name: "Malachi",
        shortNames: [
          "Ml",
          "Mal",
          "Mlc"
        ],
        startNumber: 0
      },
      "40": {
        name: "Matthew",
        shortNames: [
          "Mt",
          "Matt",
          "Mat"
        ],
        startNumber: 0
      },
      "41": {
        name: "Mark",
        shortNames: [
          "Mk",
          "Mrk"
        ],
        startNumber: 0
      },
      "42": {
        name: "Luke",
        shortNames: [
          "Lk",
          "Luk",
          "Lu"
        ],
        startNumber: 0
      },
      "43": {
        name: "John",
        shortNames: [
          "Jn",
          "Joh",
          "Jo"
        ],
        startNumber: 0
      },
      "44": {
        name: "Acts",
        shortNames: [
          "Ac",
          "Act"
        ],
        startNumber: 0
      },
      "45": {
        name: "Romans",
        shortNames: [
          "Ro",
          "Rom",
          "Rmn",
          "Rmns"
        ],
        startNumber: 0
      },
      "46": {
        name: "Corinthians",
        shortNames: [
          "Co",
          "Cor"
        ],
        startNumber: 1
      },
      "47": {
        name: "Corinthians",
        shortNames: [
          "Co",
          "Cor"
        ],
        startNumber: 2
      },
      "48": {
        name: "Galatians",
        shortNames: [
          "Ga",
          "Gal",
          "Gltns"
        ],
        startNumber: 0
      },
      "49": {
        name: "Ephesians",
        shortNames: [
          "Ep",
          "Eph",
          "Ephn"
        ],
        startNumber: 0
      },
      "50": {
        name: "Philippians",
        shortNames: [
          "Phi",
          "Phil"
        ],
        startNumber: 0
      },
      "51": {
        name: "Colossians",
        shortNames: [
          "Co",
          "Col",
          "Colo",
          "Cln",
          "Clns"
        ],
        startNumber: 0
      },
      "52": {
        name: "Thessalonians",
        shortNames: [
          "Th",
          "Thess",
          "Thes"
        ],
        startNumber: 1
      },
      "53": {
        name: "Thessalonians",
        shortNames: [
          "Th",
          "Thess",
          "Thes"
        ],
        startNumber: 2
      },
      "54": {
        name: "Timothy",
        shortNames: [
          "Ti",
          "Tim"
        ],
        startNumber: 1
      },
      "55": {
        name: "Timothy",
        shortNames: [
          "Ti",
          "Tim"
        ],
        startNumber: 2
      },
      "56": {
        name: "Titus",
        shortNames: [
          "Ti",
          "Tit",
          "Tt",
          "Ts"
        ],
        startNumber: 0
      },
      "57": {
        name: "Philemon",
        shortNames: [
          "Pm",
          "Phile",
          "Philm"
        ],
        startNumber: 0
      },
      "58": {
        name: "Hebrews",
        shortNames: [
          "He",
          "Heb",
          "Hw"
        ],
        startNumber: 0
      },
      "59": {
        name: "James",
        shortNames: [
          "Jm",
          "Jam",
          "Jas",
          "Ja"
        ],
        startNumber: 0
      },
      "60": {
        name: "Peter",
        shortNames: [
          "Pe",
          "Pet",
          "P"
        ],
        startNumber: 1
      },
      "61": {
        name: "Peter",
        shortNames: [
          "Pe",
          "Pet",
          "P"
        ],
        startNumber: 2
      },
      "62": {
        name: "John",
        shortNames: [
          "Joh",
          "Jo",
          "Jn",
          "J"
        ],
        startNumber: 1
      },
      "63": {
        name: "John",
        shortNames: [
          "Joh",
          "Jo",
          "Jn",
          "J"
        ],
        startNumber: 2
      },
      "64": {
        name: "John",
        shortNames: [
          "Joh",
          "Jo",
          "Jn",
          "J"
        ],
        startNumber: 3
      },
      "65": {
        name: "Jude",
        shortNames: [],
        startNumber: 0
      },
      "66": {
        name: "Revelation",
        shortNames: [
          "Re",
          "Rev",
          "Rvltn"
        ],
        startNumber: 0
      }
    };
  }
});

// node_modules/.pnpm/bible-book-names-intl@3.0.9/node_modules/bible-book-names-intl/dist/data/translations/it.json
var require_it = __commonJS({
  "node_modules/.pnpm/bible-book-names-intl@3.0.9/node_modules/bible-book-names-intl/dist/data/translations/it.json"(exports, module2) {
    module2.exports = {
      language: "it",
      "1": {
        name: "Genesi",
        shortNames: [
          "Gen"
        ],
        startNumber: 0
      },
      "2": {
        name: "Esodo",
        shortNames: [
          "Es"
        ],
        startNumber: 0
      },
      "3": {
        name: "Levitico",
        shortNames: [
          "Lev"
        ],
        startNumber: 0
      },
      "4": {
        name: "Numeri",
        shortNames: [
          "Nu"
        ],
        startNumber: 0
      },
      "5": {
        name: "Deuteronomio",
        shortNames: [
          "Deut"
        ],
        startNumber: 0
      },
      "6": {
        name: "Giosu\xE8",
        shortNames: [
          "Gios",
          "Gs"
        ],
        startNumber: 0
      },
      "7": {
        name: "Giudici",
        shortNames: [
          "Gd",
          "Gdc"
        ],
        startNumber: 0
      },
      "8": {
        name: "Rut",
        shortNames: [
          "Ru"
        ],
        startNumber: 0
      },
      "9": {
        name: "Samuele",
        shortNames: [
          "Sam"
        ],
        startNumber: 1
      },
      "10": {
        name: "Samuele",
        shortNames: [
          "Sam"
        ],
        startNumber: 2
      },
      "11": {
        name: "Re",
        shortNames: [],
        startNumber: 1
      },
      "12": {
        name: "Re",
        shortNames: [],
        startNumber: 2
      },
      "13": {
        name: "Cronache",
        shortNames: [
          "Cro"
        ],
        startNumber: 1
      },
      "14": {
        name: "Cronache",
        shortNames: [
          "Cro"
        ],
        startNumber: 2
      },
      "15": {
        name: "Esdra",
        shortNames: [
          "Esdr"
        ],
        startNumber: 0
      },
      "16": {
        name: "Neemia",
        shortNames: [
          "Neem"
        ],
        startNumber: 0
      },
      "17": {
        name: "Ester",
        shortNames: [
          "Est"
        ],
        startNumber: 0
      },
      "18": {
        name: "Giobbe",
        shortNames: [
          "Gio"
        ],
        startNumber: 0
      },
      "19": {
        name: "Salmi",
        shortNames: [
          "Sal"
        ],
        startNumber: 0
      },
      "20": {
        name: "Proverbi",
        shortNames: [
          "Prov"
        ],
        startNumber: 0
      },
      "21": {
        name: "Ecclesiaste",
        shortNames: [
          "Ecc"
        ],
        startNumber: 0
      },
      "22": {
        name: "Cantico dei Cantici",
        shortNames: [
          "Cant",
          "Cdc"
        ],
        startNumber: 0
      },
      "23": {
        name: "Isaia",
        shortNames: [
          "Isa"
        ],
        startNumber: 0
      },
      "24": {
        name: "Geremia",
        shortNames: [
          "Ger"
        ],
        startNumber: 0
      },
      "25": {
        name: "Lamentazioni",
        shortNames: [
          "Lam"
        ],
        startNumber: 0
      },
      "26": {
        name: "Ezechiele",
        shortNames: [
          "Eze"
        ],
        startNumber: 0
      },
      "27": {
        name: "Daniele",
        shortNames: [
          "Dan"
        ],
        startNumber: 0
      },
      "28": {
        name: "Osea",
        shortNames: [
          "Ose"
        ],
        startNumber: 0
      },
      "29": {
        name: "Gioele",
        shortNames: [
          "Gioe"
        ],
        startNumber: 0
      },
      "30": {
        name: "Amos",
        shortNames: [
          "Am"
        ],
        startNumber: 0
      },
      "31": {
        name: "Abdia",
        shortNames: [
          "Abd"
        ],
        startNumber: 0
      },
      "32": {
        name: "Giona",
        shortNames: [],
        startNumber: 0
      },
      "33": {
        name: "Michea",
        shortNames: [
          "Mic"
        ],
        startNumber: 0
      },
      "34": {
        name: "Naum",
        shortNames: [
          "Na"
        ],
        startNumber: 0
      },
      "35": {
        name: "Abacuc",
        shortNames: [
          "Abac"
        ],
        startNumber: 0
      },
      "36": {
        name: "Sofonia",
        shortNames: [
          "Sof"
        ],
        startNumber: 0
      },
      "37": {
        name: "Aggeo",
        shortNames: [
          "Agg"
        ],
        startNumber: 0
      },
      "38": {
        name: "Zaccaria",
        shortNames: [
          "Zac"
        ],
        startNumber: 0
      },
      "39": {
        name: "Malachia",
        shortNames: [
          "Mal"
        ],
        startNumber: 0
      },
      "40": {
        name: "Matteo",
        shortNames: [
          "Mat"
        ],
        startNumber: 0
      },
      "41": {
        name: "Marco",
        shortNames: [
          "Mar"
        ],
        startNumber: 0
      },
      "42": {
        name: "Luca",
        shortNames: [
          "Luc"
        ],
        startNumber: 0
      },
      "43": {
        name: "Giovanni",
        shortNames: [
          "Giov"
        ],
        startNumber: 0
      },
      "44": {
        name: "Atti degli Apostoli",
        shortNames: [
          "Atti"
        ],
        startNumber: 0
      },
      "45": {
        name: "Romani",
        shortNames: [
          "Rom"
        ],
        startNumber: 0
      },
      "46": {
        name: "Corinzi",
        shortNames: [
          "Cor"
        ],
        startNumber: 1
      },
      "47": {
        name: "Corinzi",
        shortNames: [
          "Cor"
        ],
        startNumber: 2
      },
      "48": {
        name: "Galati",
        shortNames: [
          "Gal"
        ],
        startNumber: 0
      },
      "49": {
        name: "Efesini",
        shortNames: [
          "Ef"
        ],
        startNumber: 0
      },
      "50": {
        name: "Filippesi",
        shortNames: [
          "Fil"
        ],
        startNumber: 0
      },
      "51": {
        name: "Colossesi",
        shortNames: [
          "Col"
        ],
        startNumber: 0
      },
      "52": {
        name: "Tessalonicesi",
        shortNames: [
          "Tess"
        ],
        startNumber: 1
      },
      "53": {
        name: "Tessalonicesi",
        shortNames: [
          "Tess"
        ],
        startNumber: 2
      },
      "54": {
        name: "Timoteo",
        shortNames: [
          "Tim"
        ],
        startNumber: 1
      },
      "55": {
        name: "Timoteo",
        shortNames: [
          "Tim"
        ],
        startNumber: 2
      },
      "56": {
        name: "Tito",
        shortNames: [],
        startNumber: 0
      },
      "57": {
        name: "Filemone",
        shortNames: [
          "Filem"
        ],
        startNumber: 0
      },
      "58": {
        name: "Ebrei",
        shortNames: [
          "Ebr"
        ],
        startNumber: 0
      },
      "59": {
        name: "Giacomo",
        shortNames: [
          "Giac"
        ],
        startNumber: 0
      },
      "60": {
        name: "Pietro",
        shortNames: [
          "Piet"
        ],
        startNumber: 1
      },
      "61": {
        name: "Pietro",
        shortNames: [
          "Piet"
        ],
        startNumber: 2
      },
      "62": {
        name: "Giovanni",
        shortNames: [
          "Giov"
        ],
        startNumber: 1
      },
      "63": {
        name: "Giovanni",
        shortNames: [
          "Giov"
        ],
        startNumber: 2
      },
      "64": {
        name: "Giovanni",
        shortNames: [
          "Giov"
        ],
        startNumber: 3
      },
      "65": {
        name: "Giuda",
        shortNames: [],
        startNumber: 0
      },
      "66": {
        name: "Apocalisse",
        shortNames: [
          "Apo"
        ],
        startNumber: 0
      }
    };
  }
});

// node_modules/.pnpm/bible-book-names-intl@3.0.9/node_modules/bible-book-names-intl/dist/data/translations/jp.json
var require_jp = __commonJS({
  "node_modules/.pnpm/bible-book-names-intl@3.0.9/node_modules/bible-book-names-intl/dist/data/translations/jp.json"(exports, module2) {
    module2.exports = {
      note: "this is generated in ChatGPT, need extra review",
      language: "jp",
      "1": {
        name: "\u5275\u4E16\u8A18",
        shortNames: [
          "\u5275",
          "\u5275\u4E16"
        ]
      },
      "2": {
        name: "\u51FA\u30A8\u30B8\u30D7\u30C8\u8A18",
        shortNames: [
          "\u51FA",
          "\u30A8\u30B8\u30D7\u30C8"
        ]
      },
      "3": {
        name: "\u30EC\u30D3\u8A18",
        shortNames: [
          "\u30EC\u30D3"
        ]
      },
      "4": {
        name: "\u6C11\u6570\u8A18",
        shortNames: [
          "\u6C11\u6570"
        ]
      },
      "5": {
        name: "\u7533\u547D\u8A18",
        shortNames: [
          "\u7533\u547D"
        ]
      },
      "6": {
        name: "\u30E8\u30B7\u30E5\u30A2\u8A18",
        shortNames: [
          "\u30E8\u30B7\u30E5\u30A2"
        ]
      },
      "7": {
        name: "\u58EB\u5E2B\u8A18",
        shortNames: [
          "\u58EB\u5E2B"
        ]
      },
      "8": {
        name: "\u30EB\u30C4\u8A18",
        shortNames: [
          "\u30EB\u30C4"
        ]
      },
      "9": {
        name: "\u30B5\u30E0\u30A8\u30EB\u8A18\u4E0A",
        shortNames: [
          "\u30B5\u30E0\u4E0A"
        ]
      },
      "10": {
        name: "\u30B5\u30E0\u30A8\u30EB\u8A18\u4E0B",
        shortNames: [
          "\u30B5\u30E0\u4E0B"
        ]
      },
      "11": {
        name: "\u5217\u738B\u8A18\u4E0A",
        shortNames: [
          "\u5217\u4E0A"
        ]
      },
      "12": {
        name: "\u5217\u738B\u8A18\u4E0B",
        shortNames: [
          "\u5217\u4E0B"
        ]
      },
      "13": {
        name: "\u6B74\u4EE3\u8A8C\u4E0A",
        shortNames: [
          "\u6B74\u4E0A"
        ]
      },
      "14": {
        name: "\u6B74\u4EE3\u8A8C\u4E0B",
        shortNames: [
          "\u6B74\u4E0B"
        ]
      },
      "15": {
        name: "\u30A8\u30BA\u30E9\u8A18",
        shortNames: [
          "\u30A8\u30BA\u30E9"
        ]
      },
      "16": {
        name: "\u30CD\u30D8\u30DF\u30E4\u8A18",
        shortNames: [
          "\u30CD\u30D8\u30DF\u30E4"
        ]
      },
      "17": {
        name: "\u30A8\u30B9\u30C6\u30EB\u8A18",
        shortNames: [
          "\u30A8\u30B9\u30C6\u30EB"
        ]
      },
      "18": {
        name: "\u30E8\u30D6\u8A18",
        shortNames: [
          "\u30E8\u30D6"
        ]
      },
      "19": {
        name: "\u8A69\u7BC7",
        shortNames: [
          "\u8A69"
        ]
      },
      "20": {
        name: "\u7BB4\u8A00",
        shortNames: [
          "\u7BB4"
        ]
      },
      "21": {
        name: "\u4F1D\u9053\u8005\u306E\u66F8",
        shortNames: [
          "\u4F1D\u9053\u8005"
        ]
      },
      "22": {
        name: "\u96C5\u6B4C",
        shortNames: []
      },
      "23": {
        name: "\u30A4\u30B6\u30E4\u66F8",
        shortNames: [
          "\u30A4\u30B6\u30E4"
        ]
      },
      "24": {
        name: "\u30A8\u30EC\u30DF\u30E4\u66F8",
        shortNames: [
          "\u30A8\u30EC\u30DF\u30E4"
        ]
      },
      "25": {
        name: "\u54C0\u6B4C",
        shortNames: []
      },
      "26": {
        name: "\u30A8\u30BC\u30AD\u30A8\u30EB\u66F8",
        shortNames: [
          "\u30A8\u30BC\u30AD\u30A8\u30EB"
        ]
      },
      "27": {
        name: "\u30C0\u30CB\u30A8\u30EB\u66F8",
        shortNames: [
          "\u30C0\u30CB\u30A8\u30EB"
        ]
      },
      "28": {
        name: "\u30DB\u30BB\u30A2\u66F8",
        shortNames: [
          "\u30DB\u30BB\u30A2"
        ]
      },
      "29": {
        name: "\u30E8\u30A8\u30EB\u66F8",
        shortNames: [
          "\u30E8\u30A8\u30EB"
        ]
      },
      "30": {
        name: "\u30A2\u30E2\u30B9\u66F8",
        shortNames: [
          "\u30A2\u30E2\u30B9"
        ]
      },
      "31": {
        name: "\u30AA\u30D0\u30C7\u30E4\u66F8",
        shortNames: [
          "\u30AA\u30D0\u30C7\u30E4"
        ]
      },
      "32": {
        name: "\u30E8\u30CA\u66F8",
        shortNames: [
          "\u30E8\u30CA"
        ]
      },
      "33": {
        name: "\u30DF\u30AB\u66F8",
        shortNames: [
          "\u30DF\u30AB"
        ]
      },
      "34": {
        name: "\u30CA\u30DB\u30E0\u66F8",
        shortNames: [
          "\u30CA\u30DB\u30E0"
        ]
      },
      "35": {
        name: "\u30CF\u30D0\u30AF\u30AF\u66F8",
        shortNames: [
          "\u30CF\u30D0\u30AF\u30AF"
        ]
      },
      "36": {
        name: "\u30BC\u30D1\u30CB\u30E4\u66F8",
        shortNames: [
          "\u30BC\u30D1\u30CB\u30E4"
        ]
      },
      "37": {
        name: "\u30CF\u30AC\u30A4\u66F8",
        shortNames: [
          "\u30CF\u30AC\u30A4"
        ]
      },
      "38": {
        name: "\u30BC\u30AB\u30EA\u30E4\u66F8",
        shortNames: [
          "\u30BC\u30AB\u30EA\u30E4"
        ]
      },
      "39": {
        name: "\u30DE\u30E9\u30AD\u66F8",
        shortNames: [
          "\u30DE\u30E9\u30AD"
        ]
      },
      "40": {
        name: "\u30DE\u30BF\u30A4\u306E\u798F\u97F3\u66F8",
        shortNames: [
          "\u30DE\u30BF\u30A4"
        ]
      },
      "41": {
        name: "\u30DE\u30EB\u30B3\u306E\u798F\u97F3\u66F8",
        shortNames: [
          "\u30DE\u30EB\u30B3"
        ]
      },
      "42": {
        name: "\u30EB\u30AB\u306E\u798F\u97F3\u66F8",
        shortNames: [
          "\u30EB\u30AB"
        ]
      },
      "43": {
        name: "\u30E8\u30CF\u30CD\u306E\u798F\u97F3\u66F8",
        shortNames: [
          "\u30E8\u30CF\u30CD"
        ]
      },
      "44": {
        name: "\u4F7F\u5F92\u884C\u4F1D",
        shortNames: [
          "\u4F7F\u5F92"
        ]
      },
      "45": {
        name: "\u30ED\u30FC\u30DE\u66F8",
        shortNames: [
          "\u30ED\u30FC\u30DE"
        ]
      },
      "46": {
        name: "\u30B3\u30EA\u30F3\u30C8\u306E\u4FE1\u5F92\u3078\u306E\u624B\u7D19\u4E00",
        shortNames: [
          "\u30B3\u30EA\u30F3\u30C8\u4E00"
        ]
      },
      "47": {
        name: "\u30B3\u30EA\u30F3\u30C8\u306E\u4FE1\u5F92\u3078\u306E\u624B\u7D19\u4E8C",
        shortNames: [
          "\u30B3\u30EA\u30F3\u30C8\u4E8C"
        ]
      },
      "48": {
        name: "\u30AC\u30E9\u30C6\u30E4\u306E\u4FE1\u5F92\u3078\u306E\u624B\u7D19",
        shortNames: [
          "\u30AC\u30E9\u30C6\u30E4"
        ]
      },
      "49": {
        name: "\u30A8\u30DA\u30BD\u306E\u4FE1\u5F92\u3078\u306E\u624B\u7D19",
        shortNames: [
          "\u30A8\u30DA\u30BD"
        ]
      },
      "50": {
        name: "\u30D5\u30A3\u30EA\u30D4\u306E\u4FE1\u5F92\u3078\u306E\u624B\u7D19",
        shortNames: [
          "\u30D5\u30A3\u30EA\u30D4"
        ]
      },
      "51": {
        name: "\u30B3\u30ED\u30B5\u30A4\u306E\u4FE1\u5F92\u3078\u306E\u624B\u7D19",
        shortNames: [
          "\u30B3\u30ED\u30B5\u30A4"
        ]
      },
      "52": {
        name: "\u30C6\u30B5\u30ED\u30CB\u30B1\u306E\u4FE1\u5F92\u3078\u306E\u624B\u7D19\u4E00",
        shortNames: [
          "\u30C6\u30B5\u30ED\u30CB\u30B1\u4E00"
        ]
      },
      "53": {
        name: "\u30C6\u30B5\u30ED\u30CB\u30B1\u306E\u4FE1\u5F92\u3078\u306E\u624B\u7D19\u4E8C",
        shortNames: [
          "\u30C6\u30B5\u30ED\u30CB\u30B1\u4E8C"
        ]
      },
      "54": {
        name: "\u30C6\u30E2\u30C6\u3078\u306E\u624B\u7D19\u4E00",
        shortNames: [
          "\u30C6\u30E2\u30C6\u4E00"
        ]
      },
      "55": {
        name: "\u30C6\u30E2\u30C6\u3078\u306E\u624B\u7D19\u4E8C",
        shortNames: [
          "\u30C6\u30E2\u30C6\u4E8C"
        ]
      },
      "56": {
        name: "\u30C6\u30C8\u30B9\u3078\u306E\u624B\u7D19",
        shortNames: [
          "\u30C6\u30C8\u30B9"
        ]
      },
      "57": {
        name: "\u30D5\u30A3\u30EC\u30E2\u30F3\u3078\u306E\u624B\u7D19",
        shortNames: [
          "\u30D5\u30A3\u30EC\u30E2\u30F3"
        ]
      },
      "58": {
        name: "\u30D8\u30D6\u30E9\u30A4\u4EBA\u3078\u306E\u624B\u7D19",
        shortNames: [
          "\u30D8\u30D6\u30E9\u30A4\u4EBA"
        ]
      },
      "59": {
        name: "\u30E4\u30B3\u30D6\u306E\u624B\u7D19",
        shortNames: [
          "\u30E4\u30B3\u30D6"
        ]
      },
      "60": {
        name: "\u30DA\u30C6\u30ED\u306E\u624B\u7D19\u4E00",
        shortNames: [
          "\u30DA\u30C6\u30ED\u4E00"
        ]
      },
      "61": {
        name: "\u30DA\u30C6\u30ED\u306E\u624B\u7D19\u4E8C",
        shortNames: [
          "\u30DA\u30C6\u30ED\u4E8C"
        ]
      },
      "62": {
        name: "\u30E8\u30CF\u30CD\u306E\u624B\u7D19\u4E00",
        shortNames: [
          "\u30E8\u30CF\u30CD\u4E00"
        ]
      },
      "63": {
        name: "\u30E8\u30CF\u30CD\u306E\u624B\u7D19\u4E8C",
        shortNames: [
          "\u30E8\u30CF\u30CD\u4E8C"
        ]
      },
      "64": {
        name: "\u30E8\u30CF\u30CD\u306E\u624B\u7D19\u4E09",
        shortNames: [
          "\u30E8\u30CF\u30CD\u4E09"
        ]
      },
      "65": {
        name: "\u30E6\u30C0\u306E\u624B\u7D19",
        shortNames: [
          "\u30E6\u30C0"
        ]
      },
      "66": {
        name: "\u9ED9\u793A\u9332",
        shortNames: []
      }
    };
  }
});

// node_modules/.pnpm/bible-book-names-intl@3.0.9/node_modules/bible-book-names-intl/dist/data/translations/sp.json
var require_sp = __commonJS({
  "node_modules/.pnpm/bible-book-names-intl@3.0.9/node_modules/bible-book-names-intl/dist/data/translations/sp.json"(exports, module2) {
    module2.exports = {
      language: "sp",
      "1": {
        name: "G\xE9nesis",
        shortNames: [
          "Gen",
          "Gn"
        ],
        startNumber: 0
      },
      "2": {
        name: "\xC9xodo",
        shortNames: [
          "Exo",
          "Ex"
        ],
        startNumber: 0
      },
      "3": {
        name: "Lev\xEDtico",
        shortNames: [
          "Lev",
          "Lv"
        ],
        startNumber: 0
      },
      "4": {
        name: "N\xFAmeros",
        shortNames: [
          "Num",
          "Nm"
        ],
        startNumber: 0
      },
      "5": {
        name: "Deuteronomio",
        shortNames: [
          "Deu",
          "Dt"
        ],
        startNumber: 0
      },
      "6": {
        name: "Josu\xE9",
        shortNames: [
          "Jos"
        ],
        startNumber: 0
      },
      "7": {
        name: "Jueces",
        shortNames: [
          "Jue"
        ],
        startNumber: 0
      },
      "8": {
        name: "Rut",
        shortNames: [
          "Rt"
        ],
        startNumber: 0
      },
      "9": {
        name: "Samuel",
        shortNames: [
          "Sam",
          "S"
        ],
        startNumber: 1
      },
      "10": {
        name: "Samuel",
        shortNames: [
          "Sam",
          "S"
        ],
        startNumber: 2
      },
      "11": {
        name: "Reyes",
        shortNames: ["Rey", "Re", "R"],
        startNumber: 1
      },
      "12": {
        name: "Reyes",
        shortNames: ["Rey", "Re", "R"],
        startNumber: 2
      },
      "13": {
        name: "Cr\xF3nicas",
        shortNames: [
          "Cro",
          "Cr"
        ],
        startNumber: 1
      },
      "14": {
        name: "Cr\xF3nicas",
        shortNames: [
          "Cro",
          "Cr"
        ],
        startNumber: 2
      },
      "15": {
        name: "Esdras",
        shortNames: [
          "Esd"
        ],
        startNumber: 0
      },
      "16": {
        name: "Nehem\xEDas",
        shortNames: [
          "Neh"
        ],
        startNumber: 0
      },
      "17": {
        name: "Ester",
        shortNames: [
          "Est"
        ],
        startNumber: 0
      },
      "18": {
        name: "Job",
        shortNames: [],
        startNumber: 0
      },
      "19": {
        name: "Salmos",
        shortNames: [
          "Sal"
        ],
        startNumber: 0
      },
      "20": {
        name: "Proverbios",
        shortNames: [
          "Pro",
          "Pr"
        ],
        startNumber: 0
      },
      "21": {
        name: "Eclesiast\xE9s",
        shortNames: [
          "Ecl",
          "Ec"
        ],
        startNumber: 0
      },
      "22": {
        name: "Cantar de los Cantares",
        shortNames: [
          "Can",
          "Cantares",
          "Cnt"
        ],
        startNumber: 0
      },
      "23": {
        name: "Isa\xEDas",
        shortNames: [
          "Isa",
          "Is"
        ],
        startNumber: 0
      },
      "24": {
        name: "Jerem\xEDas",
        shortNames: [
          "Jer",
          "Jr"
        ],
        startNumber: 0
      },
      "25": {
        name: "Lamentaciones",
        shortNames: [
          "Lam",
          "Lm"
        ],
        startNumber: 0
      },
      "26": {
        name: "Ezequiel",
        shortNames: [
          "Eze",
          "Ez"
        ],
        startNumber: 0
      },
      "27": {
        name: "Daniel",
        shortNames: [
          "Dan",
          "Dn"
        ],
        startNumber: 0
      },
      "28": {
        name: "Oseas",
        shortNames: [
          "Ose",
          "Os"
        ],
        startNumber: 0
      },
      "29": {
        name: "Joel",
        shortNames: [
          "Joe",
          "Jl"
        ],
        startNumber: 0
      },
      "30": {
        name: "Am\xF3s",
        shortNames: [
          "Amo",
          "Am"
        ],
        startNumber: 0
      },
      "31": {
        name: "Abd\xEDas",
        shortNames: [
          "Abd"
        ],
        startNumber: 0
      },
      "32": {
        name: "Jon\xE1s",
        shortNames: ["Jon"],
        startNumber: 0
      },
      "33": {
        name: "Miqueas",
        shortNames: [
          "Miq",
          "Mi"
        ],
        startNumber: 0
      },
      "34": {
        name: "Nah\xFAm",
        shortNames: [
          "Nah"
        ],
        startNumber: 0
      },
      "35": {
        name: "Habacuc",
        shortNames: [
          "Hab"
        ],
        startNumber: 0
      },
      "36": {
        name: "Sofon\xEDas",
        shortNames: [
          "Sof"
        ],
        startNumber: 0
      },
      "37": {
        name: "Hageo",
        shortNames: [
          "Hag"
        ],
        startNumber: 0
      },
      "38": {
        name: "Zaccar\xEDas",
        shortNames: [
          "Zac"
        ],
        startNumber: 0
      },
      "39": {
        name: "Malaqu\xEDas",
        shortNames: [
          "Mal"
        ],
        startNumber: 0
      },
      "40": {
        name: "Mateo",
        shortNames: [
          "Mat",
          "Mt"
        ],
        startNumber: 0
      },
      "41": {
        name: "Marcos",
        shortNames: [
          "Mar",
          "Mr"
        ],
        startNumber: 0
      },
      "42": {
        name: "Lucas",
        shortNames: [
          "Luc",
          "Lc"
        ],
        startNumber: 0
      },
      "43": {
        name: "Juan",
        shortNames: [
          "Jua",
          "Jn"
        ],
        startNumber: 0
      },
      "44": {
        name: "Hechos de los Ap\xF3stoles",
        shortNames: [
          "Hch"
        ],
        startNumber: 0
      },
      "45": {
        name: "Romanos",
        shortNames: [
          "Rom",
          "Ro"
        ],
        startNumber: 0
      },
      "46": {
        name: "Corintios",
        shortNames: [
          "Cor",
          "Co"
        ],
        startNumber: 1
      },
      "47": {
        name: "Corintios",
        shortNames: [
          "Cor",
          "Co"
        ],
        startNumber: 2
      },
      "48": {
        name: "G\xE1latas",
        shortNames: [
          "Gal",
          "Ga"
        ],
        startNumber: 0
      },
      "49": {
        name: "Efesios",
        shortNames: [
          "Efe",
          "Ef"
        ],
        startNumber: 0
      },
      "50": {
        name: "Filipenses",
        shortNames: [
          "Fil"
        ],
        startNumber: 0
      },
      "51": {
        name: "Colosenses",
        shortNames: [
          "Col"
        ],
        startNumber: 0
      },
      "52": {
        name: "Tesalonicenses",
        shortNames: [
          "Tes",
          "Ts"
        ],
        startNumber: 1
      },
      "53": {
        name: "Tesalonicenses",
        shortNames: [
          "Tes",
          "Ts"
        ],
        startNumber: 2
      },
      "54": {
        name: "Timoteo",
        shortNames: [
          "Tim",
          "Ti"
        ],
        startNumber: 1
      },
      "55": {
        name: "Timoteo",
        shortNames: [
          "Tim",
          "Ti"
        ],
        startNumber: 2
      },
      "56": {
        name: "Tito",
        shortNames: ["Tit"],
        startNumber: 0
      },
      "57": {
        name: "Filem\xF3n",
        shortNames: [
          "Flm"
        ],
        startNumber: 0
      },
      "58": {
        name: "Hebreos",
        shortNames: [
          "Heb",
          "He"
        ],
        startNumber: 0
      },
      "59": {
        name: "Santiago",
        shortNames: [
          "Stg"
        ],
        startNumber: 0
      },
      "60": {
        name: "Pedro",
        shortNames: [
          "Pe",
          "P"
        ],
        startNumber: 1
      },
      "61": {
        name: "Pedro",
        shortNames: [
          "Pe",
          "P"
        ],
        startNumber: 2
      },
      "62": {
        name: "Juan",
        shortNames: [
          "Jua",
          "Jn"
        ],
        startNumber: 1
      },
      "63": {
        name: "Juan",
        shortNames: [
          "Jua",
          "Jn"
        ],
        startNumber: 2
      },
      "64": {
        name: "Juan",
        shortNames: [
          "Jua",
          "Jn"
        ],
        startNumber: 3
      },
      "65": {
        name: "Judas",
        shortNames: ["Jud"],
        startNumber: 0
      },
      "66": {
        name: "Apocalipsis",
        shortNames: [
          "Apo",
          "Rev",
          "Ap"
        ],
        startNumber: 0
      }
    };
  }
});

// node_modules/.pnpm/bible-book-names-intl@3.0.9/node_modules/bible-book-names-intl/dist/index.js
var require_dist = __commonJS({
  "node_modules/.pnpm/bible-book-names-intl@3.0.9/node_modules/bible-book-names-intl/dist/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTranslationBooks = void 0;
    var base_json_1 = __importDefault(require_base());
    var en_json_1 = __importDefault(require_en());
    var it_json_1 = __importDefault(require_it());
    var jp_json_1 = __importDefault(require_jp());
    var sp_json_1 = __importDefault(require_sp());
    var allTranslations = [
      en_json_1.default,
      it_json_1.default,
      jp_json_1.default,
      sp_json_1.default
      // add new translations here
    ];
    var getLanguageToBookWithAbbreviationsDict = () => {
      const languageToBookWithAbbreviationsDict2 = /* @__PURE__ */ new Map();
      allTranslations.forEach((translation) => {
        const books = [];
        for (let i = 0; i < 66; i++) {
          const rawBookInfo = translation["" + (i + 1)];
          const bookBaseData = base_json_1.default["" + (i + 1)];
          const { startNumber, name, shortNames } = rawBookInfo;
          books.push(Object.assign(Object.assign({}, bookBaseData), { name, fullName: startNumber && startNumber >= 1 ? `${startNumber} ${name}` : name, abbreviations: shortNames, startNumber }));
        }
        languageToBookWithAbbreviationsDict2.set(translation.language, books);
      });
      return languageToBookWithAbbreviationsDict2;
    };
    var languageToBookWithAbbreviationsDict = getLanguageToBookWithAbbreviationsDict();
    var getTranslationBooks = (language) => {
      if (!languageToBookWithAbbreviationsDict.has(language)) {
        const msg = `No translation found for language ${language}`;
        console.error(msg);
        throw new Error(msg);
      }
      return languageToBookWithAbbreviationsDict.get(language);
    };
    exports.getTranslationBooks = getTranslationBooks;
    exports.default = languageToBookWithAbbreviationsDict;
  }
});

// node_modules/.pnpm/bible-reference-toolkit@2.3.2/node_modules/bible-reference-toolkit/dist/lib/utils.js
var require_utils3 = __commonJS({
  "node_modules/.pnpm/bible-reference-toolkit@2.3.2/node_modules/bible-reference-toolkit/dist/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateOrdinalNameVariations = void 0;
    var generateOrdinalNameVariations = (startNumber, names) => {
      const variations = [];
      let numerals;
      if (startNumber === 1) {
        numerals = ["1", "I", "First"];
      } else if (startNumber === 2) {
        numerals = ["2", "II", "Second"];
      } else if (startNumber === 3) {
        numerals = ["3", "III", "Third"];
      }
      names.forEach((name) => {
        numerals.forEach(function(numeral) {
          variations.push(numeral + name);
          variations.push(numeral + " " + name);
        });
      });
      return variations;
    };
    exports.generateOrdinalNameVariations = generateOrdinalNameVariations;
  }
});

// node_modules/.pnpm/bible-reference-toolkit@2.3.2/node_modules/bible-reference-toolkit/dist/lib/books.js
var require_books = __commonJS({
  "node_modules/.pnpm/bible-reference-toolkit@2.3.2/node_modules/bible-reference-toolkit/dist/lib/books.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AllBibleBooksInAllSupportedLanguages = exports.SupportedLanguages = exports.LanguageToBookWithAbbreviationsDict = exports.getTranslationBooks = void 0;
    var bible_book_names_intl_1 = __importDefault(require_dist());
    var bible_book_names_intl_2 = require_dist();
    exports.getTranslationBooks = bible_book_names_intl_2.getTranslationBooks;
    exports.LanguageToBookWithAbbreviationsDict = bible_book_names_intl_1.default;
    exports.SupportedLanguages = [...bible_book_names_intl_1.default.keys()];
    var getAllBibleBooksInAllSupportedLanguages = () => {
      const allBibleBooksInAllSupportedLanguages = [];
      for (let i = 0; i < 66; i++) {
        const enTranslation = exports.LanguageToBookWithAbbreviationsDict === null || exports.LanguageToBookWithAbbreviationsDict === void 0 ? void 0 : exports.LanguageToBookWithAbbreviationsDict.get("en")[i];
        const { fullName, verses, name } = enTranslation;
        const book = {
          name,
          fullName,
          verses,
          abbreviations: []
          // this will be the list of abbreviations and names for the book in all languages
        };
        exports.LanguageToBookWithAbbreviationsDict.forEach((books) => {
          const theBook = books[i];
          const { abbreviations, name: name2 } = theBook;
          book["abbreviations"] = [...book["abbreviations"].concat(...abbreviations, name2)];
        });
        allBibleBooksInAllSupportedLanguages.push(book);
      }
      return allBibleBooksInAllSupportedLanguages;
    };
    exports.AllBibleBooksInAllSupportedLanguages = getAllBibleBooksInAllSupportedLanguages();
  }
});

// node_modules/.pnpm/bible-reference-toolkit@2.3.2/node_modules/bible-reference-toolkit/dist/lib/reference.js
var require_reference = __commonJS({
  "node_modules/.pnpm/bible-reference-toolkit@2.3.2/node_modules/bible-reference-toolkit/dist/lib/reference.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Reference = void 0;
    var bible_book_names_intl_1 = require_dist();
    var utils_1 = require_utils3();
    var books_1 = require_books();
    var Reference2 = class {
      constructor(reference) {
        let book;
        let chapter;
        let verse;
        if (typeof reference === "string") {
          reference = reference.replace(/\./g, "");
          this.source = reference;
          const referenceParts = reference.match(/(.+[A-Za-z])\s+(.+)/);
          if (!(referenceParts === null || referenceParts === void 0 ? void 0 : referenceParts.length) || (referenceParts === null || referenceParts === void 0 ? void 0 : referenceParts.length) < 3) {
            throw new Error('You must supply a Bible reference, either a string (i.e. "Mark 2") or an object (i.e. { book: 1, chapter: 2, verse: 1 })');
          }
          const bookName = referenceParts[1];
          const chapterAndVerse = referenceParts[2];
          book = Reference2.bookIdFromName(bookName);
          const chapterAndVerseParts = chapterAndVerse.split(":");
          chapter = Number(chapterAndVerseParts[0]);
          verse = chapterAndVerseParts[1] ? Number(chapterAndVerseParts[1]) : void 0;
        } else if ((reference === null || reference === void 0 ? void 0 : reference.book) >= 0 && (reference === null || reference === void 0 ? void 0 : reference.chapter) >= 0 && (!(reference === null || reference === void 0 ? void 0 : reference.verse) || (reference === null || reference === void 0 ? void 0 : reference.verse) >= 0)) {
          book = reference.book;
          chapter = reference.chapter;
          verse = reference === null || reference === void 0 ? void 0 : reference.verse;
        } else {
          throw new Error('You must supply a Bible reference, either a string (i.e. "Mark 2") or an object (i.e. { book: 1, chapter: 2, verse: 1 })');
        }
        this.book = book;
        this.chapter = chapter;
        this.verse = verse;
      }
      /**
       * Get the book id from a book name
       * @param language, en, jp sp, it etc
       * @param nameInTranslation
       */
      static bookIdFromTranslationAndName(language, nameInTranslation) {
        const booksInTranslation = (0, bible_book_names_intl_1.getTranslationBooks)(language.toLowerCase());
        return Reference2.getBookIdFromTranslationAndName(booksInTranslation, nameInTranslation);
      }
      // Given a string of a book name (shortened or full length), get the book id
      static bookIdFromName(nameInAnySupportedTranslation) {
        return Reference2.getBookIdFromTranslationAndName(books_1.AllBibleBooksInAllSupportedLanguages, nameInAnySupportedTranslation);
      }
      // Given a book id, get the full length book name
      static bookEnglishFullNameFromId(id) {
        return Reference2.bookNameFromTranslationAndId("en", id);
      }
      static bookNameFromTranslationAndId(language, id) {
        const book = (0, bible_book_names_intl_1.getTranslationBooks)(language.toLowerCase())[id - 1];
        if (!book) {
          throw new Error("Book id out of range (no such book)");
        }
        return book.fullName;
      }
      /**
       * Get full book name from Book Id in English
       * @param id
       */
      static bookNameFromId(id) {
        return Reference2.bookEnglishFullNameFromId(id);
      }
      // Like moment.js startOf - ref.startOf('chapter') sets the ref to the first
      // that number chapter
      static fromChapterId(chapterId) {
        let chaptersRemaining = chapterId;
        let bookIndex = 0;
        while (chaptersRemaining > 0) {
          const chaptersInThisBook = books_1.AllBibleBooksInAllSupportedLanguages[bookIndex].verses.length;
          if (chaptersRemaining - chaptersInThisBook <= 0) {
            return new Reference2({
              book: bookIndex + 1,
              chapter: chaptersRemaining
            });
          }
          chaptersRemaining -= chaptersInThisBook;
          bookIndex += 1;
        }
        throw new Error("There was a problem creating the a reference from chapter id " + chapterId);
      }
      // Create a Reference from a verse id
      static fromVerseId(verseId) {
        let versesRemaining = verseId;
        let bookIndex = 0;
        while (versesRemaining > 0) {
          const versesInThisBook = Reference2.versesInBookId(bookIndex + 1);
          if (versesRemaining - versesInThisBook < 0) {
            const book = books_1.AllBibleBooksInAllSupportedLanguages[bookIndex];
            let chapterIndex = 0;
            while (versesRemaining > 0) {
              const versesInThisChapter = book.verses[chapterIndex];
              if (versesRemaining - versesInThisChapter < 0) {
                return new Reference2({
                  book: bookIndex + 1,
                  chapter: chapterIndex + 1,
                  verse: versesRemaining
                });
              }
              versesRemaining -= versesInThisChapter;
              chapterIndex += 1;
            }
          }
          versesRemaining -= versesInThisBook;
          bookIndex += 1;
        }
        throw new Error("There was a problem creating the a reference from verse id " + verseId);
      }
      // Get the number of verses in the given book id
      static versesInBookId(bookId) {
        return books_1.AllBibleBooksInAllSupportedLanguages[bookId - 1].verses.reduce(function sum(a, b) {
          return a + b;
        });
      }
      // Get the number of verses in the given chapter id
      static versesInChapterId(chapterId) {
        const reference = Reference2.fromChapterId(chapterId);
        return books_1.AllBibleBooksInAllSupportedLanguages[reference.book - 1].verses[reference.chapter - 1];
      }
      // Get the number of chapters in the given book id
      static chaptersInBookId(bookId) {
        return books_1.AllBibleBooksInAllSupportedLanguages[bookId - 1].verses.length;
      }
      // Get the number of verses up to the start of the given book id
      static versesUpToBookId(bookId) {
        let count = 0;
        let booksLeft = bookId - 1;
        while (booksLeft > 0) {
          count += Reference2.versesInBookId(booksLeft);
          booksLeft -= 1;
        }
        return count;
      }
      // Get the number of verses up to the start of the given chapter id
      static versesUpToChapterId(chapterId) {
        let count = 0;
        let chaptersLeft = chapterId - 1;
        while (chaptersLeft > 0) {
          count += Reference2.versesInChapterId(chaptersLeft);
          chaptersLeft -= 1;
        }
        return count;
      }
      // Get the number of chapters up to the start of the given book id
      static chaptersUpToBookId(bookId) {
        let count = 0;
        let booksLeft = bookId - 1;
        while (booksLeft > 0) {
          count += Reference2.chaptersInBookId(booksLeft);
          booksLeft -= 1;
        }
        return count;
      }
      static getBookIdFromTranslationAndName(books, name) {
        const lowerName = name.toLowerCase();
        const relativeBooks = books.filter((book) => {
          let bookNames = [book.name, ...book.abbreviations];
          if ((book === null || book === void 0 ? void 0 : book.startNumber) && book.startNumber > 0) {
            bookNames = (0, utils_1.generateOrdinalNameVariations)(book.startNumber, bookNames);
          }
          return [book.fullName, ...bookNames].map((name2) => name2.toLowerCase()).indexOf(lowerName) > -1;
        });
        if (relativeBooks === null || relativeBooks === void 0 ? void 0 : relativeBooks.length) {
          return books.indexOf(relativeBooks[0]) + 1;
        }
        const msg = `No book matched "${name}"`;
        console.error(msg);
        throw new Error(msg);
      }
      // Is a Chapter level reference (no verse)
      isChapter() {
        return !this.verse;
      }
      // go to start of given unit, will make change to this reference
      startOf(unit, clone = this) {
        if (unit === "chapter") {
          clone.verse = 1;
        } else if (unit === "book") {
          clone.verse = 1;
          clone.chapter = 1;
        } else {
          throw new Error("Unknown unit " + unit + ' supplied to startOf() - supported units are: "book", "chapter"');
        }
        return clone;
      }
      // Create a clone of this reference, and set it to the start of the given unit
      cloneToStartOf(unit) {
        const clone = this.clone();
        return this.startOf(unit, clone);
      }
      clone() {
        return new Reference2(this.toString());
      }
      toString() {
        const bookName = books_1.AllBibleBooksInAllSupportedLanguages[this.book - 1].fullName;
        let tmpString = bookName + " " + this.chapter;
        if (this.verse) {
          tmpString += ":" + this.verse;
        }
        return tmpString;
      }
      // Get the verse id for this reference
      toVerseId() {
        let verseCount = 0;
        let bookIndex = this.book - 1;
        while (bookIndex >= 1) {
          verseCount += Reference2.versesInBookId(bookIndex);
          bookIndex -= 1;
        }
        var chapterIndex = this.chapter - 1;
        while (chapterIndex >= 1) {
          verseCount += Reference2.versesInBookId(bookIndex);
          verseCount += books_1.AllBibleBooksInAllSupportedLanguages[this.book - 1].verses[chapterIndex];
        }
        if (this.verse != null) {
          verseCount += this.verse;
        }
        return verseCount;
      }
      // Get the chapter id for this reference
      toChapterId() {
        const previousBookChapters = Reference2.chaptersUpToBookId(this.book);
        return previousBookChapters + this.chapter;
      }
      // Get the book id for this reference
      toBookId() {
        return this.book;
      }
      // When doing math, use verse id as the value
      valueOf() {
        return this.toVerseId();
      }
    };
    exports.Reference = Reference2;
    exports.default = Reference2;
  }
});

// node_modules/.pnpm/bible-reference-toolkit@2.3.2/node_modules/bible-reference-toolkit/dist/lib/range.js
var require_range2 = __commonJS({
  "node_modules/.pnpm/bible-reference-toolkit@2.3.2/node_modules/bible-reference-toolkit/dist/lib/range.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Range = void 0;
    var reference_1 = __importDefault(require_reference());
    var Range = class {
      constructor(start, end) {
        this.start = new reference_1.default(start);
        this.end = new reference_1.default(end);
        if (start > end) {
          this.start = new reference_1.default(end);
          this.end = new reference_1.default(start);
        }
      }
      distance() {
        return {
          verses: this.end.toVerseId() - this.start.toVerseId(),
          chapters: this.end.toChapterId() - this.start.toChapterId(),
          books: this.end.toBookId() - this.start.toBookId()
        };
      }
      static isRange(value) {
        return value instanceof Range || (value === null || value === void 0 ? void 0 : value.indexOf("-")) > -1;
      }
    };
    exports.Range = Range;
    exports.default = Range;
  }
});

// node_modules/.pnpm/bible-reference-toolkit@2.3.2/node_modules/bible-reference-toolkit/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/.pnpm/bible-reference-toolkit@2.3.2/node_modules/bible-reference-toolkit/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AllBibleBooksInAllSupportedLanguages = exports.getTranslationBooks = exports.Range = exports.Reference = void 0;
    var reference_1 = require_reference();
    var reference_2 = require_reference();
    Object.defineProperty(exports, "Reference", { enumerable: true, get: function() {
      return reference_2.Reference;
    } });
    var range_1 = require_range2();
    Object.defineProperty(exports, "Range", { enumerable: true, get: function() {
      return range_1.Range;
    } });
    var books_1 = require_books();
    Object.defineProperty(exports, "getTranslationBooks", { enumerable: true, get: function() {
      return books_1.getTranslationBooks;
    } });
    Object.defineProperty(exports, "AllBibleBooksInAllSupportedLanguages", { enumerable: true, get: function() {
      return books_1.AllBibleBooksInAllSupportedLanguages;
    } });
    exports.default = reference_1.Reference;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BibleReferencePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian8 = require("obsidian");

// src/data/BibleApiSourceCollection.ts
var BibleAPISourceCollection = {
  bibleApi: {
    name: "Bible API",
    apiUrl: "https://bible-api.com"
  },
  bollsLife: {
    name: "Bolls Life",
    apiUrl: "https://bolls.life/get-text"
    // 'https://bolls.life',
    //  self hosted proxy for bolls life api, https://bible-api-bff.bai.uno/bolls-life
  }
};

// src/data/BibleVersionCollection.ts
var BibleVersionCollection = [
  // bible api
  {
    key: "web",
    versionName: "World English Bible",
    language: "English",
    code: "en",
    apiSource: BibleAPISourceCollection.bibleApi
  },
  {
    key: "clementine",
    versionName: "Clementine Latin Vulgate",
    language: "Latin",
    code: "la",
    apiSource: BibleAPISourceCollection.bibleApi
  },
  {
    key: "kjv",
    versionName: "King James Version",
    language: "English",
    code: "en",
    apiSource: BibleAPISourceCollection.bibleApi
  },
  {
    key: "bbe",
    versionName: "Bible in Basic English",
    language: "English",
    code: "en",
    apiSource: BibleAPISourceCollection.bibleApi
  },
  {
    key: "oeb-us",
    versionName: "Open English Bible, US Edition",
    language: "English",
    code: "en",
    apiSource: BibleAPISourceCollection.bibleApi
  },
  {
    key: "almeida",
    versionName: "Jo\xE3o Ferreira de Almeida",
    language: "Portuguese",
    code: "pt",
    apiSource: BibleAPISourceCollection.bibleApi
  },
  {
    key: "rccv",
    versionName: "Romanian Corrected Cornilescu Version",
    language: "Romanian",
    code: "ro",
    apiSource: BibleAPISourceCollection.bibleApi
  },
  {
    key: "cherokee",
    versionName: "Cherokee New Testament",
    language: "Cherokee",
    code: "cu",
    apiSource: BibleAPISourceCollection.bibleApi
  },
  {
    key: "oeb-cw",
    versionName: "Open English Bible, Commonwealth Edition",
    language: "English (UK)",
    code: "en",
    apiSource: BibleAPISourceCollection.bibleApi
  },
  {
    key: "webbe",
    versionName: "World English Bible, British Edition",
    language: "English (UK)",
    code: "en",
    apiSource: BibleAPISourceCollection.bibleApi
  },
  // bolls life
  {
    key: "nkjv",
    versionName: "New King James Version",
    language: "English",
    code: "en",
    apiSource: BibleAPISourceCollection.bollsLife,
    infoUrl: "https://wikipedia.org/wiki/New_King_James_Version"
  },
  {
    key: "niv",
    versionName: "New International Version, 1984",
    language: "English",
    code: "en",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "nrsvce",
    versionName: "New Revised Standard Version Catholic Edition (NRSVCE)",
    language: "English",
    code: "en",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "esv",
    versionName: "English Standard Version",
    language: "English",
    code: "en",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "nasb",
    versionName: "New American Standard Bible (1995)",
    language: "English",
    code: "en",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "elb",
    versionName: "Elberfelder Bibel (1871)",
    language: "German Deutsch",
    code: "de",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "lut",
    versionName: "Luther (1912)",
    language: "German Deutsch",
    code: "de",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "ntgt",
    versionName: "Greek NT: Tischendorf 8th Ed.",
    language: "Greek \u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "tr",
    versionName: "Elzevir Textus Receptus (1624)",
    language: "Greek \u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "lxx",
    versionName: "Septuagint",
    language: "Greek \u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "wlc",
    versionName: "Westminster Leningrad Codex (with Vowels)",
    language: "Hebrew \u05E2\u05D1\u05E8\u05D9\u05EA",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "dhnt",
    versionName: "Delitzsch's Hebrew New Testament 1877, 1998 (with Vowels)",
    language: "Hebrew \u05E2\u05D1\u05E8\u05D9\u05EA",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "cuv",
    versionName: "Chinese Union Version (Traditional)",
    language: "Chinese",
    code: "cn",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "nr06",
    versionName: "Nuova Riveduta, 2006",
    language: "Latin / Italian",
    code: "it",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "svd",
    versionName: "Smith and Van Dyke",
    language: "Arabic \u0627\u0644\u0639\u0631\u0628\u064A\u0629",
    code: "ar",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "btx3",
    versionName: "La Biblia Textual 3ra Edicion",
    language: "Spanish",
    code: "sp",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "rv1960",
    versionName: "Reina Valera 1960",
    language: "Spanish",
    code: "sp",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "rv2004",
    versionName: "Reina Valera Gomez 2004",
    language: "Spanish",
    code: "sp",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "pdt",
    versionName: "Palabra de Dios para Todos",
    language: "Spanish",
    code: "sp",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "nvi",
    versionName: "Nueva Version Internacional",
    language: "Spanish",
    code: "sp",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "ntv",
    versionName: "Nueva Traduccion Viviente, 2009",
    language: "Spanish",
    code: "sp",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "lbla",
    versionName: "La Biblia de Las Americas, 1997",
    language: "Spanish",
    code: "sp",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  // todo add langauge code
  {
    key: "bg",
    versionName: "Biblia gda\u0144ska, 1881",
    language: "Polish",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "bw",
    versionName: "Biblia warszawska, 1975",
    language: "Polish",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "tb",
    versionName: "Terjemahan Baru",
    language: "Indonesian",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "bti",
    versionName: "\u0411\u0438\u0431\u043B\u0438\u044F \u043F\u043E\u0434 \u0440\u0435\u0434. \u041C.\u041F. \u041A\u0443\u043B\u0430\u043A\u043E\u0432\u0430 \u0438 \u041C.\u041C. \u041A\u0443\u043B\u0430\u043A\u043E\u0432\u0430, 2015",
    language: "Russian",
    apiSource: BibleAPISourceCollection.bollsLife
  },
  {
    key: "utt",
    versionName: "\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430 \u0411\u0456\u0431\u043B\u0456\u044F LXX \u0423\u0411\u0422 \u0420\u0430\u0444\u0430\u0457\u043B\u0430 \u0422\u0443\u0440\u043A\u043E\u043D\u044F\u043A\u0430 (2011) 77 \u043A\u043D\u0438\u0433",
    language: "Ukrainian",
    apiSource: BibleAPISourceCollection.bollsLife
  }
];
var DEFAULT_BIBLE_VERSION = BibleVersionCollection[11];
var getBibleVersion = (key) => {
  var _a;
  return (_a = BibleVersionCollection.find((bibleVersion) => bibleVersion.key === key)) != null ? _a : DEFAULT_BIBLE_VERSION;
};
var allBibleVersionsWithLanguageNameAlphabetically = BibleVersionCollection.sort((a, b) => {
  const languageCompare = a.language.localeCompare(b.language);
  if (languageCompare === 0) {
    return a.versionName.localeCompare(b.versionName);
  } else {
    return languageCompare;
  }
});

// src/data/BibleVerseReferenceLinkPosition.ts
var BibleVerseReferenceLinkPositionCollection = [
  {
    name: "None" /* None */,
    description: "Hide (Clean and Simple)"
  },
  {
    name: "Header" /* Header */,
    description: "Header (Bible Verse Header)"
  },
  {
    name: "Bottom" /* Bottom */,
    description: "Bottom (Bottom of Bible Verse Content)"
  },
  {
    name: "Both" /* AllAbove */,
    description: "Both Header and Bottom"
  }
];

// src/data/BibleVerseFormat.ts
var BibleVerseFormatCollection = [
  {
    name: "Single Line" /* SingleLine */,
    description: "Single Line"
  },
  {
    name: "Paragraph" /* Paragraph */,
    description: "Paragraph"
  }
];

// src/data/BibleVerseNumberFormat.ts
var BibleVerseNumberFormatCollection = [
  {
    name: "1. " /* Period */,
    description: "1. "
  },
  {
    name: "1.) " /* PeriodParenthesis */,
    description: "1.) "
  },
  {
    name: "1) " /* Parenthesis */,
    description: "1) "
  },
  {
    name: "1 - " /* Dash */,
    description: "1 - "
  },
  {
    name: "1 " /* NumberOnly */,
    description: "1 "
  },
  {
    name: "^1" /* SuperScript */,
    description: "^1 (superscript)"
  },
  {
    name: "**^1**" /* SuperScriptBold */,
    description: "**^1** (bolded superscript)"
  },
  {
    name: "None" /* None */,
    description: "None"
  }
];

// src/data/constants.ts
var APP_NAMING = {
  appName: "Bible Reference",
  appAuthor: "tim-hub",
  appUrl: "",
  defaultStatus: ""
};
var OutgoingLinkPositionEnum = ((OutgoingLinkPositionEnum2) => {
  OutgoingLinkPositionEnum2[OutgoingLinkPositionEnum2["Header"] = "Header" /* Header */] = "Header";
  OutgoingLinkPositionEnum2[OutgoingLinkPositionEnum2["Bottom"] = "Bottom" /* Bottom */] = "Bottom";
  OutgoingLinkPositionEnum2[OutgoingLinkPositionEnum2["None"] = "None" /* None */] = "None";
  return OutgoingLinkPositionEnum2;
})(OutgoingLinkPositionEnum || {});
var DEFAULT_SETTINGS = {
  bibleVersion: DEFAULT_BIBLE_VERSION.key,
  referenceLinkPosition: "Header" /* Header */,
  verseFormatting: "Single Line" /* SingleLine */,
  verseNumberFormatting: "1. " /* Period */,
  collapsibleVerses: false,
  bookTagging: false,
  chapterTagging: false,
  enableBibleVerseLookupRibbon: false,
  optOutToEvents: false,
  bookBacklinking: OutgoingLinkPositionEnum.None,
  chapterBacklinking: OutgoingLinkPositionEnum.None,
  bibleVersionStatusIndicator: "Short" /* Short */
};

// src/ui/BibleReferenceSettingTab.ts
var import_obsidian2 = require("obsidian");

// src/provider/FeatureFlag.ts
var import_flagsmith_nodejs = __toESM(require_build());

// node_modules/.pnpm/ackee-tracker@5.1.0/node_modules/ackee-tracker/src/scripts/main.js
var import_platform = __toESM(require_platform());
var isBrowser = typeof window !== "undefined";
var validate2 = function(opts = {}) {
  const _opts = {};
  _opts.detailed = opts.detailed === true;
  _opts.ignoreLocalhost = opts.ignoreLocalhost !== false;
  _opts.ignoreOwnVisits = opts.ignoreOwnVisits !== false;
  return _opts;
};
var isLocalhost = function(hostname) {
  return hostname === "" || hostname === "localhost" || hostname === "127.0.0.1" || hostname === "::1";
};
var isBot = function(userAgent) {
  return /bot|crawler|spider|crawling/i.test(userAgent);
};
var isFakeId = function(id) {
  return id === "88888888-8888-8888-8888-888888888888";
};
var isInBackground = function() {
  return document.visibilityState === "hidden";
};
var source = function() {
  const source2 = (location.search.split(`source=`)[1] || "").split("&")[0];
  return source2 === "" ? void 0 : source2;
};
var attributes = function(detailed = false) {
  const defaultData = {
    siteLocation: window.location.href,
    siteReferrer: document.referrer,
    source: source()
  };
  const detailedData = {
    siteLanguage: (navigator.language || navigator.userLanguage).substr(0, 2),
    screenWidth: screen.width,
    screenHeight: screen.height,
    screenColorDepth: screen.colorDepth,
    deviceName: import_platform.default.product,
    deviceManufacturer: import_platform.default.manufacturer,
    osName: import_platform.default.os.family,
    osVersion: import_platform.default.os.version,
    browserName: import_platform.default.name,
    browserVersion: import_platform.default.version,
    browserWidth: window.outerWidth,
    browserHeight: window.outerHeight
  };
  return {
    ...defaultData,
    ...detailed === true ? detailedData : {}
  };
};
var createRecordBody = function(domainId, input) {
  return {
    query: `
			mutation createRecord($domainId: ID!, $input: CreateRecordInput!) {
				createRecord(domainId: $domainId, input: $input) {
					payload {
						id
					}
				}
			}
		`,
    variables: {
      domainId,
      input
    }
  };
};
var updateRecordBody = function(recordId) {
  return {
    query: `
			mutation updateRecord($recordId: ID!) {
				updateRecord(id: $recordId) {
					success
				}
			}
		`,
    variables: {
      recordId
    }
  };
};
var createActionBody = function(eventId, input) {
  return {
    query: `
			mutation createAction($eventId: ID!, $input: CreateActionInput!) {
				createAction(eventId: $eventId, input: $input) {
					payload {
						id
					}
				}
			}
		`,
    variables: {
      eventId,
      input
    }
  };
};
var updateActionBody = function(actionId, input) {
  return {
    query: `
			mutation updateAction($actionId: ID!, $input: UpdateActionInput!) {
				updateAction(id: $actionId, input: $input) {
					success
				}
			}
		`,
    variables: {
      actionId,
      input
    }
  };
};
var endpoint = function(server) {
  const hasTrailingSlash = server.substr(-1) === "/";
  return server + (hasTrailingSlash === true ? "" : "/") + "api";
};
var send = function(url, body, opts, next) {
  const xhr = new XMLHttpRequest();
  xhr.open("POST", url);
  xhr.onload = () => {
    if (xhr.status !== 200) {
      throw new Error("Server returned with an unhandled status");
    }
    let json = null;
    try {
      json = JSON.parse(xhr.responseText);
    } catch (e) {
      throw new Error("Failed to parse response from server");
    }
    if (json.errors != null) {
      throw new Error(json.errors[0].message);
    }
    if (typeof next === "function") {
      return next(json);
    }
  };
  xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
  xhr.withCredentials = opts.ignoreOwnVisits;
  xhr.send(JSON.stringify(body));
};
var detect = function() {
  const elem = document.querySelector("[data-ackee-domain-id]");
  if (elem == null)
    return;
  const server = elem.getAttribute("data-ackee-server") || "";
  const domainId = elem.getAttribute("data-ackee-domain-id");
  const opts = elem.getAttribute("data-ackee-opts") || "{}";
  create(server, JSON.parse(opts)).record(domainId);
};
var create = function(server, opts) {
  opts = validate2(opts);
  const url = endpoint(server);
  const noop = () => {
  };
  const fakeInstance = {
    record: () => ({ stop: noop }),
    updateRecord: () => ({ stop: noop }),
    action: noop,
    updateAction: noop
  };
  if (opts.ignoreLocalhost === true && isLocalhost(location.hostname) === true) {
    console.warn("Ackee ignores you because you are on localhost");
    return fakeInstance;
  }
  if (isBot(navigator.userAgent) === true) {
    console.warn("Ackee ignores you because you are a bot");
    return fakeInstance;
  }
  const _record = (domainId, attrs = attributes(opts.detailed), next) => {
    let isStopped = false;
    const stop = () => {
      isStopped = true;
    };
    send(url, createRecordBody(domainId, attrs), opts, (json) => {
      const recordId = json.data.createRecord.payload.id;
      if (isFakeId(recordId) === true) {
        return console.warn("Ackee ignores you because this is your own site");
      }
      const interval = setInterval(() => {
        if (isStopped === true) {
          clearInterval(interval);
          return;
        }
        if (isInBackground() === true)
          return;
        send(url, updateRecordBody(recordId), opts);
      }, 15e3);
      if (typeof next === "function") {
        return next(recordId);
      }
    });
    return { stop };
  };
  const _updateRecord = (recordId) => {
    let isStopped = false;
    const stop = () => {
      isStopped = true;
    };
    if (isFakeId(recordId) === true) {
      console.warn("Ackee ignores you because this is your own site");
      return { stop };
    }
    const interval = setInterval(() => {
      if (isStopped === true) {
        clearInterval(interval);
        return;
      }
      if (isInBackground() === true)
        return;
      send(url, updateRecordBody(recordId), opts);
    }, 15e3);
    return { stop };
  };
  const _action = (eventId, attrs, next) => {
    send(url, createActionBody(eventId, attrs), opts, (json) => {
      const actionId = json.data.createAction.payload.id;
      if (isFakeId(actionId) === true) {
        return console.warn("Ackee ignores you because this is your own site");
      }
      if (typeof next === "function") {
        return next(actionId);
      }
    });
  };
  const _updateAction = (actionId, attrs) => {
    if (isFakeId(actionId) === true) {
      return console.warn("Ackee ignores you because this is your own site");
    }
    send(url, updateActionBody(actionId, attrs), opts);
  };
  return {
    record: _record,
    updateRecord: _updateRecord,
    action: _action,
    updateAction: _updateAction
  };
};
if (isBrowser === true) {
  detect();
}

// src/provider/EventStats.ts
var EVENTS = {
  // key:count value 1
  settingsOpen: "2b5c608e-a773-4e99-8253-ae466e34ea3c",
  vodModalOpen: "d109ceb7-c654-4450-b4c7-b258845dbe6d",
  vodEditorOpen: "f814103b-d147-498d-8024-ec9285c5c6c7",
  lookupEditorOpen: "42abd468-3d86-45de-99bb-856267b6ce61",
  // got triggered in the editor
  lookupModalOpen: "63e6a132-2113-4363-8337-e8716c5bcb13",
  // key:john1:1 value: 1
  verseLookUp: "1e25a766-e81c-4241-aae9-16cfdadf3bd5",
  vodLookUp: "ca89d404-8953-4e8a-96aa-bc9dc5f3b12d",
  // settings, NIV 1
  changeVersion: "4504d174-6535-426e-8d54-c6e49d27d537",
  changeVerseFormatting: "af3fb034-a428-4a52-a2c4-556d61f95602",
  others: "e5751880-71c9-4dc5-9ba6-2d6d81828463",
  // changeLinkPosition: '',
  // changeVerseNumberFormatting: '',
  // changeCollapsible: '',
  // changeBookTagging: '',
  // changeChapterTagging: '',
  errors: "0d3fad56-4293-4691-b810-9a32cd1f6117"
};
var Logger = class {
  constructor() {
    this.getEventId = (eventName) => {
      try {
        return EVENTS[eventName];
      } catch (e) {
        const msg = `EventStats: ${eventName} is not a valid event name`;
        console.error(msg);
        throw new Error(msg);
      }
    };
  }
  static getInstance() {
    if (!Logger.instance) {
      Logger.instance = new Logger();
    }
    return Logger.instance;
  }
  init(server, domainId) {
    this.server = server;
    this.domainId = domainId;
    this.ackeeTracker = create(server, {
      ignoreLocalhost: true,
      detailed: true
    });
  }
  async logRecord(optOut) {
    if (!optOut) {
      this.record = Logger.instance.ackeeTracker.record(this.domainId);
      this.record.stop();
    }
  }
  async logSettingChange(eventName, actionAttributes, optOut) {
    if (!optOut) {
      this.fireEvent(this.getEventId(eventName), actionAttributes);
    }
  }
  async logLookup(eventName, actionAttributes, optOut) {
    if (!optOut) {
      this.fireEvent(this.getEventId(eventName), actionAttributes);
    }
  }
  async logUIOpen(eventName, actionAttributes, optOut) {
    if (!optOut) {
      this.fireEvent(this.getEventId(eventName), actionAttributes);
    }
  }
  async logError(eventName, actionAttributes) {
    this.fireEvent(this.getEventId(eventName), actionAttributes);
  }
  async fireEvent(eventId, actionAttributes) {
    Logger.instance.ackeeTracker.action(eventId, actionAttributes);
  }
};
var tracker = Logger.getInstance();
tracker.init(
  "https://log.techtim42.com",
  "f73c4c66-05ae-4c79-921e-fd0848d15d35"
);
var EventStats = tracker;

// src/provider/FeatureFlag.ts
var flagsmith = new import_flagsmith_nodejs.default({
  environmentKey: "NJTKgnNToZxbe6TCksAcmD"
});
var FlagService = class {
  static getInstace() {
    if (!FlagService.instance) {
      FlagService.instance = new FlagService();
    }
    return FlagService.instance;
  }
  async init(id) {
    if (id) {
      this.flags = await flagsmith.getIdentityFlags(id);
    } else {
      this.flags = await flagsmith.getEnvironmentFlags();
    }
  }
  isFeatureEnabled(feature) {
    return this.flags.isFeatureEnabled(feature);
  }
  getFeatureValue(feature) {
    try {
      const value = this.flags.getFlag(feature).value;
      return JSON.parse(value);
    } catch (e) {
      console.error("get feature flag value error");
      EventStats.logError("errors", { key: "featureflag", value: 1 });
    }
  }
};

// src/obsidian/PluginEvent.ts
var import_obsidian = require("obsidian");
var PluginEvent = class extends import_obsidian.Events {
  constructor() {
    super();
    this.refs = [];
  }
  static getInstance() {
    if (!PluginEvent.instance) {
      PluginEvent.instance = new PluginEvent();
    }
    return PluginEvent.instance;
  }
  on(name, callback, ctx) {
    const ref = super.on(name, callback, ctx);
    this.refs.push(ref);
    return ref;
  }
  offAll() {
    this.refs.forEach((ref) => {
      this.offref(ref);
    });
  }
};
var pluginEvent = PluginEvent.getInstance();

// src/ui/BibleReferenceSettingTab.ts
var BibleReferenceSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  async display() {
    this.containerEl.empty();
    this.startListeningToEvents();
    const headingSection = this.containerEl.createDiv();
    headingSection.innerHTML = `
        <iframe src="https://github.com/sponsors/tim-hub/button" title="Sponsor Obsidian Bible Reference" width="116" height="32px" style="margin-right: 2em"/>
    `;
    this.containerEl.createEl("h1", { text: APP_NAMING.appName });
    this.setUpVersionSettingsAndVersionOptions();
    this.containerEl.createEl("h2", { text: "Verses Rendering" });
    this.setUpReferenceLinkPositionOptions();
    this.setUpVerseFormatOptions();
    this.setUpVerseNumberFormatOptions();
    this.setUpCollapsible();
    this.setUpStatusIndicationOptions();
    this.containerEl.createEl("h2", { text: "Others" });
    this.setUpExpertSettings();
    this.containerEl.createSpan({}, (span) => {
      span.innerHTML = `
<a href="https://github.com/tim-hub/obsidian-bible-reference">Github Repo</a> |
<a href="https://github.com/tim-hub/obsidian-bible-reference/blob/master/docs/privacy.md">Privacy Policy</a> |
<a href="https://github.com/sponsors/tim-hub/button">Support</a>
    `;
    });
    this.expertSettingContainer = this.containerEl.createDiv();
    if (this.plugin.settings.advancedSettings) {
      this.displayExpertSettings();
    }
    EventStats.logUIOpen(
      "settingsOpen",
      { key: "open", value: 1 },
      this.plugin.settings.optOutToEvents
    );
  }
  startListeningToEvents() {
    pluginEvent.on("bible-reference:settings:advanced", (value) => {
      console.log("advanced", value);
      if (this.plugin.settings.advancedSettings) {
        this.displayExpertSettings();
      } else {
        (this == null ? void 0 : this.expertSettingContainer) && this.expertSettingContainer.empty();
      }
    });
  }
  displayExpertSettings() {
    if (this.expertSettingContainer) {
      this.expertSettingContainer.empty();
      this.expertSettingContainer.createEl("h2", { text: "Expert Settings" });
      new import_obsidian2.Setting(this.expertSettingContainer).setName("Add a Book Tag").setDesc("Add a hidden book tag at bottom, for example #John").addToggle(
        (toggle) => {
          var _a;
          return toggle.setValue(!!((_a = this.plugin.settings) == null ? void 0 : _a.bookTagging)).onChange(async (value) => {
            this.plugin.settings.bookTagging = value;
            await this.plugin.saveSettings();
            EventStats.logSettingChange(
              "changeVerseFormatting",
              { key: `book-tagging-${value}`, value: 1 },
              this.plugin.settings.optOutToEvents
            );
          });
        }
      );
      new import_obsidian2.Setting(this.expertSettingContainer).setName("Add a Chapter Tag").setDesc("Add a hidden chapter tag at bottom, for example #John1").addToggle(
        (toggle) => {
          var _a;
          return toggle.setValue(!!((_a = this.plugin.settings) == null ? void 0 : _a.chapterTagging)).onChange(async (value) => {
            this.plugin.settings.chapterTagging = value;
            await this.plugin.saveSettings();
            EventStats.logSettingChange(
              "changeVerseFormatting",
              { key: `chapter-tagging-${value}`, value: 1 },
              this.plugin.settings.optOutToEvents
            );
          });
        }
      );
      const getOutgoingLinkPosition = (linkingPostion) => {
        let value = linkingPostion;
        if (!value) {
          value = OutgoingLinkPositionEnum.None;
        } else if (value === true) {
          value = OutgoingLinkPositionEnum.Header;
        }
        return value;
      };
      new import_obsidian2.Setting(this.expertSettingContainer).setName("Add a Book Outgoing Link").setDesc("Makes an outgoing link for the book, for example [[John]]").addDropdown((dropdown) => {
        var _a;
        Object.keys(OutgoingLinkPositionEnum).forEach((name) => {
          dropdown.addOption(name, name);
        });
        const value = getOutgoingLinkPosition(
          (_a = this.plugin.settings) == null ? void 0 : _a.bookBacklinking
        );
        dropdown.setValue(value);
        dropdown.onChange(async (value2) => {
          this.plugin.settings.bookBacklinking = value2;
          await this.plugin.saveSettings();
        });
      });
      new import_obsidian2.Setting(this.expertSettingContainer).setName("Add a Chapter Outgoing Links").setDesc(
        "Makes an outgoing link for the chapter, for example [[John1]] "
      ).addDropdown((dropdown) => {
        var _a;
        Object.keys(OutgoingLinkPositionEnum).forEach((name) => {
          dropdown.addOption(name, name);
        });
        const value = getOutgoingLinkPosition(
          (_a = this.plugin.settings) == null ? void 0 : _a.chapterBacklinking
        );
        dropdown.setValue(value);
        dropdown.onChange(async (value2) => {
          this.plugin.settings.chapterBacklinking = value2;
          await this.plugin.saveSettings();
        });
      });
      this.setUpOptOutEventsOptions(this.expertSettingContainer);
    }
  }
  setUpVersionSettingsAndVersionOptions() {
    let allAvailableVersionOptions = allBibleVersionsWithLanguageNameAlphabetically;
    const disableBibleAPI = FlagService.instance.isFeatureEnabled("disable-bible-api");
    if (disableBibleAPI) {
      allAvailableVersionOptions = allAvailableVersionOptions.filter((v) => {
        return v.apiSource.name !== BibleAPISourceCollection.bibleApi.name;
      });
    }
    if (disableBibleAPI && !allAvailableVersionOptions.find(
      (v) => v.key === this.plugin.settings.bibleVersion
    )) {
      this.plugin.settings.bibleVersion = DEFAULT_BIBLE_VERSION.key;
    }
    new import_obsidian2.Setting(this.containerEl).setName("Default Bible Version").setDesc("Choose the Bible version you prefer").addDropdown((dropdown) => {
      allAvailableVersionOptions.forEach((version2) => {
        dropdown.addOption(
          version2.key,
          `${version2.language} - ${version2.versionName} @${version2.apiSource.name}`
        );
      });
      dropdown.setValue(this.plugin.settings.bibleVersion).onChange(async (value) => {
        this.plugin.settings.bibleVersion = value;
        console.debug("Default Bible Version: " + value);
        await this.plugin.saveSettings();
        pluginEvent.trigger("bible-reference:settings:version", [value]);
        new import_obsidian2.Notice(`Bible Reference - use Version ${value.toUpperCase()}`);
        EventStats.logSettingChange(
          "changeVersion",
          { key: value, value: 1 },
          this.plugin.settings.optOutToEvents
        );
      });
    });
  }
  setUpStatusIndicationOptions() {
    new import_obsidian2.Setting(this.containerEl).setName("Display Selected Version at Status Bar").setDesc("The way of display the selected Bible Version at status bar").addDropdown((dropdown) => {
      var _a;
      dropdown.addOption(
        "Full" /* Full */,
        "Full" /* Full */
      );
      dropdown.addOption(
        "Short" /* Short */,
        "Short" /* Short */
      );
      dropdown.addOption(
        "Hide" /* Hide */,
        "Hide" /* Hide */
      );
      dropdown.setValue(
        (_a = this.plugin.settings.bibleVersionStatusIndicator) != null ? _a : "Short" /* Short */
      ).onChange(async (value) => {
        this.plugin.settings.bibleVersionStatusIndicator = value;
        await this.plugin.saveSettings();
        pluginEvent.trigger("bible-reference:settings:version", [
          this.plugin.settings.bibleVersion
        ]);
        EventStats.logSettingChange(
          "others",
          { key: `version-status-indicator-${value}`, value: 1 },
          this.plugin.settings.optOutToEvents
        );
      });
    });
  }
  setUpReferenceLinkPositionOptions() {
    new import_obsidian2.Setting(this.containerEl).setName("Verse Reference Position").setDesc("Where to put the reference link of the Bible").addDropdown((dropdown) => {
      var _a;
      BibleVerseReferenceLinkPositionCollection.forEach(
        ({ name, description }) => {
          dropdown.addOption(name, description);
        }
      );
      dropdown.setValue(
        (_a = this.plugin.settings.referenceLinkPosition) != null ? _a : "None" /* None */
      ).onChange(async (value) => {
        this.plugin.settings.referenceLinkPosition = value;
        console.debug("Bible Verse Reference Link Position: " + value);
        await this.plugin.saveSettings();
        new import_obsidian2.Notice("Bible Reference Settings Updated ");
        EventStats.logSettingChange(
          "changeVerseFormatting",
          { key: `link-position-${value}`, value: 1 },
          this.plugin.settings.optOutToEvents
        );
      });
    });
  }
  setUpVerseFormatOptions() {
    new import_obsidian2.Setting(this.containerEl).setName("Verse Formatting Options").setDesc(
      "Sets how to format the verses in Obsidian, either line by line or in 1 paragraph"
    ).addDropdown((dropdown) => {
      var _a;
      BibleVerseFormatCollection.forEach(({ name, description }) => {
        dropdown.addOption(name, description);
      });
      dropdown.setValue(
        (_a = this.plugin.settings.verseFormatting) != null ? _a : "Single Line" /* SingleLine */
      ).onChange(async (value) => {
        this.plugin.settings.verseFormatting = value;
        console.debug("Bible Verse Format To: " + value);
        await this.plugin.saveSettings();
        new import_obsidian2.Notice("Bible Verse Format Settings Updated");
        EventStats.logSettingChange(
          "changeVerseFormatting",
          { key: `verse-format-${value}`, value: 1 },
          this.plugin.settings.optOutToEvents
        );
      });
    });
  }
  setUpVerseNumberFormatOptions() {
    new import_obsidian2.Setting(this.containerEl).setName("Verse Number Formatting Options").setDesc("Sets how to format the verse numbers in Obsidian").addDropdown((dropdown) => {
      var _a;
      BibleVerseNumberFormatCollection.forEach(({ name, description }) => {
        dropdown.addOption(name, description);
      });
      dropdown.setValue(
        (_a = this.plugin.settings.verseNumberFormatting) != null ? _a : "1. " /* Period */
      ).onChange(async (value) => {
        this.plugin.settings.verseNumberFormatting = value;
        console.debug("Bible Verse Number Format To: " + value);
        await this.plugin.saveSettings();
        new import_obsidian2.Notice("Bible Verse Format Number Settings Updated");
        EventStats.logSettingChange(
          "changeVerseFormatting",
          { key: `verse-number-format-${value}`, value: 1 },
          this.plugin.settings.optOutToEvents
        );
      });
    });
  }
  setUpCollapsible() {
    new import_obsidian2.Setting(this.containerEl).setName("Make Verses Collapsible").setDesc("Make the rendered verses collapsible").addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue(!!((_a = this.plugin.settings) == null ? void 0 : _a.collapsibleVerses)).onChange(async (value) => {
          this.plugin.settings.collapsibleVerses = value;
          await this.plugin.saveSettings();
          EventStats.logSettingChange(
            "changeVerseFormatting",
            { key: `collapsible-${value}`, value: 1 },
            this.plugin.settings.optOutToEvents
          );
        });
      }
    );
  }
  setUpExpertSettings() {
    new import_obsidian2.Setting(this.containerEl).setName("Expert Settings").setDesc(
      "Display or Hide Expert Settings, such as Tagging, Linking, Events Logging settings"
    ).addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue(!!((_a = this.plugin.settings) == null ? void 0 : _a.advancedSettings)).onChange(async (value) => {
          this.plugin.settings.advancedSettings = value;
          await this.plugin.saveSettings();
          pluginEvent.trigger("bible-reference:settings:advanced", [value]);
        });
      }
    );
  }
  setUpBookTagging() {
    this.expertSettingContainer && new import_obsidian2.Setting(this.expertSettingContainer).setName("Add a Book Tag").setDesc("Add a hidden book tag at bottom, for example #John").addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue(!!((_a = this.plugin.settings) == null ? void 0 : _a.bookTagging)).onChange(async (value) => {
          this.plugin.settings.bookTagging = value;
          await this.plugin.saveSettings();
          EventStats.logSettingChange(
            "changeVerseFormatting",
            { key: `book-tagging-${value}`, value: 1 },
            this.plugin.settings.optOutToEvents
          );
        });
      }
    );
  }
  setUpChapterTagging() {
    this.expertSettingContainer && new import_obsidian2.Setting(this.expertSettingContainer).setName("Add a Chapter Tag").setDesc("Add a hidden chapter tag at bottom, for example #John1").addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue(!!((_a = this.plugin.settings) == null ? void 0 : _a.chapterTagging)).onChange(async (value) => {
          this.plugin.settings.chapterTagging = value;
          await this.plugin.saveSettings();
          EventStats.logSettingChange(
            "changeVerseFormatting",
            { key: `chapter-tagging-${value}`, value: 1 },
            this.plugin.settings.optOutToEvents
          );
        });
      }
    );
  }
  setUpOptOutEventsOptions(container = this.containerEl) {
    new import_obsidian2.Setting(container).setName("Opt Out of Events Logging").setDesc(
      "We used events logging to improve the plugin, this is very helpful for us, but if you want to opt out, you can do it here. (Excluding Errors Logs))"
    ).addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue(!!((_a = this.plugin.settings) == null ? void 0 : _a.optOutToEvents)).onChange(async (value) => {
          EventStats.logSettingChange(
            "others",
            { key: `opt-${value ? "out" : "in"}`, value: 1 },
            this.plugin.settings.optOutToEvents
          );
          this.plugin.settings.optOutToEvents = value;
          await this.plugin.saveSettings();
          if (value) {
            new import_obsidian2.Notice(
              "You have opted out of events logging, we will not log any events from now on"
            );
          } else {
            new import_obsidian2.Notice(
              "Thanks for opting in to events logging, this is really valuable for us to improve the plugin"
            );
          }
        });
      }
    );
  }
};

// src/suggesetor/VerseEditorSuggester.ts
var import_obsidian4 = require("obsidian");

// src/utils/regs.ts
var SHORT_REG = /-{2}([123])*\s*[A-z]{2,}\s*\d{1,3}:\d{1,3}(-\d{1,3})*/;
var MODAL_REG = /([123])*\s*[A-z]{2,}\s*\d{1,3}:\d{1,3}(-\d{1,3})*/;
var BOOK_REG = /[123]*\s*[A-z]{2,}/;

// src/utils/verseMatch.ts
var verseMatch = (verse, isFromModal = false) => {
  const matchResults = verse.match(isFromModal ? MODAL_REG : SHORT_REG);
  if (!matchResults) {
    return "";
  } else {
    return matchResults[0];
  }
};

// src/provider/BaseBibleAPIProvider.ts
var import_obsidian3 = require("obsidian");
var BaseBibleAPIProvider = class {
  constructor(bibleVersion) {
    this._bibleVersiopn = bibleVersion;
    const { key } = bibleVersion;
    this._versionKey = key;
    this._apiUrl = bibleVersion.apiSource.apiUrl;
  }
  get LanguageShortCode() {
    return this._bibleVersiopn.code;
  }
  /**
   * Get the Key Identity for the Bible version
   */
  get BibleVersionKey() {
    return this._versionKey;
  }
  /**
   * Get the API URL for the latest query
   * for example, https://api.scripture.api.bible/v1/bibles/de4e0c8c-9c29-44c7-a8c3-c8a9c1b9d6a0/verses/ESV/
   */
  get QueryURL() {
    return this._queryUrl;
  }
  /**
   * Get the Callout Link URL for the verse query
   * By default it's the Query URL, but for some API there is a provided web app, so it will link to that.
   * In the Bolly Life interface, it's just the same URL location except without `/get-text`
   */
  get VerseLinkURL() {
    return this._queryUrl;
  }
  /**
   * Get the Reference Head for the latest query
   * for example, "John 3:16"
   */
  get BibleReferenceHead() {
    return this._bibleReferenceHead;
  }
  /**
   * The Query Function to get response from bible api then format the response,
   * @param bookName
   * @param chapter
   * @param verse, optional, if none, whole chapter will be returned
   * @param versionName, optional, to override default selected version
   */
  async query(bookName, chapter, verse, versionName) {
    if (!this._versionKey && versionName) {
      throw new Error("version (language) not set yet");
    }
    const url = this.buildRequestURL(
      bookName,
      chapter,
      verse,
      versionName || this._versionKey
    );
    console.debug(url, "url to query");
    try {
      const response = await fetch(url, {
        method: "get",
        // headers: {
        //   'Content-Type': 'application/json',
        // }, // some provide does not accept this header
        redirect: "follow",
        // manual, *follow, error
        cache: "force-cache"
      });
      const data = await response.json();
      return this.formatBibleVerses(
        data,
        bookName,
        chapter,
        verse,
        versionName || this._versionKey
      );
    } catch (e) {
      console.error("error while querying", e);
      new import_obsidian3.Notice(`Error while querying ${url}`);
      EventStats.logError("errors", { key: url, value: 1 });
      return await Promise.reject(e);
    }
  }
};

// src/provider/BibleAPIDotComProvider.ts
var BibleAPIDotComProvider = class extends BaseBibleAPIProvider {
  constructor(bibleVersion) {
    super(bibleVersion);
  }
  /**
   * Build Request Url for Bible-Api.com
   * @param bookName
   * @param chapter
   * @param verses
   * @param versionName
   */
  buildRequestURL(bookName, chapter, verses, versionName) {
    let queryString = `${bookName}+${chapter}:`.replace(/ /g, "+");
    if ((verses == null ? void 0 : verses.length) >= 3) {
      queryString += verses.join("&");
    } else if ((verses == null ? void 0 : verses.length) === 2 && !!verses[1]) {
      queryString += `${verses[0]}-${verses[1]}`;
    } else {
      queryString += `${verses[0]}`;
    }
    this._queryUrl = `${this._apiUrl}/${queryString}?translation=${versionName ? versionName : (this == null ? void 0 : this.BibleVersionKey) ? this.BibleVersionKey : ""}`;
    return this._queryUrl;
  }
  /**
   * Format response from Bible-Api.com
   * - reference
   * - text
   * - verses
   * - translation_id
   * - translation_name
   * - translation_note
   * @returns {Promise<IVerse[]>}
   */
  formatBibleVerses(data) {
    this._bibleReferenceHead = data.reference;
    return data.verses;
  }
};

// src/utils/bookNameReference.ts
var import_bible_reference_toolkit = __toESM(require_dist2());
var getBookIdFromBookName = (bookName, languageCode = "en") => {
  try {
    console.debug("get book id first time", bookName, languageCode);
    return import_bible_reference_toolkit.default.bookIdFromTranslationAndName(languageCode, bookName);
  } catch (e) {
    console.debug("get book id from all translations", bookName);
    return import_bible_reference_toolkit.default.bookIdFromName(bookName);
  }
};
var getFullBookName = (name, languageCode = "en") => {
  console.debug("getFullBookName", name, languageCode);
  const bookId = getBookIdFromBookName(name, languageCode);
  try {
    return import_bible_reference_toolkit.default.bookNameFromTranslationAndId(languageCode, bookId);
  } catch (e) {
    return import_bible_reference_toolkit.default.bookEnglishFullNameFromId(bookId);
  }
};

// src/provider/BollyLifeProvider.ts
var BollyLifeProvider = class extends BaseBibleAPIProvider {
  constructor(bibleVersion) {
    super(bibleVersion);
    this._chapterApiUrl = this._apiUrl;
  }
  get VerseLinkURL() {
    return this._queryUrl.replace("/get-text", "");
  }
  buildRequestURL(bookName, chapter, verses, versionName) {
    const baseUrl = this._chapterApiUrl;
    const bookId = getBookIdFromBookName(bookName, this._bibleVersiopn.code);
    this._queryUrl = `${baseUrl}/${versionName == null ? void 0 : versionName.toUpperCase()}/${bookId}/${chapter}/`;
    return this._queryUrl;
  }
  /**
   * Format response from Bible-Api.com
   * - reference
   * - text
   * - verses
   * - translation_id
   * - translation_name
   * - translation_note
   * @returns {Promise<IVerse[]>}
   */
  formatBibleVerses(data, bookName, chapter, verses, versionName) {
    this._bibleReferenceHead = `${bookName} ${chapter}:${verses[0]}${verses[1] ? `-${verses[1]}` : ""}`;
    return data.filter(
      (verse) => verse.verse >= verses[0] && verse.verse <= verses[verses.length - 1]
    ).map((verse) => ({
      text: verse.text,
      chapter: verse.chapter,
      book_id: verse.book,
      book_name: bookName,
      // this might be different than user typed
      verse: verse.verse
    }));
  }
};

// src/provider/ProviderFactory.ts
var ProviderFactory = class {
  // private constructor
  constructor() {
    if (ProviderFactory._instance) {
      throw new Error(
        "Error: Instantiation failed: Use BibleAPIFactory.Instance instead of new."
      );
    }
    ProviderFactory._instance = this;
  }
  // get instance of BibleAPIFactory
  static get Instance() {
    if (ProviderFactory._instance === null || ProviderFactory._instance === void 0) {
      ProviderFactory._instance = new ProviderFactory();
    }
    return ProviderFactory._instance;
  }
  /**
   * Get the bible api provider from bible version selected
   * @param bibleVersion
   * @constructor
   */
  BuildBibleVersionAPIAdapterFromIBibleVersion(bibleVersion) {
    switch (bibleVersion.apiSource) {
      case BibleAPISourceCollection.bibleApi: {
        return new BibleAPIDotComProvider(bibleVersion);
      }
      case BibleAPISourceCollection.bollsLife: {
        return new BollyLifeProvider(bibleVersion);
      }
      default: {
        return new BibleAPIDotComProvider(bibleVersion);
      }
    }
  }
};

// src/verse/BaseVerseFormatter.ts
var BaseVerseFormatter = class {
  constructor(settings, verseReference, verseTexts) {
    this.verses = [];
    this.settings = settings;
    this.verseReference = verseReference;
    const { bookName, chapterNumber, verseNumber, verseNumberEnd } = this.verseReference;
    if (verseNumberEnd && verseNumberEnd - verseNumber !== (verseTexts == null ? void 0 : verseTexts.length)) {
      console.error("Verse text length does not match verse numbers");
    }
    this.verses = verseTexts == null ? void 0 : verseTexts.map((verse, index) => {
      return {
        book_name: bookName,
        chapter: chapterNumber,
        verse: verseNumber + index,
        text: verse
      };
    });
  }
  /**
   * To get the content of the bible verses
   */
  get allFormattedContent() {
    var _a;
    if (!((_a = this.verses) == null ? void 0 : _a.length)) {
      console.error("No verses found");
    }
    return [this.head, this.bodyContent, this.bottom].join("\n");
  }
  get bodyContent() {
    var _a, _b;
    if (!((_a = this.verses) == null ? void 0 : _a.length)) {
      return "";
    }
    let text = "";
    if (((_b = this.settings) == null ? void 0 : _b.verseFormatting) === "Paragraph" /* Paragraph */) {
      text = "> ";
    } else {
      text = "";
    }
    this.verses.forEach((verse) => {
      var _a2;
      const verseNumberFormatted = this.formatVerseNumber(verse.verse);
      if (((_a2 = this.settings) == null ? void 0 : _a2.verseFormatting) === "Paragraph" /* Paragraph */) {
        text += " " + verseNumberFormatted + verse.text.trim().replaceAll("\n", " ");
      } else {
        text += "> " + verseNumberFormatted + verse.text.trim() + "\n";
      }
    });
    console.debug("text", text);
    return text.trim();
  }
  get head() {
    var _a;
    let head = `> [!bible]`;
    if ((_a = this.settings) == null ? void 0 : _a.collapsibleVerses) {
      head += "+";
    }
    if (this.settings.referenceLinkPosition === "Header" /* Header */ || this.settings.referenceLinkPosition === "Both" /* AllAbove */) {
      head += this.getVerseReferenceLink();
    }
    return head;
  }
  get bottom() {
    let bottom = "";
    if (this.settings.referenceLinkPosition === "Bottom" /* Bottom */ || this.settings.referenceLinkPosition === "Both" /* AllAbove */) {
      bottom += `> 
 ${this.getVerseReferenceLink()}`;
    }
    return bottom;
  }
  formatVerseNumber(verseNumber) {
    let verseNumberFormatted = "";
    switch (this.settings.verseNumberFormatting) {
      case "1. " /* Period */:
        verseNumberFormatted += verseNumber + ". ";
        return verseNumberFormatted;
      case "1.) " /* PeriodParenthesis */:
        verseNumberFormatted += verseNumber + ".) ";
        return verseNumberFormatted;
      case "1) " /* Parenthesis */:
        verseNumberFormatted += verseNumber + ") ";
        return verseNumberFormatted;
      case "1 - " /* Dash */:
        verseNumberFormatted += verseNumber + " - ";
        return verseNumberFormatted;
      case "1 " /* NumberOnly */:
        verseNumberFormatted += verseNumber + " ";
        return verseNumberFormatted;
      case "^1" /* SuperScript */:
        verseNumberFormatted += "<sup> " + verseNumber + " </sup>";
        return verseNumberFormatted;
      case "**^1**" /* SuperScriptBold */:
        verseNumberFormatted += "<sup> **" + verseNumber + "** </sup>";
        return verseNumberFormatted;
      case "None" /* None */:
        verseNumberFormatted = " ";
        return verseNumberFormatted;
      default:
        verseNumberFormatted += verseNumber + ". ";
        return verseNumberFormatted;
    }
  }
};

// src/verse/VerseSuggesting.ts
var VerseSuggesting = class extends BaseVerseFormatter {
  // todo make constructor consistent with other classes
  constructor(settings, bookName, chapterNumber, verseNumber, verseNumberEnd) {
    super(settings, {
      bookName,
      chapterNumber,
      verseNumber,
      verseNumberEnd
    });
    this.bibleVersion = settings.bibleVersion;
  }
  get head() {
    var _a, _b;
    let content = super.head;
    content += ((_a = this.settings) == null ? void 0 : _a.bookBacklinking) === OutgoingLinkPositionEnum.Header ? ` [[${this.verseReference.bookName}]]` : "";
    content += ((_b = this.settings) == null ? void 0 : _b.chapterBacklinking) === OutgoingLinkPositionEnum.Header ? ` [[${this.verseReference.bookName} ${this.verseReference.chapterNumber}]]` : "";
    return content;
  }
  get bottom() {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    let bottom = super.bottom;
    if (((_a = this.settings) == null ? void 0 : _a.bookTagging) || ((_b = this.settings) == null ? void 0 : _b.chapterTagging)) {
      bottom += " %%";
      bottom += ((_c = this.settings) == null ? void 0 : _c.bookTagging) ? ` #${this.verseReference.bookName}` : "";
      bottom += ((_d = this.settings) == null ? void 0 : _d.chapterTagging) ? ` #${this.verseReference.bookName + this.verseReference.chapterNumber}` : "";
      bottom += " %%";
    }
    if (((_e = this.settings) == null ? void 0 : _e.bookBacklinking) === OutgoingLinkPositionEnum.Bottom || ((_f = this.settings) == null ? void 0 : _f.chapterBacklinking) === OutgoingLinkPositionEnum.Bottom) {
      bottom += ">\n ";
      bottom += ((_g = this.settings) == null ? void 0 : _g.bookBacklinking) === OutgoingLinkPositionEnum.Bottom ? ` [[${this.verseReference.bookName}]]` : "";
      bottom += ((_h = this.settings) == null ? void 0 : _h.chapterBacklinking) === OutgoingLinkPositionEnum.Bottom ? ` [[${this.verseReference.bookName} ${this.verseReference.chapterNumber}]]` : "";
    }
    return bottom + "\n";
  }
  /**
   * Render for use in editor/modal suggest
   */
  renderSuggestion(el) {
    const outer = el.createDiv({ cls: "obr-suggester-container" });
    outer.createDiv({ cls: "obr-shortcode" }).setText(this.bodyContent);
  }
  async fetchAndSetVersesText() {
    this.verses = await this.getVerses();
  }
  async getVerses() {
    var _a;
    console.debug(this.bibleVersion);
    if (this.bibleVersion === DEFAULT_SETTINGS.bibleVersion) {
      console.debug("match to default language plus version");
    }
    const bibleVersion = getBibleVersion(this.bibleVersion);
    if (!this.bibleProvider || this.bibleProvider.BibleVersionKey !== (bibleVersion == null ? void 0 : bibleVersion.key)) {
      this.bibleProvider = ProviderFactory.Instance.BuildBibleVersionAPIAdapterFromIBibleVersion(
        bibleVersion
      );
    }
    return this.bibleProvider.query(
      this.verseReference.bookName,
      this.verseReference.chapterNumber,
      ((_a = this.verseReference) == null ? void 0 : _a.verseNumberEnd) ? [this.verseReference.verseNumber, this.verseReference.verseNumberEnd] : [this.verseReference.verseNumber]
    );
  }
  getVerseReferenceLink() {
    return ` [${this.bibleProvider.BibleReferenceHead} - ${this.bibleVersion.toUpperCase()}](${this.bibleProvider.VerseLinkURL})`;
  }
};

// src/utils/getSuggestionsFromQuery.ts
var getSuggestionsFromQuery = async (query, settings) => {
  console.debug("get suggestion for query ", query.toLowerCase());
  const matchResults = query.match(BOOK_REG);
  const rawBookName = (matchResults == null ? void 0 : matchResults.length) ? matchResults[0] : void 0;
  if (!rawBookName) {
    console.error(`could not find through query`, query);
    return [];
  }
  const numbersPartsOfQueryString = query.substring(2 + rawBookName.length);
  const numbers = numbersPartsOfQueryString.split(/[-:]+/);
  const chapterNumber = parseInt(numbers[0].trim());
  const verseNumber = parseInt(numbers[1]);
  const verseEndNumber = numbers.length === 3 ? parseInt(numbers[2]) : void 0;
  const selectedBibleVersion = getBibleVersion(settings.bibleVersion);
  const bookName = getFullBookName(rawBookName, selectedBibleVersion == null ? void 0 : selectedBibleVersion.code);
  console.debug("bookName", bookName);
  const suggestingVerse = new VerseSuggesting(
    settings,
    bookName,
    chapterNumber,
    verseNumber,
    verseEndNumber
  );
  console.debug(
    bookName,
    chapterNumber,
    verseNumber,
    verseEndNumber,
    suggestingVerse,
    settings
  );
  await suggestingVerse.fetchAndSetVersesText();
  return [suggestingVerse];
};

// src/suggesetor/VerseEditorSuggester.ts
var VerseEditorSuggester = class extends import_obsidian4.EditorSuggest {
  constructor(plugin, settings) {
    super(plugin.app);
    this.plugin = plugin;
    this.settings = settings;
  }
  /**
   * This will build the EditorSuggestContext in getSuggestions
   * @param cursor
   * @param editor
   * @param _
   */
  onTrigger(cursor, editor, _) {
    const currentContent = editor.getLine(cursor.line).substring(0, cursor.ch);
    const match = verseMatch(currentContent, false);
    if (match) {
      console.debug("trigger on", currentContent);
      EventStats.logUIOpen(
        "lookupEditorOpen",
        { key: `${this.settings.bibleVersion}`, value: 1 },
        this.settings.optOutToEvents
      );
      return {
        end: cursor,
        start: {
          line: cursor.line,
          ch: currentContent.lastIndexOf(match)
        },
        query: match
      };
    }
    return null;
  }
  /**
   * Suggest bible verses.
   * @param context
   */
  async getSuggestions(context) {
    const suggestions = await getSuggestionsFromQuery(
      context.query,
      this.settings
    );
    EventStats.logLookup(
      "verseLookUp",
      {
        key: `${this.settings.bibleVersion}-${context.query.toLowerCase()}`,
        value: 1
      },
      this.settings.optOutToEvents
    );
    return suggestions;
  }
  renderSuggestion(suggestion, el) {
    suggestion.renderSuggestion(el);
  }
  selectSuggestion(suggestion) {
    if (this.context) {
      this.context.editor.replaceRange(
        suggestion.allFormattedContent,
        this.context.start,
        this.context.end
      );
    }
  }
};

// src/suggesetor/VerseLookupSuggestModal.ts
var import_obsidian5 = require("obsidian");
var VerseLookupSuggestModal = class extends import_obsidian5.SuggestModal {
  constructor(plugin, settings) {
    super(plugin.app);
    this.settings = settings;
    this.setInstructions([
      { command: "", purpose: "Select verses to insert, ex: John1:1-3" }
    ]);
  }
  onOpen() {
    super.onOpen();
  }
  async getSuggestions(query) {
    const match = verseMatch(query, true);
    if (match) {
      console.debug("trigger on", query);
      EventStats.logLookup(
        "verseLookUp",
        {
          key: `${this.settings.bibleVersion}-${match.toLowerCase()}`,
          value: 1
        },
        this.settings.optOutToEvents
      );
      return getSuggestionsFromQuery(`--${query}`, this.settings);
    }
    return [];
  }
  renderSuggestion(suggestion, el) {
    suggestion.renderSuggestion(el);
  }
  onChooseSuggestion(item, evt) {
    var _a;
    const editor = (_a = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView)) == null ? void 0 : _a.editor;
    if (!editor) {
      return;
    }
    editor.replaceRange(item.allFormattedContent, editor.getCursor());
  }
};

// src/suggesetor/VerseOfDayEditorSuggester.ts
var import_obsidian6 = require("obsidian");

// src/provider/VODProvider.ts
var getVod = async () => {
  const resp = await fetch(
    "https://beta.ourmanna.com/api/v1/get?format=json&order=daily"
  );
  return resp.json();
};

// src/verse/VerseOfDaySuggesting.ts
var VerseOfDaySuggesting = class extends BaseVerseFormatter {
  constructor(settings, verseReference, verseTexts) {
    super(settings, verseReference, verseTexts);
    this.verseReference = verseReference;
    this.verseTexts = verseTexts;
  }
  getVerseReferenceLink() {
    const { bookName, chapterNumber, verseNumber, verseNumberEnd } = this.verseReference;
    return ` Verse of the Day [${bookName} ${chapterNumber}:${verseNumber}${verseNumberEnd ? `-${verseNumberEnd}` : ""}](https://beta.ourmanna.com/api/v1/get?format=json&order=daily)`;
  }
};

// src/utils/splitBibleReference.ts
var splitBibleReference = (reference) => {
  const parts = reference.trim().split(" ");
  const length = parts.length;
  const numbers = parts[length - 1].split(/[-:]+/);
  const chapterNumber = parseInt(numbers[0].trim());
  const verseNumber = parseInt(numbers[1]);
  const verseEndNumber = numbers.length === 3 ? parseInt(numbers[2]) : void 0;
  const bookName = parts.slice(0, length - 1).join(" ");
  return {
    bookName,
    chapterNumber,
    verseNumber,
    verseEndNumber
  };
};

// src/suggesetor/VerseOfDayEditorSuggester.ts
var VerseOfDayEditorSuggester = class extends import_obsidian6.EditorSuggest {
  constructor(plugin, settings) {
    super(plugin.app);
    this.plugin = plugin;
    this.settings = settings;
  }
  async getSuggestions(context) {
    const vodResp = await getVod();
    const reference = splitBibleReference(vodResp.verse.details.reference);
    const verseTexts = [vodResp.verse.details.text];
    const vodSuggesting = new VerseOfDaySuggesting(
      this.settings,
      reference,
      verseTexts
    );
    EventStats.logLookup(
      "vodLookUp",
      { key: `${this.settings.bibleVersion}-vod`, value: 1 },
      this.settings.optOutToEvents
    );
    return [vodSuggesting];
  }
  /**
   * This will build the EditorSuggestContext in getSuggestions
   * This is monitoring when --vod got typed.
   * Make sure the trigger not conflicts with other suggesters.
   * @param cursor
   * @param editor
   * @param file
   */
  onTrigger(cursor, editor, file) {
    const currentContent = editor.getLine(cursor.line).substring(0, cursor.ch);
    if (currentContent === "--vod") {
      EventStats.logUIOpen(
        "vodEditorOpen",
        { key: `${this.settings.bibleVersion}-vod`, value: 1 },
        this.settings.optOutToEvents
      );
      return {
        end: cursor,
        start: {
          line: cursor.line,
          ch: currentContent.lastIndexOf("--vod")
        },
        query: "--vod"
      };
    }
    return null;
  }
  renderSuggestion(suggestion, el) {
    const outer = el.createDiv({ cls: "obr-suggester-container" });
    outer.createDiv({ cls: "obr-shortcode" }).setText(suggestion.bodyContent);
  }
  selectSuggestion(suggestion, evt) {
    if (this.context) {
      this.context.editor.replaceRange(
        suggestion.allFormattedContent,
        this.context.start,
        this.context.end
      );
    }
  }
};

// src/suggesetor/VerseOfDayModal.ts
var import_obsidian7 = require("obsidian");
var VerseOfDayModal = class extends import_obsidian7.Modal {
  constructor(plugin, settings) {
    super(plugin.app);
    this.settings = settings;
  }
  onClose() {
    super.onClose();
    const { contentEl } = this;
    contentEl.empty();
  }
  async onOpen() {
    super.onOpen();
    const { contentEl } = this;
    const item = await getVod();
    contentEl.setText(`${item.verse.details.text}
-- ${item.verse.details.reference}    
    `);
    EventStats.logLookup(
      "vodLookUp",
      { key: `${this.settings.bibleVersion}-vod`, value: 1 },
      this.settings.optOutToEvents
    );
  }
};

// src/main.ts
var BibleReferencePlugin = class extends import_obsidian8.Plugin {
  async onload() {
    console.debug("loading plugin -", APP_NAMING.appName);
    await this.loadSettings();
    this.addSettingTab(new BibleReferenceSettingTab(this.app, this));
    this.registerEditorSuggest(new VerseEditorSuggester(this, this.settings));
    this.verseLookUpModal = new VerseLookupSuggestModal(this, this.settings);
    this.addVerseLookupCommand();
    this.addRibbonButton();
    const flagService = FlagService.getInstace();
    await flagService.init("obsidian-app");
    if (FlagService.instance.isFeatureEnabled("vod")) {
      console.debug("vod feature flag enabled");
      const featureValues = FlagService.instance.getFeatureValue("vod");
      if (featureValues == null ? void 0 : featureValues.editor) {
        this.registerEditorSuggest(
          new VerseOfDayEditorSuggester(this, this.settings)
        );
      }
      if (featureValues == null ? void 0 : featureValues.insert) {
        this.verseOfDayModal = new VerseOfDayModal(this, this.settings);
        this.addVerseOfDayInsertCommand();
      }
      if (featureValues == null ? void 0 : featureValues.notice) {
        this.addVerseOfDayNoticeCommand();
      }
    }
    this.initStatusBarIndicator();
    EventStats.logRecord(this.settings.optOutToEvents);
  }
  onunload() {
    console.debug("unloading plugin", APP_NAMING.appName);
    this.removeRibbonButton();
    this.tryRemoveStatusBarIndicator();
    pluginEvent.offAll();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    console.debug("settings is loaded");
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async getAndCachedVerseOfDay() {
    const { ttl, timestamp, verseOfDaySuggesting } = (this == null ? void 0 : this.cachedVerseOfDaySuggesting) || {};
    if (!verseOfDaySuggesting || timestamp + ttl > Date.now()) {
      const vodResp = await getVod();
      const reference = splitBibleReference(vodResp.verse.details.reference);
      const verseTexts = [vodResp.verse.details.text];
      const vodSuggesting = new VerseOfDaySuggesting(
        this.settings,
        reference,
        verseTexts
      );
      this.cachedVerseOfDaySuggesting = {
        verseOfDaySuggesting: vodSuggesting,
        ttl: 1e3 * 60 * 60 * 6,
        timestamp: Date.now()
      };
    }
    return this.cachedVerseOfDaySuggesting.verseOfDaySuggesting;
  }
  addVerseLookupCommand() {
    this.addCommand({
      id: "obr-lookup",
      name: "Verse Lookup",
      callback: () => {
        EventStats.logUIOpen(
          "lookupModalOpen",
          { key: `command-lookup`, value: 1 },
          this.settings.optOutToEvents
        );
        this.verseLookUpModal.open();
      }
    });
  }
  addVerseOfDayNoticeCommand() {
    this.addCommand({
      id: "obr-vod-view-verses-of-day",
      name: "Verse Of The Day - Notice (10 Seconds)",
      callback: async () => {
        var _a;
        const verse = await this.getAndCachedVerseOfDay();
        EventStats.logUIOpen(
          "vodEditorOpen",
          { key: `command-vod`, value: 1 },
          this.settings.optOutToEvents
        );
        new import_obsidian8.Notice(
          `${(_a = verse.verseTexts) == null ? void 0 : _a.join("")} -- ${verse.verseReference.bookName} ${verse.verseReference.chapterNumber}:${verse.verseReference.verseNumber}`,
          1e3 * 10
        );
      }
    });
  }
  addVerseOfDayInsertCommand() {
    this.addCommand({
      id: "obs-vod-insert-verse-of-day",
      name: "Verse Of The Day - Insert To Current Note",
      editorCallback: async (editor, view) => {
        const vodSuggesting = await this.getAndCachedVerseOfDay();
        EventStats.logUIOpen(
          "vodEditorOpen",
          { key: `command-vod-insert`, value: 1 },
          this.settings.optOutToEvents
        );
        editor.replaceSelection(vodSuggesting.allFormattedContent);
      }
    });
  }
  addRibbonButton() {
    this.ribbonButton = this.addRibbonIcon(
      "book-open",
      "Bible Verse Lookup",
      (_evt) => {
        EventStats.logUIOpen(
          "lookupModalOpen",
          { key: `ribbon-click`, value: 1 },
          this.settings.optOutToEvents
        );
        this.verseLookUpModal.open();
      }
    );
  }
  removeRibbonButton() {
    var _a;
    if (this.ribbonButton) {
      EventStats.logUIOpen(
        "lookupModalOpen",
        { key: `ribbon-remove`, value: 1 },
        this.settings.optOutToEvents
      );
      (_a = this.ribbonButton.parentNode) == null ? void 0 : _a.removeChild(this.ribbonButton);
    }
  }
  getStatusBatLabel() {
    const selectedVersion = getBibleVersion(this.settings.bibleVersion);
    if (this.settings.bibleVersionStatusIndicator === "Short" /* Short */) {
      return `${selectedVersion.key.toUpperCase()}`;
    } else if (this.settings.bibleVersionStatusIndicator === "Full" /* Full */) {
      return `${selectedVersion.versionName}(${selectedVersion.language})`;
    } else {
      return "";
    }
  }
  /**
   * To indicate user the Bible version selected
   * @private
   */
  initStatusBarIndicator() {
    this.tryRemoveStatusBarIndicator();
    this.statusBarIndicator = this.addStatusBarItem();
    this.statusBarIndicator.createEl("span", {
      text: this.getStatusBatLabel(),
      cls: "bible-version-indicator"
    });
    pluginEvent.on("bible-reference:settings:version", () => {
      this.updateStatusBarIndicator();
    });
  }
  tryRemoveStatusBarIndicator() {
    var _a;
    if (this.statusBarIndicator) {
      (_a = this.statusBarIndicator.parentNode) == null ? void 0 : _a.removeChild(this.statusBarIndicator);
    }
  }
  updateStatusBarIndicator() {
    if (this.statusBarIndicator && "getElementsByClassName" in this.statusBarIndicator) {
      const el = this.statusBarIndicator.getElementsByClassName(
        "bible-version-indicator"
      )[0];
      el.innerHTML = this.getStatusBatLabel();
    }
  }
};
/*! Bundled license information:

is-buffer/index.js:
  (*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

platform/platform.js:
  (*!
   * Platform.js v1.3.6
   * Copyright 2014-2020 Benjamin Tan
   * Copyright 2011-2013 John-David Dalton
   * Available under MIT license
   *)
*/
